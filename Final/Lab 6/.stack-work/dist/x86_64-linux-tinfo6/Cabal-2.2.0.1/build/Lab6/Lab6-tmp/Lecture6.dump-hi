
==================== FINAL INTERFACE ====================
2018-10-13 18:59:03.661001788 UTC

interface main:Lecture6 8043
  interface hash: ef8fd619e7b9f209975e3d71eda1f7e5
  ABI hash: 64a699b0ebe12088221766fb1ea42d4b
  export-list hash: e01b7181fc86fd1f02257a1070dbbbf5
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b6c96e27b9c0f9c6b798b842d1c188fa
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lecture6.addM
  Lecture6.bin2int
  Lecture6.bound
  Lecture6.cipher
  Lecture6.coprime
  Lecture6.coprime'
  Lecture6.coprimeT
  Lecture6.coprimes
  Lecture6.decipher
  Lecture6.decode
  Lecture6.decodeDH
  Lecture6.decomp
  Lecture6.encode
  Lecture6.encodeDH
  Lecture6.exM
  Lecture6.exM'
  Lecture6.expM
  Lecture6.f
  Lecture6.fGcd
  Lecture6.factors
  Lecture6.factorsNaive
  Lecture6.fctGcd
  Lecture6.grow
  Lecture6.invM
  Lecture6.mers
  Lecture6.mrComposite
  Lecture6.multM
  Lecture6.pairs
  Lecture6.phi
  Lecture6.prime
  Lecture6.primeMR
  Lecture6.primeTestF
  Lecture6.primeTestsF
  Lecture6.primes
  Lecture6.rsaDecode
  Lecture6.rsaEncode
  Lecture6.rsaPrivate
  Lecture6.rsaPublic
  Lecture6.secret
  Lecture6.select
  Lecture6.takeT
  Lecture6.totient
  Lecture6.trapdoor
  Lecture6.Tree{Lecture6.T}
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0* deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 random-1.1* time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Bits bbb4ac3d5246b98befe8bd31900b1c2f
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  random-1.1:System.Random 31994b60c33f032d578c64a928f735f7
21eacabdf3392eff64754594b61b212c
  $fEqTree :: GHC.Classes.Eq a => GHC.Classes.Eq (Lecture6.Tree a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Lecture6.Tree a)
                  (Lecture6.$fEqTree_$c== @ a v)
                  (Lecture6.$fEqTree_$c/= @ a v) -}
21eacabdf3392eff64754594b61b212c
  $fEqTree_$c/= ::
    GHC.Classes.Eq a =>
    Lecture6.Tree a -> Lecture6.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: Lecture6.Tree a)
                   (y :: Lecture6.Tree a) ->
                 case Lecture6.$fEqTree_$c== @ a $dEq x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
21eacabdf3392eff64754594b61b212c
  $fEqTree_$c== ::
    GHC.Classes.Eq a =>
    Lecture6.Tree a -> Lecture6.Tree a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)> -}
21eacabdf3392eff64754594b61b212c
  $fOrdTree :: GHC.Classes.Ord a => GHC.Classes.Ord (Lecture6.Tree a)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Ord a).
                  @ (Lecture6.Tree a)
                  (Lecture6.$fOrdTree_$cp1Ord @ a v)
                  (Lecture6.$fOrdTree_$ccompare @ a v)
                  (Lecture6.$fOrdTree_$c< @ a v)
                  (Lecture6.$fOrdTree_$c<= @ a v)
                  (\ (a1 :: Lecture6.Tree a) (b :: Lecture6.Tree a) ->
                   Lecture6.$fOrdTree_$c< @ a v b a1)
                  (Lecture6.$fOrdTree_$c>= @ a v)
                  (Lecture6.$fOrdTree_$cmax @ a v)
                  (Lecture6.$fOrdTree_$cmin @ a v) -}
21eacabdf3392eff64754594b61b212c
  $fOrdTree_$c< ::
    GHC.Classes.Ord a =>
    Lecture6.Tree a -> Lecture6.Tree a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)> -}
21eacabdf3392eff64754594b61b212c
  $fOrdTree_$c<= ::
    GHC.Classes.Ord a =>
    Lecture6.Tree a -> Lecture6.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Lecture6.Tree a)
                   (b :: Lecture6.Tree a) ->
                 case Lecture6.$fOrdTree_$c< @ a $dOrd b a1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
21eacabdf3392eff64754594b61b212c
  $fOrdTree_$c>= ::
    GHC.Classes.Ord a =>
    Lecture6.Tree a -> Lecture6.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Lecture6.Tree a)
                   (b :: Lecture6.Tree a) ->
                 case Lecture6.$fOrdTree_$c< @ a $dOrd a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
21eacabdf3392eff64754594b61b212c
  $fOrdTree_$ccompare ::
    GHC.Classes.Ord a =>
    Lecture6.Tree a -> Lecture6.Tree a -> GHC.Types.Ordering
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)> -}
21eacabdf3392eff64754594b61b212c
  $fOrdTree_$cmax ::
    GHC.Classes.Ord a =>
    Lecture6.Tree a -> Lecture6.Tree a -> Lecture6.Tree a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U,U)><L,U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Lecture6.Tree a)
                   (y :: Lecture6.Tree a) ->
                 case Lecture6.$fOrdTree_$c< @ a $dOrd y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
21eacabdf3392eff64754594b61b212c
  $fOrdTree_$cmin ::
    GHC.Classes.Ord a =>
    Lecture6.Tree a -> Lecture6.Tree a -> Lecture6.Tree a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U,U)><L,U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Lecture6.Tree a)
                   (y :: Lecture6.Tree a) ->
                 case Lecture6.$fOrdTree_$c< @ a $dOrd y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
21eacabdf3392eff64754594b61b212c
  $fOrdTree_$cp1Ord ::
    GHC.Classes.Ord a => GHC.Classes.Eq (Lecture6.Tree a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Lecture6.$fEqTree @ a (GHC.Classes.$p1Ord @ a $dOrd)) -}
21eacabdf3392eff64754594b61b212c
  $fShowTree :: GHC.Show.Show a => GHC.Show.Show (Lecture6.Tree a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(C(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Lecture6.Tree a)
                  (Lecture6.$fShowTree_$cshowsPrec @ a v)
                  (Lecture6.$fShowTree_$cshow @ a v)
                  (Lecture6.$fShowTree_$cshowList @ a v) -}
aa35a90ce4d2de71c78d1457e6e4b0d1
  $fShowTree1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
21eacabdf3392eff64754594b61b212c
  $fShowTree_$cshow ::
    GHC.Show.Show a => Lecture6.Tree a -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Lecture6.Tree a) ->
                 Lecture6.$fShowTree_$cshowsPrec
                   @ a
                   $dShow
                   Lecture6.$fShowTree1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
21eacabdf3392eff64754594b61b212c
  $fShowTree_$cshowList ::
    GHC.Show.Show a => [Lecture6.Tree a] -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Lecture6.Tree a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Lecture6.Tree a)
                   (Lecture6.$fShowTree_$cshowsPrec @ a $dShow Lecture6.$fShowTree1)
                   ls
                   s) -}
21eacabdf3392eff64754594b61b212c
  $fShowTree_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Lecture6.Tree a -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Lecture6.Tree a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Lecture6.T ww3 ww4 ->
                 Lecture6.$w$cshowsPrec @ a w ww1 ww3 ww4 } }) -}
bf833d1a1c16c163fa331619c377f09c
  $seven1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
c939b242819821593b92a5ad0c1d6d26
  $seven2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
8c780fd2b8297859d565bedcaf95efea
  $tc'T :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7844847056916941026##
                   5341153979948836543##
                   Lecture6.$trModule
                   Lecture6.$tc'T2
                   1#
                   Lecture6.$tc'T1) -}
857af3c9f458e5810b3f8c4b70e74fd6
  $tc'T1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
189b11f446909daa16434af23df63be7
  $tc'T2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lecture6.$tc'T3) -}
e8465e5e1ded8c954253ab7f2d1c17e3
  $tc'T3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'T"#) -}
3861258fe27aafd9ac330b7d9a06ca87
  $tcTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6666031234791299728##
                   12600356371937337553##
                   Lecture6.$trModule
                   Lecture6.$tcTree1
                   0#
                   GHC.Types.krep$*Arr*) -}
ba23f3d1d2afc9ada31ca02bd7cad487
  $tcTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lecture6.$tcTree2) -}
87a8fff53c4800272a3cb686b134fc0b
  $tcTree2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tree"#) -}
d853fbe2a50d5274ad3b238137dc08c4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Lecture6.$trModule3
                   Lecture6.$trModule1) -}
6efdbbe2201fe96f77f81d8c3a446223
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lecture6.$trModule2) -}
77ef366bacc172a7401deaeef327f2a9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lecture6"#) -}
ed8167cda9736a03127130d2695237e2
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lecture6.$trModule4) -}
c1ab11f950152d9d9460957e38e06317
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
21eacabdf3392eff64754594b61b212c
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> a -> [Lecture6.Tree a] -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,U><L,U><L,U>, Inline: [0] -}
d43369ee821b942d1421d1a6c4d6b6bf
  $wbin :: [GHC.Types.Int] -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
b82c68ef7776f36e4fb5e10087a5ec1a
  $wfctGcd ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: [0] -}
ee3b3c1c001fa767b6b89a15f736297f
  $wgo ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: [0] -}
4377e6e1d09c8b21ceded8fc287eb6fc
  $wgo1 ::
    GHC.Integer.Type.Integer
    -> (# GHC.Integer.Type.Integer, [GHC.Integer.Type.Integer] #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
adf5dc325f77028a5e58b00b676e714a
  $wgrow ::
    (node -> [node]) -> node -> (# node, [Lecture6.Tree node] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><L,U>,
     Inline: [0] -}
156bbc709499d1fab50bfb1fcadb1ed0
  $wprimeTestsF ::
    GHC.Prim.Int#
    -> GHC.Integer.Type.Integer
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: GHC.Integer.Type.Integer)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   $j :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> [GHC.Integer.Type.Integer]
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                     <join 2> {- Arity: 2, Strictness: <S,U><L,1*U> -}
                   = \ (ipv :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                       (ipv1 :: [GHC.Integer.Type.Integer])[OneShot] ->
                     (# ipv,
                        let {
                          lvl88 :: GHC.Integer.Type.Integer
                          = GHC.Integer.Type.minusInteger w Lecture6.encode1
                        } in
                        letrec {
                          go :: [GHC.Integer.Type.Integer] -> GHC.Types.Bool
                            <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                          = \ (ds :: [GHC.Integer.Type.Integer]) ->
                            case ds of wild {
                              [] -> GHC.Types.True
                              : y ys
                              -> case GHC.Integer.Type.eqInteger#
                                        (Lecture6.exM y lvl88 w)
                                        Lecture6.encode1 of wild1 {
                                   DEFAULT -> GHC.Types.False 1# -> go ys } }
                        } in
                        go ipv1 #)
                 } in
                 case GHC.Prim.># 1# ww of lwild {
                   DEFAULT
                   -> let {
                        lvl88 :: GHC.Integer.Type.Integer
                        = GHC.Integer.Type.minusInteger w Lecture6.encode1
                      } in
                      let {
                        lvl89 :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                        = (Lecture6.$seven2, lvl88)
                      } in
                      letrec {
                        go :: GHC.Prim.Int#
                              -> GHC.Prim.State# GHC.Prim.RealWorld
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                    [GHC.Integer.Type.Integer] #)
                          {- Arity: 2, Strictness: <L,U><S,U> -}
                        = \ (x :: GHC.Prim.Int#)
                            (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                          case System.Random.$fRandomInteger3
                                 lvl89
                                 s of ds { (#,#) ipv ipv1 ->
                          case GHC.Prim.==# x ww of lwild1 {
                            DEFAULT
                            -> case go (GHC.Prim.+# x 1#) ipv of ds1 { (#,#) ipv2 ipv3 ->
                               (# ipv2, GHC.Types.: @ GHC.Integer.Type.Integer ipv1 ipv3 #) }
                            1#
                            -> (# ipv,
                                  GHC.Types.:
                                    @ GHC.Integer.Type.Integer
                                    ipv1
                                    (GHC.Types.[] @ GHC.Integer.Type.Integer) #) } }
                      } in
                      case go 1# w1 of ds1 { (#,#) ipv ipv1 -> $j ipv ipv1 }
                   1# -> $j w1 (GHC.Types.[] @ GHC.Integer.Type.Integer) }) -}
495fd01b055f9d0afa25e68b0b2968c6
  $wrsaPrivate ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Integer.Type.Integer)
                   (w1 :: GHC.Integer.Type.Integer) ->
                 (# Lecture6.invM
                      (Lecture6.select w w1)
                      (GHC.Integer.Type.timesInteger
                         (GHC.Integer.Type.minusInteger w Lecture6.encode1)
                         (GHC.Integer.Type.minusInteger w1 Lecture6.encode1)),
                    GHC.Integer.Type.timesInteger w w1 #)) -}
247ef607da5d52327031d39ba1881557
  $wtakeT ::
    GHC.Prim.Int#
    -> a -> [Lecture6.Tree a] -> (# a, [Lecture6.Tree a] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,1*U>,
     Inline: [0] -}
fe439b040b0f3aca36d78f8e64712516
  $wtotient :: GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Integer.Type.Integer) ->
                 letrec {
                   go :: GHC.Integer.Type.Integer -> GHC.Types.Int -> GHC.Types.Int
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x :: GHC.Integer.Type.Integer) ->
                     case GHC.Integer.Type.gtInteger# x w of wild {
                       DEFAULT
                       -> case GHC.Integer.Type.eqInteger#
                                 (GHC.Integer.Type.gcdInteger x w)
                                 Lecture6.encode1 of wild1 {
                            DEFAULT -> go (GHC.Integer.Type.plusInteger x Lecture6.encode1)
                            1#
                            -> let {
                                 r :: GHC.Types.Int -> GHC.Types.Int
                                 = go (GHC.Integer.Type.plusInteger x Lecture6.encode1)
                               } in
                               \ (a :: GHC.Types.Int) ->
                               case a of a1 { GHC.Types.I# ipv ->
                               r (GHC.Types.I# (GHC.Prim.+# ipv 1#)) } }
                       1# -> GHC.Base.id @ GHC.Types.Int }
                 } in
                 case go
                        Lecture6.encode1
                        Lecture6.$fShowTree1 of wild { GHC.Types.I# i ->
                 case GHC.Integer.Type.smallInteger
                        i of ww { GHC.Integer.Type.S# ww1 ->
                 ww1 } }) -}
21eacabdf3392eff64754594b61b212c
  data Tree a = T a [Lecture6.Tree a]
e48a6b0f9b0fcdbf2291365d7667dbe9
  addM ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Integer.Type.Integer)
                   (y :: GHC.Integer.Type.Integer) ->
                 GHC.Real.$fIntegralInteger_$crem
                   (GHC.Integer.Type.plusInteger x y)) -}
600ddaf50b3887655e050a95c6d5c2e2
  bin2int :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Types.Int]) ->
                 Lecture6.bin2int_bin
                   (GHC.List.reverse1
                      @ GHC.Types.Int
                      x
                      (GHC.Types.[] @ GHC.Types.Int))) -}
32eb60c4b7414133e5be6803b0adcfe2
  bin2int_bin :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Types.Int]) ->
                 case Lecture6.$wbin w of ww { DEFAULT -> GHC.Types.I# ww }) -}
8737c2abcfe2fd7ccb14c09c9c0c9c1b
  bound :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (131) -}
4c87dd4d62b661ea94c61f0cee12e3aa
  cipher :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1,
     Unfolding: (Lecture6.encode Lecture6.secret Lecture6.bound) -}
39374a70479ab1317ccb077743e484c4
  coprime ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (n :: GHC.Integer.Type.Integer)
                   (m :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger#
                        (Lecture6.fGcd n m)
                        Lecture6.encode1 of wild { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild }) -}
26f7f0715cbec1856dba2fccaac1376f
  coprime' ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ (n :: GHC.Integer.Type.Integer)
                   (m :: GHC.Integer.Type.Integer) ->
                 case Lecture6.$wfctGcd n m of ww { (#,#) ww1 ww2 ->
                 case GHC.Integer.Type.eqInteger#
                        (GHC.Integer.Type.plusInteger
                           (GHC.Integer.Type.timesInteger ww1 n)
                           (GHC.Integer.Type.timesInteger ww2 m))
                        Lecture6.encode1 of wild { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild } }) -}
06af5b39ce4fd0caf9c26cc8ee437b34
  coprimeT ::
    Lecture6.Tree (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- Unfolding: (case Lecture6.$wgrow
                        @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                        Lecture6.f
                        Lecture6.coprimeT1 of ww { (#,#) ww1 ww2 ->
                 Lecture6.T
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   ww1
                   ww2 }) -}
193fa583655b42be364b639e6227dda2
  coprimeT1 :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Lecture6.encode1, Lecture6.encode1)) -}
b127d75a51a4885d250110f863b4fb0c
  coprimes :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- Unfolding: (GHC.List.filter
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   Lecture6.coprimes1
                   Lecture6.pairs) -}
9dc1826d1d6c49d2c7b8d594108dd5bc
  coprimes1 ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(SS),1*U(1*U,U)>,
     Unfolding: (\ (p :: (GHC.Integer.Type.Integer,
                          GHC.Integer.Type.Integer)) ->
                 case p of wild { (,) x ds ->
                 case GHC.Integer.Type.eqInteger#
                        (Lecture6.fGcd x ds)
                        Lecture6.encode1 of wild1 { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 } }) -}
e5aec30f2bf7995813612c1ade18db85
  decipher :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1,
     Unfolding: (Lecture6.decode Lecture6.secret Lecture6.bound) -}
a5701aa07d26e95d0c9d2073cefedcd9
  decode ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 3, Strictness: <S,U><L,U><L,U>,
     Unfolding: (\ (p :: GHC.Integer.Type.Integer)
                   (k :: GHC.Integer.Type.Integer)
                   (m :: GHC.Integer.Type.Integer) ->
                 Lecture6.exM
                   m
                   (let {
                      p' :: GHC.Integer.Type.Integer
                      = GHC.Integer.Type.minusInteger p Lecture6.encode1
                    } in
                    let {
                      exit :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
                        <join 1> {- Arity: 1, Strictness: <S,U> -}
                      = \ (x :: GHC.Integer.Type.Integer)[OneShot] -> Lecture6.invM x p'
                    } in
                    letrec {
                      go :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
                        <join 1> {- Arity: 1, Strictness: <S,U> -}
                      = \ (x :: GHC.Integer.Type.Integer) ->
                        case GHC.Integer.Type.eqInteger#
                               (GHC.Integer.Type.gcdInteger x p')
                               Lecture6.encode1 of wild {
                          DEFAULT -> go (GHC.Integer.Type.plusInteger x Lecture6.encode1)
                          1# -> exit x }
                    } in
                    go k)
                   p) -}
bc3d4a494b5ec7d46c247cf4c8508bc4
  decodeDH ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 4, Strictness: <S,U><L,U><L,U><S,1*U>,
     Unfolding: (\ (p :: GHC.Integer.Type.Integer)
                   (ga :: GHC.Integer.Type.Integer)
                   (b :: GHC.Integer.Type.Integer)
                   (c :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger# p Lecture6.$seven1 of wild {
                   DEFAULT
                   -> GHC.Integer.Type.remInteger
                        (GHC.Integer.Type.timesInteger
                           c
                           (Lecture6.exM
                              ga
                              (GHC.Integer.Type.minusInteger
                                 (GHC.Integer.Type.minusInteger p Lecture6.encode1)
                                 b)
                              p))
                        p
                   1# -> GHC.Real.divZeroError @ GHC.Integer.Type.Integer }) -}
da24c80f4cf8db985e02b6ef7d69c835
  decomp ::
    GHC.Integer.Type.Integer
    -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- Arity: 1, Strictness: <S,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (n0 :: GHC.Integer.Type.Integer) ->
                 Lecture6.decomp_go (Lecture6.$seven1, n0)) -}
4ce123a41598d8cc60cf68e91f42b3ae
  decomp_go ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
    -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- Arity: 1, Strictness: <S(LS),1*U(U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Lecture6.$wgo ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
9c91d7b0a6541407bcc32e7a68cebe50
  encode ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 3, Strictness: <S,U><L,U><L,U>,
     Unfolding: (\ (p :: GHC.Integer.Type.Integer)
                   (k :: GHC.Integer.Type.Integer)
                   (m :: GHC.Integer.Type.Integer) ->
                 Lecture6.exM
                   m
                   (let {
                      p' :: GHC.Integer.Type.Integer
                      = GHC.Integer.Type.minusInteger p Lecture6.encode1
                    } in
                    letrec {
                      go :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
                        <join 1> {- Arity: 1, Strictness: <S,U> -}
                      = \ (x :: GHC.Integer.Type.Integer) ->
                        case GHC.Integer.Type.eqInteger#
                               (GHC.Integer.Type.gcdInteger x p')
                               Lecture6.encode1 of wild {
                          DEFAULT -> go (GHC.Integer.Type.plusInteger x Lecture6.encode1)
                          1# -> x }
                    } in
                    go k)
                   p) -}
3fcefcb0e90cd91d81f5679e9fce60ea
  encode1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
d8cea4c752ae987330926c9b2713d547
  encodeDH ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 3, Strictness: <S,U><S,U><S,1*U>,
     Unfolding: (\ (p :: GHC.Integer.Type.Integer)
                   (k :: GHC.Integer.Type.Integer)
                   (m :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger# p Lecture6.$seven1 of wild {
                   DEFAULT
                   -> GHC.Integer.Type.modInteger
                        (GHC.Integer.Type.timesInteger m k)
                        p
                   1# -> GHC.Real.divZeroError @ GHC.Integer.Type.Integer }) -}
35e0cb4f17dd9fdf6d226ab7489e7d76
  exM ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (base :: GHC.Integer.Type.Integer)
                   (expon :: GHC.Integer.Type.Integer)
                   (ds :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger# ds Lecture6.encode1 of wild {
                   DEFAULT
                   -> Lecture6.exM'
                        (GHC.Real.$fIntegralInteger_$cmod base ds)
                        expon
                        ds
                        Lecture6.encode1
                   1# -> Lecture6.$seven1 }) -}
3b90ad4a28059951bdd061ebee9397b2
  exM' ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 4, Strictness: <L,U><S,U><L,U><S,1*U> -}
cdd48cb0a2068f9d1142514e188c031e
  expM ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Integer.Type.Integer)
                   (y :: GHC.Integer.Type.Integer) ->
                 GHC.Real.$fIntegralInteger_$crem (GHC.Real.^_$s^ x y)) -}
279107de1e3a1131d002fe32bee9e2bd
  f ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
    -> [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- Arity: 1, Strictness: <S,1*U(U,U)>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)) ->
                 case w of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   (GHC.Integer.Type.plusInteger ww1 ww2, ww2)
                   (GHC.Types.:
                      @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                      (ww1, GHC.Integer.Type.plusInteger ww1 ww2)
                      (GHC.Types.[]
                         @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer))) }) -}
946e9ae899e9da5526ff3103b6944420
  fGcd ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
ca9126cdd16089d0de2bb4e8909f5ec5
  factors :: GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (n0 :: GHC.Integer.Type.Integer) ->
                 Lecture6.factors_factors'
                   n0
                   (GHC.List.takeWhile
                      @ GHC.Integer.Type.Integer
                      (\ (m :: GHC.Integer.Type.Integer) ->
                       case GHC.Integer.Type.leInteger#
                              (GHC.Integer.Type.timesInteger m m)
                              n0 of wild { DEFAULT ->
                       GHC.Prim.tagToEnum# @ GHC.Types.Bool wild })
                      Lecture6.primes)) -}
f3a14870c029db8456dd732edff839ee
  factorsNaive ::
    GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n0 :: GHC.Integer.Type.Integer) ->
                 Lecture6.factorsNaive_factors' n0 Lecture6.$seven2) -}
de998d37d81dd29e80a69ec297f02333
  factorsNaive_factors' ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]
  {- Arity: 2, Strictness: <S,U><L,U> -}
966aedf21079910946cca15416580968
  factors_factors' ::
    GHC.Integer.Type.Integer
    -> [GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]
  {- Arity: 2, Strictness: <S,U><L,1*U> -}
3f46563ac5479d12a16e9b0d6ce03655
  fctGcd ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- Arity: 2, Strictness: <L,U><S,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Integer.Type.Integer)
                   (w1 :: GHC.Integer.Type.Integer) ->
                 case Lecture6.$wfctGcd w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
b6102bd1e7b8668267cedf23fc75f7de
  grow :: (node -> [node]) -> node -> Lecture6.Tree node
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ node (w :: node -> [node]) (w1 :: node) ->
                 case Lecture6.$wgrow @ node w w1 of ww { (#,#) ww1 ww2 ->
                 Lecture6.T @ node ww1 ww2 }) -}
1efe9cbf63a92e823978e84b86b10fd4
  invM ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ (x :: GHC.Integer.Type.Integer)
                   (n :: GHC.Integer.Type.Integer) ->
                 case Lecture6.$wfctGcd x n of ww { (#,#) ww1 ww2 ->
                 case GHC.Integer.Type.eqInteger#
                        (GHC.Integer.Type.plusInteger
                           (GHC.Integer.Type.timesInteger x ww1)
                           (GHC.Integer.Type.timesInteger ww2 n))
                        Lecture6.encode1 of wild {
                   DEFAULT -> Lecture6.invM1
                   1#
                   -> case GHC.Integer.Type.$wsignumInteger ww1 of ww3 { DEFAULT ->
                      case GHC.Integer.Type.eqInteger#
                             (GHC.Integer.Type.S# ww3)
                             Lecture6.encode1 of wild1 {
                        DEFAULT -> GHC.Integer.Type.plusInteger ww1 n 1# -> ww1 } } } }) -}
9fbe2362fb03ff177e2d3e98bb399282
  invM1 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
0b57ebdd644b604e7a24dc1d77cac13f
  mers :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,U> -}
f2fa2f3d496f73cee6c0988211154a59
  mrComposite ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (x :: GHC.Integer.Type.Integer)
                   (n :: GHC.Integer.Type.Integer) ->
                 let {
                   ds :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   = case Lecture6.$wgo
                            Lecture6.$seven1
                            (GHC.Integer.Type.minusInteger
                               n
                               Lecture6.encode1) of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 let {
                   s :: GHC.Integer.Type.Integer = case ds of wild { (,) r s1 -> s1 }
                 } in
                 case GHC.Integer.Type.neqInteger#
                        (Lecture6.exM x s n)
                        Lecture6.encode1 of wild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case ds of wild1 { (,) r s1 ->
                      let {
                        karg :: GHC.Integer.Type.Integer
                        = GHC.Integer.Type.minusInteger n Lecture6.encode1
                      } in
                      letrec {
                        go :: GHC.Integer.Type.Integer
                              -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                          <join 2> {- Arity: 2, Strictness: <S,U><L,1*U> -}
                        = \ (x1 :: GHC.Integer.Type.Integer)
                            (eta :: GHC.Integer.Type.Integer) ->
                          case GHC.Integer.Type.gtInteger# x1 r of wild2 {
                            DEFAULT
                            -> let {
                                 x2 :: GHC.Integer.Type.Integer
                                 = Lecture6.exM
                                     x
                                     (GHC.Integer.Type.timesInteger
                                        (GHC.Real.^_$s^ Lecture6.$seven2 x1)
                                        s)
                                     n
                               } in
                               case GHC.Integer.Type.neqInteger# x2 Lecture6.encode1 of wild3 {
                                 DEFAULT
                                 -> case GHC.Integer.Type.neqInteger# eta karg of wild4 { DEFAULT ->
                                    GHC.Prim.tagToEnum# @ GHC.Types.Bool wild4 }
                                 1# -> go (GHC.Integer.Type.plusInteger x1 Lecture6.encode1) x2 }
                            1#
                            -> case GHC.Integer.Type.neqInteger# eta karg of wild3 { DEFAULT ->
                               GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 } }
                      } in
                      go
                        Lecture6.$seven1
                        (GHC.List.lastError @ GHC.Integer.Type.Integer) } }) -}
80d38f7571b7d1edb7ba5a489fc0a185
  multM ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Integer.Type.Integer)
                   (y :: GHC.Integer.Type.Integer) ->
                 GHC.Real.$fIntegralInteger_$crem
                   (GHC.Integer.Type.timesInteger x y)) -}
bf91b0bd7e9aac849906af841bd4bbfd
  pairs :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- Unfolding: (Lecture6.pairs_go Lecture6.encode1) -}
71151029a0fa86e6ccdae219826f2a48
  pairs_go ::
    GHC.Integer.Type.Integer
    -> [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]
  {- Arity: 1, Strictness: <S,U> -}
a382926da332ce70e1368f0f282f0f40
  phi ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Integer.Type.Integer)
                   (q :: GHC.Integer.Type.Integer) ->
                 GHC.Integer.Type.timesInteger
                   (GHC.Integer.Type.minusInteger p Lecture6.encode1)
                   (GHC.Integer.Type.minusInteger q Lecture6.encode1)) -}
97846132a8330dd6b9a76564e2b3c905
  prime :: GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Integer.Type.Integer) ->
                 GHC.Classes.$fEq[]_$c==
                   @ GHC.Integer.Type.Integer
                   GHC.Integer.Type.$fEqInteger
                   (Lecture6.factors n)
                   (GHC.Types.:
                      @ GHC.Integer.Type.Integer
                      n
                      (GHC.Types.[] @ GHC.Integer.Type.Integer))) -}
498b3ef2e4e504a565e6aff1c7076a66
  primeMR ::
    GHC.Types.Int
    -> GHC.Integer.Type.Integer -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 3, Strictness: <L,1*U(1*U)><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture6.primeMR1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Integer.Type.Integer>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
261c83d982c3ececca325a3ca65ccecc
  primeMR1 ::
    GHC.Types.Int
    -> GHC.Integer.Type.Integer
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 3, Strictness: <L,1*U(1*U)><S,U><S,U> -}
9a00e99ffe335e9b5e4f441fafc6e22a
  primeTestF ::
    GHC.Integer.Type.Integer -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture6.primeTestF1
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
51b7d02430ec7cb437147de2eb8f7b85
  primeTestF1 ::
    GHC.Integer.Type.Integer
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (n :: GHC.Integer.Type.Integer)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.$fRandomInteger3
                        (Lecture6.$seven2,
                         GHC.Integer.Type.minusInteger n Lecture6.encode1)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case GHC.Integer.Type.eqInteger#
                           (Lecture6.exM
                              ipv1
                              (GHC.Integer.Type.minusInteger n Lecture6.encode1)
                              n)
                           Lecture6.encode1 of wild { DEFAULT ->
                    GHC.Prim.tagToEnum# @ GHC.Types.Bool wild } #) }) -}
c5cf4f3c0b89101516b7186f8edaa6de
  primeTestsF ::
    GHC.Types.Int
    -> GHC.Integer.Type.Integer -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture6.primeTestsF1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Integer.Type.Integer>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
a72bd5bad8674cb8fadfa7995de0f160
  primeTestsF1 ::
    GHC.Types.Int
    -> GHC.Integer.Type.Integer
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,U><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Integer.Type.Integer)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Lecture6.$wprimeTestsF ww1 w1 w2 }) -}
97550eb2211241bc30d45c06298ce380
  primes :: [GHC.Integer.Type.Integer]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Lecture6.$seven2
                   Lecture6.primes1) -}
2434c09cac92f9bde6ef495ba578a525
  primes1 :: [GHC.Integer.Type.Integer]
  {- Unfolding: (case Lecture6.$wgo1
                        Lecture6.primes2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Integer.Type.Integer ww1 ww2 }) -}
5140bacf742387f059ac089ce8e3da22
  primes2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
eb49aff85b76cdb187def741cef1ba29
  rsaDecode ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S(LS),1*U(U,U)><L,U>,
     Unfolding: InlineRule (0, True, True) Lecture6.rsaEncode -}
df3d8c0c9988bb835d86180af958b772
  rsaEncode ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S(LS),1*U(U,U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer))
                   (m :: GHC.Integer.Type.Integer) ->
                 case ds of wild { (,) e n -> Lecture6.exM m e n }) -}
24070c6a5e0ce2e5bc87aad8929bf10b
  rsaPrivate ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Integer.Type.Integer)
                   (w1 :: GHC.Integer.Type.Integer) ->
                 case Lecture6.$wrsaPrivate w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
207ac7c4acd3da46bf61f656a02f14f7
  rsaPublic ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- Arity: 2, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Integer.Type.Integer)
                   (q :: GHC.Integer.Type.Integer) ->
                 (Lecture6.select p q, GHC.Integer.Type.timesInteger p q)) -}
1606ec083351540d584feb801c3b137a
  secret :: GHC.Integer.Type.Integer
  {- Unfolding: (Lecture6.mers Lecture6.secret1) -}
de8f54c68cde8cb056a9ff846f64a32d
  secret1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (18) -}
1e3a5c82c7a0063ca5e34d102b574954
  select ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (p :: GHC.Integer.Type.Integer)
                   (q :: GHC.Integer.Type.Integer) ->
                 let {
                   t :: GHC.Integer.Type.Integer
                   = GHC.Integer.Type.timesInteger
                       (GHC.Integer.Type.minusInteger p Lecture6.encode1)
                       (GHC.Integer.Type.minusInteger q Lecture6.encode1)
                 } in
                 letrec {
                   go :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (x :: GHC.Integer.Type.Integer) ->
                     case GHC.Integer.Type.eqInteger#
                            (GHC.Integer.Type.gcdInteger x t)
                            Lecture6.encode1 of wild {
                       DEFAULT -> go (GHC.Integer.Type.plusInteger x Lecture6.encode1)
                       1# -> x }
                 } in
                 go Lecture6.primes2) -}
e969547f72008a982e65cc44aa9c686a
  takeT :: GHC.Types.Int -> Lecture6.Tree a -> Lecture6.Tree a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S,1*U(U,1*U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: Lecture6.Tree a) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lecture6.T ww3 ww4 ->
                 case Lecture6.$wtakeT @ a ww1 ww3 ww4 of ww5 { (#,#) ww6 ww7 ->
                 Lecture6.T @ a ww6 ww7 } } }) -}
8e341a5f3ecad5d8d867fc752188862a
  totient :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Integer.Type.Integer) ->
                 case Lecture6.$wtotient w of ww { DEFAULT ->
                 GHC.Integer.Type.S# ww }) -}
fefff4df3c4a9ffbdd1452acc9f4ae8c
  trapdoor ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S(LS),1*U(U,U)><L,U>,
     Unfolding: InlineRule (0, True, True) Lecture6.rsaEncode -}
instance [safe] GHC.Classes.Eq [Lecture6.Tree] = Lecture6.$fEqTree
instance [safe] GHC.Classes.Ord [Lecture6.Tree]
  = Lecture6.$fOrdTree
instance [safe] GHC.Show.Show [Lecture6.Tree] = Lecture6.$fShowTree
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

