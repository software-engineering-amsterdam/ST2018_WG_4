
==================== FINAL INTERFACE ====================
2018-10-08 18:45:33.434119342 UTC

interface main:Main 8043
  interface hash: 3637f12f5e598da6f11dc86f8adf7529
  ABI hash: 5b0a88133c2a577c3cc6d76d5333c743
  export-list hash: 11f811ec11ddb407ae02300f3d162041
  orphan hash: 22254aaa5bdb7a2832d61bf114694d95
  flag hash: e02561aff3fbba899313e779d62898af
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: Lecture5
package dependencies: QuickCheck-2.11.3 array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 pretty-1.1.3.6
                      primitive-0.6.3.0 random-1.1 template-haskell-2.13.0.0
                      tf-random-0.5 time-1.8.0.2 transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck e00d138ee3234e83a31cc3113c8c8ffb
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Property 2a2442debcbf309292a12478b176466b
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Test 5c80e8a0569651177c75db83b77c7ff4
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  Lecture5 272ee28846917f8e2126df74ab1cfb3e
  exports: 787f876d118ec06b243a629a43400eea
  freePosTest b1c041eb64410e50e5c903ad94e8a22c
  genProblem c62b5a801610c25580d00fc1d071fab1
  genRandomSudoku 70295ad5342f73930bc3036376b7aeb6
  genSudokuPositions 2dc2f33ea1904cba57db08b4957a6c9d
  generateSudokuProblem 47e022ff491b6fc0159ca3d806b306aa
  nrcExample cb292d69ab70c72d317c9d9f15057ec8
  showNode 54c9093a7f186b07532c581589c7941f
  solveAndShow f9a96b418e7a62dc991c2d79392ebfb7
  testIsMinimal f9b75e2f27e58e63b5411d5204ee404b
4f5da328cb489e211905ea56e6beab98
  $s$fShow(,) :: GHC.Show.Show (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt
                     GHC.Show.$fShowInt)
                  (\ (x :: (GHC.Types.Int, GHC.Types.Int)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt
                     GHC.Show.$fShowInt
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(GHC.Types.Int, GHC.Types.Int)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Types.Int, GHC.Types.Int)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        GHC.Show.$fShowInt
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
63a46b94f2d757c7f92daa971031e2e2
  $w$j ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main14
                        GHC.Types.True
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Lecture5.$wgenerateSudokuProblem
                        Main.main13
                        10#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Base.Nothing
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main5
                             GHC.Types.True
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      Main.$w$j1 ipv4 }
                   GHC.Base.Just ipv4
                   -> case ipv4 `cast` (GHC.Types.N:IO[0] <Lecture5.Node>_R)
                             ipv2 of ds3 { (#,#) ipv5 ipv6 ->
                      case Lecture5.randomS3
                             (Lecture5.sud2grid (case ipv6 of wild1 { (,) x1 ds4 -> x1 }))
                             ipv5 of ds4 { (#,#) ipv7 ipv8 ->
                      Main.$w$j1 ipv7 } } } } }) -}
23728af3ede02d32694ddcacaba12373
  $w$j1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main11
                        GHC.Types.True
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Lecture5.$wgenerateSudokuProblem
                        Main.main10
                        10#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Base.Nothing
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main5
                             GHC.Types.True
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      Main.$w$j2 ipv4 }
                   GHC.Base.Just ipv4
                   -> case ipv4 `cast` (GHC.Types.N:IO[0] <Lecture5.Node>_R)
                             ipv2 of ds3 { (#,#) ipv5 ipv6 ->
                      case Lecture5.randomS3
                             (Lecture5.sud2grid (case ipv6 of wild1 { (,) x1 ds4 -> x1 }))
                             ipv5 of ds4 { (#,#) ipv7 ipv8 ->
                      Main.$w$j2 ipv7 } } } } }) -}
b801a500bd8c88d6b4749b14c57cb616
  $w$j2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main8
                        GHC.Types.True
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Lecture5.$wgenerateSudokuProblem
                        Main.main7
                        10#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Base.Nothing
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main5
                             GHC.Types.True
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      Main.$w$j3 ipv4 }
                   GHC.Base.Just ipv4
                   -> case ipv4 `cast` (GHC.Types.N:IO[0] <Lecture5.Node>_R)
                             ipv2 of ds3 { (#,#) ipv5 ipv6 ->
                      case Lecture5.randomS3
                             (Lecture5.sud2grid (case ipv6 of wild1 { (,) x1 ds4 -> x1 }))
                             ipv5 of ds4 { (#,#) ipv7 ipv8 ->
                      Main.$w$j3 ipv7 } } } } }) -}
bb7c0db4a1514890e64200548c459dbf
  $w$j3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main3
                        GHC.Types.True
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Lecture5.genRandomSudoku10
                        @ Lecture5.Node
                        Lecture5.genRandomSudoku6
                          `cast`
                        (<(Lecture5.Sudoku, [Lecture5.Constraint])>_R
                         ->_R Sym (GHC.Types.N:IO[0] <[Lecture5.Node]>_R))
                        Lecture5.solved
                        Lecture5.genRandomSudoku4
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <[Lecture5.Node]>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   []
                   -> case (GHC.Magic.noinline
                              @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                              GHC.IO.failIO1
                                `cast`
                              (forall (a :: <*>_N).
                               <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                              @ Lecture5.Node
                              Lecture5.genRandomSudoku2)
                             `cast`
                           (GHC.Types.N:IO[0] <Lecture5.Node>_R)
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      Main.main2 ipv4 ipv5 }
                   : r ds
                   -> case ds of wild1 {
                        [] -> Main.main2 ipv2 r
                        : ipv4 ipv5
                        -> case (GHC.Magic.noinline
                                   @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                                   GHC.IO.failIO1
                                     `cast`
                                   (forall (a :: <*>_N).
                                    <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                   @ Lecture5.Node
                                   Lecture5.genRandomSudoku2)
                                  `cast`
                                (GHC.Types.N:IO[0] <Lecture5.Node>_R)
                                  ipv2 of ds3 { (#,#) ipv6 ipv7 ->
                           Main.main2 ipv6 ipv7 } } } } }) -}
d7d466eb4d3d0f054fbdbe477945679c
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
a4ffea46e4f7118e73163c17fecc64de
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main26
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Lecture5.solveAndShow1
                        Lecture5.nrcExample
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main24
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Test.QuickCheck.Test.$w$squickCheckWithResult
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main23
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main21
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case Lecture5.$wtestIsMinimal
                        0#
                        10#
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main19
                        GHC.Types.True
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main17
                        GHC.Types.True
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 case Lecture5.$wgenerateSudokuProblem
                        Main.main16
                        10#
                        ipv14 of ds9 { (#,#) ipv16 ipv17 ->
                 case ipv17 of wild {
                   GHC.Base.Nothing
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main5
                             GHC.Types.True
                             ipv16 of ds10 { (#,#) ipv18 ipv19 ->
                      Main.$w$j ipv18 }
                   GHC.Base.Just ipv18
                   -> case ipv18 `cast` (GHC.Types.N:IO[0] <Lecture5.Node>_R)
                             ipv16 of ds10 { (#,#) ipv19 ipv20 ->
                      case Lecture5.randomS3
                             (Lecture5.sud2grid (case ipv20 of wild1 { (,) x1 ds11 -> x1 }))
                             ipv19 of ds11 { (#,#) ipv21 ipv22 ->
                      Main.$w$j ipv21 } } } } } } } } } } } }) -}
06e4d54d48cdceedd943a81fa0ac2aa3
  main10 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
6700eb610d374e8f004f6c884bbf8b6d
  main11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main12) -}
ede854380da038d31500fb39d17af157
  main12 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \Trying max 10 times to find a sudoku problem with at least 5 empty blocks."#) -}
7f97adb76a242ded0741ad6d2407b3d0
  main13 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
b674edad722443f015168c0e9ddc160b
  main14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main15) -}
0a127bf4b00eaca01747eaa5a4997691
  main15 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \Trying max 10 times to find a sudoku problem with at least 4 empty blocks."#) -}
37d0cdc0a42620ff481d1d390ab9a63b
  main16 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
01297eea656f60e8c3da59973d8bf752
  main17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main18) -}
a8c3964855ec6e8dcba43d7f0e60efb6
  main18 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Trying max 10 times to find a sudoku problem with at least 3 empty blocks."#) -}
1f37261f09f000ffad39ae2a15be7571
  main19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main20) -}
7bc74a70ff003c76412b321d1bb34f31
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Lecture5.Node -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><L,U(U,U)>,
     Unfolding: (\ (ipv :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (ipv1 :: Lecture5.Node)[OneShot] ->
                 case Lecture5.genProblem_$srandomize
                        (Lecture5.filledPositions (case ipv1 of wild { (,) x ds1 -> x }))
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 Lecture5.randomS3
                   (Lecture5.sud2grid
                      (case Lecture5.minimalize ipv1 ipv3 of wild { (,) x1 ds2 -> x1 }))
                   ipv2 }) -}
4ebfc4c2bde70a0b4a6178b5d1a19cdd
  main20 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \\ESC[36m== Assignment 4 (Empty block sudoku problems) ==\ESC[0m"#) -}
6d79c35bca83588bf1f89917bf85a8bd
  main21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main22) -}
7715dd2683fc6f19d896d1fd756e212b
  main22 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \\ESC[36m== Assignment 3 (Test for minimal problems) ==\ESC[0m"#) -}
f6bb66c62b8ecce2b967699afffbcbd8
  main23 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Lecture5.Position
                   @ GHC.Types.Bool
                   Main.$s$fShow(,)
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Lecture5.genSudokuPositions1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Lecture5.Position>_R))
                   (Test.QuickCheck.Property.forAll2 @ Lecture5.Position)
                   Lecture5.freePosTest
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
fecc0f8d2ca25c4e7a05cf24a7e42407
  main24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main25) -}
e412c3026690f09747d2438693edf9f6
  main25 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \\ESC[36m== Assignment 2 (Refactored NRC Sudoku) ==\ESC[0m"#) -}
aef4e65ae9523cad91f2f8c8dac0917a
  main26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main27) -}
edc72ff9b0b5130ca8ed43cab370e085
  main27 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\ESC[36m== Assignment 1 (NRC Sudoku's) ==\ESC[0m"#) -}
d3c95d49638f1ca212f6b61802f7743e
  main28 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
68c5a337cb65ce8d31fd3ca806e2b647
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main4) -}
d41da42cafc5d5f69a619f3573670da9
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \\ESC[36m== Assignment 5 (NRC Problem generator) ==\ESC[0m"#) -}
0edc10ef314d2f106169c2122456004c
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main6) -}
09ca207487d3e500425af601424539a7
  main6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Not found"#) -}
2ef38c98220583e65013d1d4878b8bc6
  main7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
19860c8b687f28cb7c309ec5b479e40f
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main9) -}
09f2da98230ed22a662ead54365287e4
  main9 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \Trying max 10 times to find a sudoku problem with at least 6 empty blocks."#) -}
"SPEC/Main $fShow(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Show.Show
                                                           GHC.Types.Int)
                                                  (v :: GHC.Show.Show GHC.Types.Int)
  GHC.Show.$fShow(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = Main.$s$fShow(,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

