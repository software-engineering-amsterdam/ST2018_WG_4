
==================== FINAL INTERFACE ====================
2018-10-08 19:33:33.269271646 UTC

interface main:Main 8043
  interface hash: 794d3a794c563ea7b61d01874c4c657c
  ABI hash: d85cafd810256868a4a32ce5e31f7924
  export-list hash: 11f811ec11ddb407ae02300f3d162041
  orphan hash: 22254aaa5bdb7a2832d61bf114694d95
  flag hash: e02561aff3fbba899313e779d62898af
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: Lecture5
package dependencies: QuickCheck-2.11.3 array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 pretty-1.1.3.6
                      primitive-0.6.3.0 random-1.1 template-haskell-2.13.0.0
                      tf-random-0.5 time-1.8.0.2 transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck e00d138ee3234e83a31cc3113c8c8ffb
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Property 2a2442debcbf309292a12478b176466b
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Test 5c80e8a0569651177c75db83b77c7ff4
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  Lecture5 89b2161074f67109d973af505c52eb48
  exports: df0572af465b6393ac374929c126b33c
  freePosTest b1c041eb64410e50e5c903ad94e8a22c
  genNumHints 6ef4589cf507a1345c2e94754df6c7b5
  genNumHintsNRC 32f9dc1f96110f7e995c589b3f285817
  genProblem 53e036b784ff98744b074306b54d532d
  genRandomSudoku 14d70af0682b14318e766152f6be61f2
  genSudokuPositions 2dc2f33ea1904cba57db08b4957a6c9d
  generateSudokuProblem 47e022ff491b6fc0159ca3d806b306aa
  nrcExample cb292d69ab70c72d317c9d9f15057ec8
  showNode 54c9093a7f186b07532c581589c7941f
  solveAndShow 9ebf77650bc8256969b6a8d9fbb34337
4f5da328cb489e211905ea56e6beab98
  $s$fShow(,) :: GHC.Show.Show (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt
                     GHC.Show.$fShowInt)
                  (\ (x :: (GHC.Types.Int, GHC.Types.Int)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt
                     GHC.Show.$fShowInt
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(GHC.Types.Int, GHC.Types.Int)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Types.Int, GHC.Types.Int)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        GHC.Show.$fShowInt
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
bf1c5fcf89108ecb4a9b38e726c63e56
  $w$j ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main21
                        GHC.Types.True
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Lecture5.$wgenerateSudokuProblem
                        Main.main20
                        10#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Base.Nothing
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main12
                             GHC.Types.True
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      Main.$w$j1 ipv4 }
                   GHC.Base.Just ipv4
                   -> case ipv4 `cast` (GHC.Types.N:IO[0] <Lecture5.Node>_R)
                             ipv2 of ds3 { (#,#) ipv5 ipv6 ->
                      case Lecture5.randomS3
                             (Lecture5.sud2grid (case ipv6 of wild1 { (,) x1 ds4 -> x1 }))
                             ipv5 of ds4 { (#,#) ipv7 ipv8 ->
                      Main.$w$j1 ipv7 } } } } }) -}
2fb33225b876ad74fd1d6916a3f7bcaa
  $w$j1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main18
                        GHC.Types.True
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Lecture5.$wgenerateSudokuProblem
                        Main.main17
                        10#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Base.Nothing
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main12
                             GHC.Types.True
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      Main.$w$j2 ipv4 }
                   GHC.Base.Just ipv4
                   -> case ipv4 `cast` (GHC.Types.N:IO[0] <Lecture5.Node>_R)
                             ipv2 of ds3 { (#,#) ipv5 ipv6 ->
                      case Lecture5.randomS3
                             (Lecture5.sud2grid (case ipv6 of wild1 { (,) x1 ds4 -> x1 }))
                             ipv5 of ds4 { (#,#) ipv7 ipv8 ->
                      Main.$w$j2 ipv7 } } } } }) -}
f2cf82aa20a20313a48a3ac240afed77
  $w$j2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main15
                        GHC.Types.True
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Lecture5.$wgenerateSudokuProblem
                        Main.main14
                        10#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Base.Nothing
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main12
                             GHC.Types.True
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      Main.$w$j3 ipv4 }
                   GHC.Base.Just ipv4
                   -> case ipv4 `cast` (GHC.Types.N:IO[0] <Lecture5.Node>_R)
                             ipv2 of ds3 { (#,#) ipv5 ipv6 ->
                      case Lecture5.randomS3
                             (Lecture5.sud2grid (case ipv6 of wild1 { (,) x1 ds4 -> x1 }))
                             ipv5 of ds4 { (#,#) ipv7 ipv8 ->
                      Main.$w$j3 ipv7 } } } } }) -}
ea2235fd126445b6cf9294a3e6c7b322
  $w$j3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main10
                        GHC.Types.True
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Lecture5.genNonSolvedSudoku10
                        @ Lecture5.Node
                        Main.main9
                          `cast`
                        (<(Lecture5.Sudoku, [Lecture5.Constraint])>_R
                         ->_R Sym (GHC.Types.N:IO[0] <[Lecture5.Node]>_R))
                        Lecture5.solved
                        Lecture5.genNonSolvedSudoku5
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <[Lecture5.Node]>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   []
                   -> case (GHC.Magic.noinline
                              @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                              GHC.IO.failIO1
                                `cast`
                              (forall (a :: <*>_N).
                               <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                              @ Lecture5.Node
                              Lecture5.genNonSolvedSudoku3)
                             `cast`
                           (GHC.Types.N:IO[0] <Lecture5.Node>_R)
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      Main.main2 ipv4 ipv5 }
                   : r ds
                   -> case ds of wild1 {
                        [] -> Main.main2 ipv2 r
                        : ipv4 ipv5
                        -> case (GHC.Magic.noinline
                                   @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                                   GHC.IO.failIO1
                                     `cast`
                                   (forall (a :: <*>_N).
                                    <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                   @ Lecture5.Node
                                   Lecture5.genNonSolvedSudoku3)
                                  `cast`
                                (GHC.Types.N:IO[0] <Lecture5.Node>_R)
                                  ipv2 of ds3 { (#,#) ipv6 ipv7 ->
                           Main.main2 ipv6 ipv7 } } } } }) -}
d558beadaf346fcc7841ff2bac82c79e
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
d66a8e5d8dd27c9cde1c1d06b905d275
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main33
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Lecture5.solveAndShow1
                        Lecture5.nrcExample
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main31
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Test.QuickCheck.Test.$w$squickCheckWithResult
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main30
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main28
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main26
                        GHC.Types.True
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main24
                        GHC.Types.True
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case Lecture5.$wgenerateSudokuProblem
                        Main.main23
                        10#
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   GHC.Base.Nothing
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main12
                             GHC.Types.True
                             ipv14 of ds9 { (#,#) ipv16 ipv17 ->
                      Main.$w$j ipv16 }
                   GHC.Base.Just ipv16
                   -> case ipv16 `cast` (GHC.Types.N:IO[0] <Lecture5.Node>_R)
                             ipv14 of ds9 { (#,#) ipv17 ipv18 ->
                      case Lecture5.randomS3
                             (Lecture5.sud2grid (case ipv18 of wild1 { (,) x1 ds10 -> x1 }))
                             ipv17 of ds10 { (#,#) ipv19 ipv20 ->
                      Main.$w$j ipv19 } } } } } } } } } } }) -}
902fd6fe9ef405a0205caa6957de1e91
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main11) -}
d6688a05e223713ccb53e19ab1bef6ff
  main11 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \\ESC[36m== Assignment 5 (NRC Problem generator) ==\ESC[0m"#) -}
dc93c6cdf173f360c018ebf3702e0557
  main12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main13) -}
d7a0c8055eeed131310bc50b0abf6174
  main13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Not found"#) -}
2c3f048b29133cf4cd063d37a057b822
  main14 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
d1f8f31247e3301992eb9ede47f729a9
  main15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main16) -}
8cfa01f82c980f5eacf17cacc5c8cf7e
  main16 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \Trying max 10 times to find a sudoku problem with at least 6 empty blocks."#) -}
95943ef2163c053d847df6b503da04e8
  main17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
9b97a3f9f78bbdb04a86810aa0117ca2
  main18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main19) -}
ed72f150584ae551bf47edd2727c3453
  main19 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \Trying max 10 times to find a sudoku problem with at least 5 empty blocks."#) -}
8c927d58be8651cfcc8e6ffcf1f33b5a
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Lecture5.Node -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><L,U(U,U)>,
     Unfolding: (\ (ipv :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (ipv1 :: Lecture5.Node)[OneShot] ->
                 case Lecture5.genNonSolvedSudoku_$srandomize
                        (Lecture5.filledPositions (case ipv1 of wild { (,) x ds1 -> x }))
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case Lecture5.randomS3
                        (Lecture5.sud2grid
                           (case Lecture5.minimalize
                                   ipv1
                                   ipv3
                                   GHC.Types.True of wild { (,) x1 ds2 ->
                            x1 }))
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main7
                        GHC.Types.True
                        ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                 case Lecture5.genNumHints2
                        Lecture5.exmple10
                        ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main5
                        GHC.Types.True
                        ipv8 of ds5 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (let {
                           $j :: GHC.Prim.Int# -> GHC.Base.String
                             <join 1> {- Arity: 1, Strictness: <S,U> -}
                           = \ (i :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.List.$wlenAcc @ GHC.Types.Int ipv9 0# of ww2 { DEFAULT ->
                             case GHC.Prim./##
                                    (GHC.Prim.int2Double# i)
                                    (GHC.Prim.int2Double# ww2) of wild2 { DEFAULT ->
                             GHC.Float.$w$sshowSignedFloat
                               GHC.Float.$fShowDouble2
                               GHC.Float.minExpt
                               wild2
                               (GHC.Types.[] @ GHC.Types.Char) } }
                         } in
                         letrec {
                           $wgo :: [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Base.String
                             <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                           = \ (w :: [GHC.Types.Int]) (ww :: GHC.Prim.Int#) ->
                             case w of wild {
                               [] -> $j ww
                               : y ys
                               -> case y of wild1 { GHC.Types.I# y1 ->
                                  $wgo ys (GHC.Prim.+# ww y1) } }
                         } in
                         $wgo ipv9 0#)
                        GHC.Types.True
                        ipv10 of ds6 { (#,#) ipv12 ipv13 ->
                 case Lecture5.genNumHintsNRC2
                        Lecture5.exmple10
                        ipv12 of ds7 { (#,#) ipv14 ipv15 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main3
                        GHC.Types.True
                        ipv14 of ds8 { (#,#) ipv16 ipv17 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (let {
                      $j :: GHC.Prim.Int# -> GHC.Base.String
                        <join 1> {- Arity: 1, Strictness: <S,U> -}
                      = \ (i :: GHC.Prim.Int#)[OneShot] ->
                        case GHC.List.$wlenAcc @ GHC.Types.Int ipv15 0# of ww2 { DEFAULT ->
                        case GHC.Prim./##
                               (GHC.Prim.int2Double# i)
                               (GHC.Prim.int2Double# ww2) of wild2 { DEFAULT ->
                        GHC.Float.$w$sshowSignedFloat
                          GHC.Float.$fShowDouble2
                          GHC.Float.minExpt
                          wild2
                          (GHC.Types.[] @ GHC.Types.Char) } }
                    } in
                    letrec {
                      $wgo :: [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Base.String
                        <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                      = \ (w :: [GHC.Types.Int]) (ww :: GHC.Prim.Int#) ->
                        case w of wild {
                          [] -> $j ww
                          : y ys
                          -> case y of wild1 { GHC.Types.I# y1 ->
                             $wgo ys (GHC.Prim.+# ww y1) } }
                    } in
                    $wgo ipv15 0#)
                   GHC.Types.True
                   ipv16 } } } } } } } }) -}
903d6fcf8bd1c2d0e4554b1dd5fde4cb
  main20 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
6fa9934f2aaadff08aa966e71aa22be2
  main21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main22) -}
4bad917c67297e67ff1b602154e5998e
  main22 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \Trying max 10 times to find a sudoku problem with at least 4 empty blocks."#) -}
7f5d4b796bddab39be2d4dfeec01a04c
  main23 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
94b841bb4b6098f1fadba25d7178b434
  main24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main25) -}
0d415336ac1d3a2c19db45c0fdc374c3
  main25 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Trying max 10 times to find a sudoku problem with at least 3 empty blocks."#) -}
d5250d3286734c0c87116ffebd4d5985
  main26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main27) -}
2598e357d65193826376a1330c17eaef
  main27 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \\ESC[36m== Assignment 4 (Empty block sudoku problems) ==\ESC[0m"#) -}
a8b52808071178f5d372f1c3e7dccec0
  main28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main29) -}
6f6d0303988a1bc878aaa9dd4cc18534
  main29 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \\ESC[36m== Assignment 3 (Test for minimal problems) ==\ESC[0m"#) -}
58f71617baea02823942837fe5bf4b76
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main4) -}
dceaf0b8a445017019957f175069a9cc
  main30 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Lecture5.Position
                   @ GHC.Types.Bool
                   Main.$s$fShow(,)
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Lecture5.genSudokuPositions1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Lecture5.Position>_R))
                   (Test.QuickCheck.Property.forAll2 @ Lecture5.Position)
                   Lecture5.freePosTest
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
d5d0add7927989b44b920c0bbf41daf6
  main31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main32) -}
1902b8e8404df95e432d85eb79014c4a
  main32 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \\ESC[36m== Assignment 2 (Refactored NRC Sudoku) ==\ESC[0m"#) -}
e01f95b1c46e72f6060eddd4a7b337d1
  main33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main34) -}
05dfb3b556c30144a1ce77a2a599a9ee
  main34 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\ESC[36m== Assignment 1 (NRC Sudoku's) ==\ESC[0m"#) -}
078523aa009f57fa39f8571d79c7575e
  main35 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
23a8f1f108c8ed20facbf17db3c4eb08
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \Average tips from ten generated NRC sudokus:"#) -}
f0fea395de63ea2acc5b636c62d72a7b
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main6) -}
b45642f8eba90b653f47a172825b54f8
  main6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Average tips from ten generated sudokus:"#) -}
e14d2db4829d8a98eb4466deac0d6b1b
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main8) -}
d327861bd524e9e993722c67709cdf70
  main8 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \\ESC[36m== BONUS Assignment 7 (Hints comparison NRC vs normal sudokus) ==\ESC[0m"#) -}
9b2aad29837dde5d5e9d149671b4c8ab
  main9 ::
    (Lecture5.Sudoku, [Lecture5.Constraint])
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Lecture5.Node] #)
  {- Arity: 2, Strictness: <S(LS),1*U(C(U),U)><S,U>,
     Unfolding: (\ (w1 :: (Lecture5.Sudoku, [Lecture5.Constraint]))
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { (,) ww1 ww2 ->
                 Lecture5.$wrsuccNode GHC.Types.True ww1 ww2 w2 }) -}
"SPEC/Main $fShow(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Show.Show
                                                           GHC.Types.Int)
                                                  (v :: GHC.Show.Show GHC.Types.Int)
  GHC.Show.$fShow(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = Main.$s$fShow(,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

