
==================== FINAL INTERFACE ====================
2018-09-20 21:14:40.540823605 UTC

interface main:Main 8043
  interface hash: 9cc2545c94264f6e3b83f86a2ecd6149
  ABI hash: 49f1b4baeea19612fcad850bdc549bfd
  export-list hash: 1df73ee09b507cf89438256706a87199
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8685d694e67a748160b24bb5044d3233
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.checkTestResult
  Main.chooseRandomProperty
  Main.chooseRandomSplitForm
  Main.chooseTreeOption
  Main.contradiction
  Main.entails
  Main.equiv
  Main.generateActualForm
  Main.generateForm
  Main.generateFormList
  Main.main
  Main.maxTreeChance
  Main.none
  Main.pAndNotP
  Main.pAndQ
  Main.pOrNotP
  Main.pOrQ
  Main.tautology
  Main.treeStateListToTreeState
  Main.truthTable
  Main.TreeState{Main.TreeState amountOfProperties form}
module dependencies: Lecture3
package dependencies: QuickCheck-2.11.3 array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 pretty-1.1.3.6
                      primitive-0.6.3.0 random-1.1 template-haskell-2.13.0.0
                      tf-random-0.5 time-1.8.0.2 transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck e00d138ee3234e83a31cc3113c8c8ffb
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  base-4.11.1.0:System.IO.Unsafe 0a2eb33ad4988fdd87ebf1fb8b419957
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  Lecture3 e7aa3775536d61807663859841e34829
  exports: 9ddcc891a5d1fbc8e3c36d7ebeeced72
  --> 9d8f2d04dcda7a24feb588679ecfebe1
  Cnj 9c2c481db6e2ec045ea868407cbb0ca4
  Dsj b4099d33bb7b2192fe92514d26bd459f
  Equiv 7703af904cd7b14a8d4aa3e6e50cafcc
  Form f1017ddd98abe9802319d139ccdb1a45
  Impl b5b6c91b8f55fe64dec2176918b5a6ab
  Neg 4ef3569eac125224ca98a9b34751ca1e
  Prop b39bfa9279852cfcff515dde39a0396b
  allVals 07371b0b3f53190327a90111c6d431c1
  evl aea88ee9570620816adf506e66a1d266
  p 54238374b6ad94e59436d9203e9bf31d
  q ecb1ea6ecdc5b441c9806517ea4f59d9
import  -/  random-1.1:System.Random 31994b60c33f032d578c64a928f735f7
a541b2ebdb613c6ae2ad5660f975e423
  $tc'TreeState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11161068614268354794##
                   5968605264523984341##
                   Main.$trModule
                   Main.$tc'TreeState2
                   0#
                   Main.$tc'TreeState1) -}
75fadebd9dd0eeaa36c6520061bc117d
  $tc'TreeState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
64abc41d12ba6a1836ba275c9897dc74
  $tc'TreeState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'TreeState3) -}
7cc68869da5e896f79d62a4d53ad33eb
  $tc'TreeState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TreeState"#) -}
46e03f073b5c6a0099b7a1697de35526
  $tcTreeState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2763301081759400247##
                   10884153590940357408##
                   Main.$trModule
                   Main.$tcTreeState1
                   0#
                   GHC.Types.krep$*) -}
109de17b0849fe5907a3f845ce56ceb2
  $tcTreeState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcTreeState2) -}
31e00dd9b5f8ae8f627ceeccb739c73b
  $tcTreeState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TreeState"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
2d4c79f31b94889bda4623940e4b96ef
  $wgenerateFormList ::
    GHC.Types.Int
    -> GHC.Types.IO Main.TreeState
    -> [GHC.Types.IO Main.TreeState]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [GHC.Types.IO Main.TreeState] #)
  {- Arity: 4,
     Strictness: <L,U(U)><L,C(U(U,1*U(1*U(U),A)))><L,U><S,U>,
     Inline: [0] -}
2128e83297d9b21a8f1ea63a3285fd41
  data TreeState
    = TreeState {amountOfProperties :: GHC.Types.Int,
                 form :: Lecture3.Form}
2128e83297d9b21a8f1ea63a3285fd41
  amountOfProperties :: Main.TreeState -> GHC.Types.Int
  RecSel Left Main.TreeState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.TreeState) ->
                 case ds of wild { Main.TreeState ds1 ds2 -> ds1 }) -}
ab87e2bb5ba70cc6754c8e77034b9c63
  checkTestResult :: GHC.Types.Bool -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Bool) ->
                 case ds of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
ba02eb31bc683fefc3af5b3b0d6755f2
  checkTestResult1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkTestResult2) -}
434443e4fa09b62f21dec719380f87f1
  checkTestResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\ESC[32mTest succeeded!\ESC[0m"#) -}
ef9ca2e7c68c30e1a7f88aac6829fc90
  checkTestResult3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkTestResult4) -}
4510ad5bdc66b32f0bbaa0b64274861f
  checkTestResult4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\ESC[31mTest failed!\ESC[0m"#) -}
fe39492f48204b604c892a5dcd79f813
  chooseRandomProperty ::
    GHC.Types.IO Main.TreeState -> GHC.Types.IO Main.TreeState
  {- Arity: 2, Strictness: <C(S(SL)),1*C1(U(U,1*U(1*U(U),A)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.chooseRandomProperty1
                  `cast`
                (<GHC.Types.IO Main.TreeState>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.TreeState>_R)) -}
5281dca424df853c5085f9d766bf0ca2
  chooseRandomProperty1 ::
    GHC.Types.IO Main.TreeState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.TreeState #)
  {- Arity: 2, Strictness: <C(S(SL)),1*C1(U(U,1*U(1*U(U),A)))><S,U>,
     Unfolding: (\ (state :: GHC.Types.IO Main.TreeState)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case state `cast` (GHC.Types.N:IO[0] <Main.TreeState>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 let {
                   props :: GHC.Types.Int
                   = case ipv1 of wild { Main.TreeState ds ds2 -> ds }
                 } in
                 case Main.chooseRandomProperty2
                        (case props of wild { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.+# x 1#) })
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    Main.TreeState
                      (case ipv3 of wild { GHC.Types.I# x ->
                       case props of wild1 { GHC.Types.I# y ->
                       case GHC.Prim.==# x y of lwild {
                         DEFAULT -> wild1 1# -> GHC.Types.I# (GHC.Prim.+# y 1#) } } })
                      (Lecture3.Prop ipv3) #) } }) -}
5ccf8e13ca8b95ea49b2a31ab9bb2929
  chooseRandomProperty2 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>m,
     Unfolding: (\ (maximumNumber :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case maximumNumber of wild1 { GHC.Types.I# x ->
                     GHC.Integer.Type.smallInteger (GHC.Prim.-# x 1#) }
                 } in
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, GHC.Types.Int)
                        @ GHC.Types.Int
                        r#
                        (\ (a1 :: System.Random.StdGen) ->
                         case System.Random.$wrandomIvalInteger
                                @ System.Random.StdGen
                                @ GHC.Types.Int
                                System.Random.$fRandomGenStdGen
                                GHC.Num.$fNumInt
                                Main.chooseRandomProperty_w2
                                w1
                                a1 of ww2 { (#,#) ww3 ww4 ->
                         case ww4 of a'1 { System.Random.StdGen ipv ipv1 -> (a'1, ww3) } })
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { GHC.Types.I# ipv2 -> ds1 } } }) -}
1a59469932582400d04391d47d61ddbc
  chooseRandomProperty_w2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
2762f7f0237c0314616ece22dbbaa60f
  chooseRandomSplitForm ::
    GHC.Types.Int
    -> GHC.Types.IO Main.TreeState -> GHC.Types.IO Main.TreeState
  {- Arity: 3, Strictness: <L,U(U)><L,C(U(U,1*U(1*U(U),A)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.chooseRandomSplitForm1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Types.IO Main.TreeState>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.TreeState>_R)) -}
530454f82dcf46b6013eb07cc1756fd2
  chooseRandomSplitForm1 ::
    GHC.Types.Int
    -> GHC.Types.IO Main.TreeState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.TreeState #)
  {- Arity: 3, Strictness: <L,U(U)><L,C(U(U,1*U(1*U(U),A)))><S,U> -}
9a30b226e9698d3797ae170e49975ccd
  chooseTreeOption :: GHC.Types.Int -> GHC.Types.IO GHC.Types.Int
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>m,
     Unfolding: InlineRule (0, True, True)
                Main.chooseRandomProperty2
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R)) -}
e6eee1be1d722d66e98e05d86474c0c4
  contradiction :: Lecture3.Form -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (f :: Lecture3.Form) ->
                 letrec {
                   go4 :: [Lecture3.Valuation] -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Lecture3.Valuation]) ->
                     case ds of wild {
                       [] -> GHC.Types.True
                       : y ys
                       -> case Lecture3.evl y f of wild1 {
                            GHC.Types.False -> go4 ys GHC.Types.True -> GHC.Types.False } }
                 } in
                 go4
                   (Lecture3.genVals
                      (Data.OldList.sortBy
                         @ Lecture3.Name
                         GHC.Classes.compareInt
                         (Data.OldList.nubBy
                            @ Lecture3.Name
                            GHC.Classes.eqInt
                            (Lecture3.allVals_pnames f))))) -}
9f2fa3c6e964740fb47a0e8b11bbdda5
  entails :: Lecture3.Form -> Lecture3.Form -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.entails1
                  `cast`
                (<Lecture3.Form>_R
                 ->_R <Lecture3.Form>_R
                 ->_R Data.Semigroup.Internal.N:All[0]) -}
daa436a2dc96e4921888963916e0f840
  entails1 ::
    Lecture3.Form -> Lecture3.Form -> Data.Semigroup.Internal.All
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ (f :: Lecture3.Form) (g :: Lecture3.Form) ->
                 Main.entails_go (Main.truthTable f g)) -}
cd624b61083b7a8a58306f0a3ccb95b6
  entails_go ::
    [(GHC.Types.Bool, GHC.Types.Bool)] -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
f5e3a2b2f8b97ec6c078800cc6ca6331
  equiv :: Lecture3.Form -> Lecture3.Form -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.equiv1
                  `cast`
                (<Lecture3.Form>_R
                 ->_R <Lecture3.Form>_R
                 ->_R Data.Semigroup.Internal.N:All[0]) -}
1ac8b887f882f80308f6629c1f3109d4
  equiv1 ::
    Lecture3.Form -> Lecture3.Form -> Data.Semigroup.Internal.All
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ (f :: Lecture3.Form) (g :: Lecture3.Form) ->
                 Main.equiv_go (Main.truthTable f g)) -}
b77fe9a5372bca405a853fcceb5fbfbe
  equiv_go ::
    [(GHC.Types.Bool, GHC.Types.Bool)] -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2128e83297d9b21a8f1ea63a3285fd41
  form :: Main.TreeState -> Lecture3.Form
  RecSel Left Main.TreeState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.TreeState) ->
                 case ds of wild { Main.TreeState ds1 ds2 -> ds2 }) -}
245800a3cefdcea49b114b1509bbd1b9
  generateActualForm :: GHC.Types.IO Lecture3.Form
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.generateActualForm1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Lecture3.Form>_R)) -}
3ed2b669f530e46406f9fdbd39111b13
  generateActualForm1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Lecture3.Form #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.generateActualForm2
                        (GHC.Types.I# 4#)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         (# s1, Main.TreeState (GHC.Types.I# 1#) Lecture3.p #))
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <Main.TreeState>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, case ipv1 of wild { Main.TreeState ds ds2 -> ds2 } #) }) -}
5329905db89707b5b9f72f78c822c094
  generateActualForm2 ::
    GHC.Types.Int
    -> GHC.Types.IO Main.TreeState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.TreeState #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,C(U(U,1*U(1*U(U),A)))><S,U>,
     Unfolding: (\ (leftTreeChance :: GHC.Types.Int)
                   (state :: GHC.Types.IO Main.TreeState)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.chooseRandomProperty2
                        Main.maxTreeChance
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { GHC.Types.I# x ->
                 case leftTreeChance of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.<# x y of lwild {
                   DEFAULT -> Main.chooseRandomProperty1 state ipv
                   1#
                   -> Main.chooseRandomSplitForm1
                        (GHC.Types.I# (GHC.Prim.-# y 1#))
                        state
                        ipv } } } }) -}
c4d42d245a3eb9955a1aff96d1628019
  generateForm ::
    GHC.Types.Int
    -> GHC.Types.IO Main.TreeState -> GHC.Types.IO Main.TreeState
  {- Arity: 3, Strictness: <L,1*U(U)><L,C(U(U,1*U(1*U(U),A)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.generateActualForm2
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Types.IO Main.TreeState>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.TreeState>_R)) -}
fefeebeb3aa906fb3b2650b95cfdd7b2
  generateFormList ::
    GHC.Types.Int
    -> GHC.Types.IO Main.TreeState
    -> GHC.Types.Int
    -> [GHC.Types.IO Main.TreeState]
    -> GHC.Types.IO [GHC.Types.IO Main.TreeState]
  {- Arity: 5,
     Strictness: <L,U(U)><L,C(U(U,1*U(1*U(U),A)))><L,A><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.generateFormList1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Types.IO Main.TreeState>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <[GHC.Types.IO Main.TreeState]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Types.IO Main.TreeState]>_R)) -}
998dcaf8c050dcc5b2503ea7e073b544
  generateFormList1 ::
    GHC.Types.Int
    -> GHC.Types.IO Main.TreeState
    -> GHC.Types.Int
    -> [GHC.Types.IO Main.TreeState]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [GHC.Types.IO Main.TreeState] #)
  {- Arity: 5,
     Strictness: <L,U(U)><L,C(U(U,1*U(1*U(U),A)))><L,A><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.IO Main.TreeState)
                   (w2 :: GHC.Types.Int)
                   (w3 :: [GHC.Types.IO Main.TreeState])
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.$wgenerateFormList w w1 w3 w4) -}
b4f9ae97a091b232a88173a93240314d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
2ae627898cff160a4ab35ad5461925fa
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
074d2c70e6a7a794e274b12af08ff830
  maxTreeChance :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
c6812a22a9fe00658800d9b0517df883
  none ::
    Data.Foldable.Foldable t =>
    (a -> GHC.Types.Bool) -> t a -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LC(C(C(S)))LLLLLLLLLLLLLL),1*U(A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t :: * -> *
                   @ a
                   ($dFoldable :: Data.Foldable.Foldable t)
                   (x :: a -> GHC.Types.Bool)
                   (y :: t a) ->
                 case (Data.Foldable.foldMap
                         @ t
                         $dFoldable
                         @ Data.Semigroup.Internal.Any
                         @ a
                         Data.Semigroup.Internal.$fMonoidAny
                         x `cast` (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Any[0]))
                         y)
                        `cast`
                      (Data.Semigroup.Internal.N:Any[0]) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
23c47b134e4d0f4ea5cad106b9badef6
  pAndNotP :: Lecture3.Form
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Lecture3.Cnj Main.pAndNotP1) -}
eb57f168fbb08062df93590278fa17d8
  pAndNotP1 :: [Lecture3.Form]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lecture3.Form
                   Lecture3.p
                   Main.pAndNotP2) -}
c080d76f89dd0beb91da6f8a42f6d80f
  pAndNotP2 :: [Lecture3.Form]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lecture3.Form
                   Main.pAndNotP3
                   (GHC.Types.[] @ Lecture3.Form)) -}
cd24027d6c401232ddad085f4aeb0008
  pAndNotP3 :: Lecture3.Form
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Lecture3.Neg Lecture3.p) -}
b9224f84b735e4905cc0ed15e73ac5d4
  pAndQ :: Lecture3.Form
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Lecture3.Cnj Main.pAndQ1) -}
ef558d97f6e86cce45427fda1e78028b
  pAndQ1 :: [Lecture3.Form]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Lecture3.Form Lecture3.p Main.pAndQ2) -}
c2071a06c61b5524933e9ff54fffd3fc
  pAndQ2 :: [Lecture3.Form]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lecture3.Form
                   Lecture3.q
                   (GHC.Types.[] @ Lecture3.Form)) -}
4e84d7cc2e1eb7b468ab5fd7bb6dbb10
  pOrNotP :: Lecture3.Form
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Lecture3.Dsj Main.pAndNotP1) -}
69c24542eb180428957103e10acfac5e
  pOrQ :: Lecture3.Form
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Lecture3.Dsj Main.pAndQ1) -}
0a2a01d68ac217c930ba3692abcbd120
  tautology :: Lecture3.Form -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tautology1
                  `cast`
                (<Lecture3.Form>_R ->_R Data.Semigroup.Internal.N:All[0]) -}
1a8d0db28dc6dde3bd016c837af851ac
  tautology1 :: Lecture3.Form -> Data.Semigroup.Internal.All
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (f :: Lecture3.Form) ->
                 letrec {
                   go4 :: [Lecture3.Valuation] -> Data.Semigroup.Internal.All
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Lecture3.Valuation]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                       : y ys
                       -> case Lecture3.evl y f of wild1 {
                            GHC.Types.False
                            -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                            GHC.Types.True -> go4 ys } }
                 } in
                 go4
                   (Lecture3.genVals
                      (Data.OldList.sortBy
                         @ Lecture3.Name
                         GHC.Classes.compareInt
                         (Data.OldList.nubBy
                            @ Lecture3.Name
                            GHC.Classes.eqInt
                            (Lecture3.allVals_pnames f))))) -}
2c37ffdc5d35d1b2cf9cb945fc37ad16
  treeStateListToTreeState ::
    ([Lecture3.Form] -> Lecture3.Form)
    -> [GHC.Types.IO Main.TreeState] -> GHC.Types.IO Main.TreeState
  {- Arity: 3, Strictness: <L,1*C1(U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.treeStateListToTreeState1
                  `cast`
                (<[Lecture3.Form] -> Lecture3.Form>_R
                 ->_R <[GHC.Types.IO Main.TreeState]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.TreeState>_R)) -}
8c42143eae7f5240928ca5ee0942609c
  treeStateListToTreeState1 ::
    ([Lecture3.Form] -> Lecture3.Form)
    -> [GHC.Types.IO Main.TreeState]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.TreeState #)
  {- Arity: 3, Strictness: <L,1*C1(U)><S,1*U><S,U>,
     Unfolding: (\ (f :: [Lecture3.Form] -> Lecture3.Form)
                   (states :: [GHC.Types.IO Main.TreeState])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.treeStateListToTreeState2
                        states
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Main.TreeState
                      (Main.treeStateListToTreeState_go
                         ipv1
                         (GHC.List.lastError @ Main.TreeState))
                      (f (GHC.Base.map
                            @ Main.TreeState
                            @ Lecture3.Form
                            Main.form
                            ipv1)) #) }) -}
41d24c0c0a485587e1849a5648152dfa
  treeStateListToTreeState2 ::
    [GHC.Types.IO Main.TreeState]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Main.TreeState] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U> -}
ea93af45ebc50c6b6dbfc6875bc76439
  treeStateListToTreeState_go ::
    [Main.TreeState] -> Main.TreeState -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(1*U(U),A)>m -}
55aed60940ee180a829d4199fe5e56b6
  truthTable ::
    Lecture3.Form
    -> Lecture3.Form -> [(GHC.Types.Bool, GHC.Types.Bool)]
  {- Arity: 2, Strictness: <S,U><S,U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

