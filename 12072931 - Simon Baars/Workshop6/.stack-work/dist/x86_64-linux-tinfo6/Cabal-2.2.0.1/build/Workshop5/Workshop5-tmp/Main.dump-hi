
==================== FINAL INTERFACE ====================
2018-10-23 12:50:50.393430442 UTC

interface main:Main 8043
  interface hash: e6df7961494a5df1f4ebc6b4cb10298a
  ABI hash: 0154b4863ad971812c86b82533965da4
  export-list hash: e3c257debcb561854d304ddf747d388b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c723a510f4121d1810a96bca0985c58f
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.collect
  Main.collect'
  Main.count
  Main.count'
  Main.depth
  Main.depth'
  Main.example1
  Main.example2
  Main.example3
  Main.exampleTree
  Main.foldT
  Main.leafCount
  Main.main
  Main.mapB
  Main.mapT
  Main.Blt{Main.Leaf Main.Node}
  Main.Tree{Main.T}
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
80edc6ccea06a84e4332112c28fcc458
  $fEqBlt :: GHC.Classes.Eq a => GHC.Classes.Eq (Main.Blt a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Main.Blt a)
                  (Main.$fEqBlt_$c== @ a v)
                  (Main.$fEqBlt_$c/= @ a v) -}
80edc6ccea06a84e4332112c28fcc458
  $fEqBlt_$c/= ::
    GHC.Classes.Eq a => Main.Blt a -> Main.Blt a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: Main.Blt a)
                   (y :: Main.Blt a) ->
                 case Main.$fEqBlt_$c== @ a $dEq x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
80edc6ccea06a84e4332112c28fcc458
  $fEqBlt_$c== ::
    GHC.Classes.Eq a => Main.Blt a -> Main.Blt a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
aefb992cc11b35e1ec05a423ec157485
  $fEqTree :: GHC.Classes.Eq a => GHC.Classes.Eq (Main.Tree a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Main.Tree a)
                  (Main.$fEqTree_$c== @ a v)
                  (Main.$fEqTree_$c/= @ a v) -}
aefb992cc11b35e1ec05a423ec157485
  $fEqTree_$c/= ::
    GHC.Classes.Eq a => Main.Tree a -> Main.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: Main.Tree a)
                   (y :: Main.Tree a) ->
                 case Main.$fEqTree_$c== @ a $dEq x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
aefb992cc11b35e1ec05a423ec157485
  $fEqTree_$c== ::
    GHC.Classes.Eq a => Main.Tree a -> Main.Tree a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)> -}
aefb992cc11b35e1ec05a423ec157485
  $fOrdTree :: GHC.Classes.Ord a => GHC.Classes.Ord (Main.Tree a)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Ord a).
                  @ (Main.Tree a)
                  (Main.$fOrdTree_$cp1Ord @ a v)
                  (Main.$fOrdTree_$ccompare @ a v)
                  (Main.$fOrdTree_$c< @ a v)
                  (Main.$fOrdTree_$c<= @ a v)
                  (\ (a1 :: Main.Tree a) (b :: Main.Tree a) ->
                   Main.$fOrdTree_$c< @ a v b a1)
                  (Main.$fOrdTree_$c>= @ a v)
                  (Main.$fOrdTree_$cmax @ a v)
                  (Main.$fOrdTree_$cmin @ a v) -}
aefb992cc11b35e1ec05a423ec157485
  $fOrdTree_$c< ::
    GHC.Classes.Ord a => Main.Tree a -> Main.Tree a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)> -}
aefb992cc11b35e1ec05a423ec157485
  $fOrdTree_$c<= ::
    GHC.Classes.Ord a => Main.Tree a -> Main.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Main.Tree a)
                   (b :: Main.Tree a) ->
                 case Main.$fOrdTree_$c< @ a $dOrd b a1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
aefb992cc11b35e1ec05a423ec157485
  $fOrdTree_$c>= ::
    GHC.Classes.Ord a => Main.Tree a -> Main.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Main.Tree a)
                   (b :: Main.Tree a) ->
                 case Main.$fOrdTree_$c< @ a $dOrd a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
aefb992cc11b35e1ec05a423ec157485
  $fOrdTree_$ccompare ::
    GHC.Classes.Ord a =>
    Main.Tree a -> Main.Tree a -> GHC.Types.Ordering
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)> -}
aefb992cc11b35e1ec05a423ec157485
  $fOrdTree_$cmax ::
    GHC.Classes.Ord a => Main.Tree a -> Main.Tree a -> Main.Tree a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U,U)><L,U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Main.Tree a)
                   (y :: Main.Tree a) ->
                 case Main.$fOrdTree_$c< @ a $dOrd y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
aefb992cc11b35e1ec05a423ec157485
  $fOrdTree_$cmin ::
    GHC.Classes.Ord a => Main.Tree a -> Main.Tree a -> Main.Tree a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U,U)><L,U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Main.Tree a)
                   (y :: Main.Tree a) ->
                 case Main.$fOrdTree_$c< @ a $dOrd y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
aefb992cc11b35e1ec05a423ec157485
  $fOrdTree_$cp1Ord ::
    GHC.Classes.Ord a => GHC.Classes.Eq (Main.Tree a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Main.$fEqTree @ a (GHC.Classes.$p1Ord @ a $dOrd)) -}
80edc6ccea06a84e4332112c28fcc458
  $fShowBlt :: GHC.Show.Show a => GHC.Show.Show (Main.Blt a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Main.Blt a)
                  (Main.$fShowBlt_$cshowsPrec @ a v)
                  (Main.$fShowBlt_$cshow @ a v)
                  (Main.$fShowBlt_$cshowList @ a v) -}
a9230cf10e2bf57d01f24d4f6210acbb
  $fShowBlt1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
80edc6ccea06a84e4332112c28fcc458
  $fShowBlt_$cshow ::
    GHC.Show.Show a => Main.Blt a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Main.Blt a) ->
                 Main.$fShowBlt_$cshowsPrec
                   @ a
                   $dShow
                   Main.$fShowBlt1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
80edc6ccea06a84e4332112c28fcc458
  $fShowBlt_$cshowList ::
    GHC.Show.Show a => [Main.Blt a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Main.Blt a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Blt a)
                   (Main.$fShowBlt_$cshowsPrec @ a $dShow Main.$fShowBlt1)
                   ls
                   s) -}
80edc6ccea06a84e4332112c28fcc458
  $fShowBlt_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Main.Blt a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.Blt a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec @ a w ww1 w2 }) -}
aefb992cc11b35e1ec05a423ec157485
  $fShowTree :: GHC.Show.Show a => GHC.Show.Show (Main.Tree a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(C(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Main.Tree a)
                  (Main.$fShowTree_$cshowsPrec @ a v)
                  (Main.$fShowTree_$cshow @ a v)
                  (Main.$fShowTree_$cshowList @ a v) -}
aefb992cc11b35e1ec05a423ec157485
  $fShowTree_$cshow ::
    GHC.Show.Show a => Main.Tree a -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Main.Tree a) ->
                 Main.$fShowTree_$cshowsPrec
                   @ a
                   $dShow
                   Main.$fShowBlt1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
aefb992cc11b35e1ec05a423ec157485
  $fShowTree_$cshowList ::
    GHC.Show.Show a => [Main.Tree a] -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Main.Tree a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Tree a)
                   (Main.$fShowTree_$cshowsPrec @ a $dShow Main.$fShowBlt1)
                   ls
                   s) -}
aefb992cc11b35e1ec05a423ec157485
  $fShowTree_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Main.Tree a -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.Tree a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Main.T ww3 ww4 ->
                 Main.$w$cshowsPrec1 @ a w ww1 ww3 ww4 } }) -}
5c905f665d9a2cb0706c2c7912f05cb4
  $tc'Leaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2429462324830996089##
                   3103893512769260469##
                   Main.$trModule
                   Main.$tc'Leaf2
                   1#
                   Main.$tc'Leaf1) -}
77497e09d2cb64011ba09c83636cf9c6
  $tc'Leaf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d1069c208dfe87c1344d2c3562facb69
  $tc'Leaf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Leaf3) -}
edba2c2e55e89259dd2cb82805d71d6a
  $tc'Leaf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Leaf"#) -}
de004ea65f0a7ee78509a0fea0c59e53
  $tc'Node :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11019788924731710585##
                   649625707236464705##
                   Main.$trModule
                   Main.$tc'Node2
                   1#
                   Main.$tc'Node1) -}
88b8d75d90f5a87c95c03065f9394e35
  $tc'Node1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cb605d7be983d086a6cdf4daa65af7be
  $tc'Node2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Node3) -}
8318f6953f1daa72a63769a67f6fb6de
  $tc'Node3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Node"#) -}
82a89cbcc83f0fe4f847c80f8f06c803
  $tc'T :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15564654814037795574##
                   9702549696965301893##
                   Main.$trModule
                   Main.$tc'T2
                   1#
                   Main.$tc'T1) -}
cdea305a07fc7b0ce3b6fa279beed5d1
  $tc'T1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b153c59e0fc12c971d956d3caebbd8d6
  $tc'T2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'T3) -}
3c5909b1a45d9d6f6b666edd1e7deada
  $tc'T3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'T"#) -}
626f23de5da6f3260436a0ed9bd720fd
  $tcBlt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7512354224054915313##
                   6035024093333090794##
                   Main.$trModule
                   Main.$tcBlt1
                   0#
                   GHC.Types.krep$*Arr*) -}
582f6ce89634d68bff053a5bc5245e28
  $tcBlt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcBlt2) -}
f61966bf397a4a81a5d2e71c093fdd6e
  $tcBlt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Blt"#) -}
344ba01ddc47ef15cd34a5a4090287c0
  $tcTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9208051040442588375##
                   2694919957537544827##
                   Main.$trModule
                   Main.$tcTree1
                   0#
                   GHC.Types.krep$*Arr*) -}
2f5ee83cf42ce248da8c643cf86c71f4
  $tcTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcTree2) -}
3b8c48e27778354ef7c721b0c45bea2d
  $tcTree2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tree"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
80edc6ccea06a84e4332112c28fcc458
  $w$cshowsPrec ::
    GHC.Show.Show a => GHC.Prim.Int# -> Main.Blt a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [0] -}
aefb992cc11b35e1ec05a423ec157485
  $w$cshowsPrec1 ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> a -> [Main.Tree a] -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,U><L,U><L,U>, Inline: [0] -}
76a52dc4d66b669b5ae80bc35189d2c1
  $wfoldT :: (a -> [b] -> b) -> a -> [Main.Tree a] -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),C(C1(U))><L,U><L,1*U>, Inline: [0] -}
5487f096edb44ffa910da2a1ce4b2e8a
  $wleafCount :: Main.Blt a -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
4222b399b4854e0c315b5f21f0a7bfa6
  $wmapT :: (a -> b) -> a -> [Main.Tree a] -> (# b, [Main.Tree b] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,U><L,1*U>,
     Inline: [0] -}
80edc6ccea06a84e4332112c28fcc458
  data Blt a = Leaf a | Node (Main.Blt a) (Main.Blt a)
aefb992cc11b35e1ec05a423ec157485
  data Tree a = T a [Main.Tree a]
d2c41d2bcfd1142a55ccc070a2fa1afe
  collect :: Main.Tree a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,1*U)>m2,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Main.Tree a) ->
                 case w of ww { Main.T ww1 ww2 ->
                 GHC.Types.: @ a ww1 (Main.collect1 @ a ww2) }) -}
2de66403dd5741d3512625b513ff2c64
  collect' :: Main.Tree a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,1*U)>,
     Unfolding: (\ @ a (w :: Main.Tree a) ->
                 case w of ww { Main.T ww1 ww2 ->
                 Main.$wfoldT @ a @ [a] (Main.collect'1 @ a) ww1 ww2 }) -}
9d71b385e75470c5cf064bc955cb81cd
  collect'1 :: a -> [[a]] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: a) (w1 :: [[a]]) ->
                 GHC.Types.:
                   @ a
                   w
                   (letrec {
                      go :: [[a]] -> [a] {- Arity: 1, Strictness: <S,U> -}
                      = \ (ds :: [[a]]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ a : y ys -> GHC.Base.++ @ a y (go ys) }
                    } in
                    go w1)) -}
3ef82311d2ef1ffc3a7ec06f06d605eb
  collect1 :: [Main.Tree a] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b08a09f24931a78bf6629cc4c47ae5f6
  count :: Main.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Main.Tree a) ->
                 case w of ww { Main.T ww1 ww2 ->
                 case GHC.List.$wlenAcc @ (Main.Tree a) ww2 0# of ww3 { DEFAULT ->
                 case Main.count1 @ a ww2 of ww4 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.+# ww3 ww4) } } }) -}
f168d33a034917074c9fc68702e7a053
  count' :: Main.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: Main.Tree a) ->
                 case Main.foldT
                        @ a
                        @ GHC.Types.Int
                        (Main.count'1 @ a)
                        x of wild { GHC.Types.I# x1 ->
                 GHC.Types.I# (GHC.Prim.-# x1 1#) }) -}
3cccec9a1299cc34e2f9c1cf9bba859a
  count'1 :: a -> [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (i :: a) (j :: [GHC.Types.Int]) ->
                 letrec {
                   go :: [GHC.Types.Int] -> GHC.Types.Int -> GHC.Types.Int
                     <join 2> {- Arity: 2 -}
                   = \ (ds :: [GHC.Types.Int]) (eta :: GHC.Types.Int) ->
                     case ds of wild {
                       []
                       -> case eta of wild1 { GHC.Types.I# y ->
                          GHC.Types.I# (GHC.Prim.+# 1# y) }
                       : y ys -> go ys (GHC.Num.$fNumInt_$c+ eta y) }
                 } in
                 go j Main.$fShowBlt1) -}
bd47a93bd53fda3cbb9c063505f0eeba
  count1 :: [Main.Tree a] -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
b37e1f86581fa5e706983fc68875b0a1
  depth :: Main.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Main.Tree a) ->
                 case w of ww { Main.T ww1 ww2 ->
                 case ww2 of wild {
                   [] -> GHC.Types.I# 0#
                   : ipv ipv1
                   -> case Main.depth1 @ a wild 0# of ww3 { DEFAULT ->
                      GHC.Types.I# ww3 } } }) -}
bb5b2e7b986278b288eeb6672dcbba57
  depth' :: Main.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Main.Tree a) ->
                 case ds of wild { Main.T ds1 ds2 ->
                 case ds2 of wild1 {
                   [] -> Main.$fShowBlt1
                   : ipv ipv1
                   -> Main.foldT @ a @ GHC.Types.Int (Main.depth'1 @ a) wild } }) -}
4e6bea6ce2a8140c8d450447cdd45675
  depth'1 :: a -> [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: a) (y :: [GHC.Types.Int]) ->
                 case y of wild {
                   [] -> Main.$fShowBlt1
                   : ds1 ds2
                   -> case ds1 of wild1 { GHC.Types.I# x1 ->
                      GHC.Types.I# (GHC.Prim.+# x1 1#) } }) -}
800e64d14be7035f01d44ea58d27ad38
  depth1 :: [Main.Tree a] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [0] -}
144ac23b7fd3373dc0094df8ae046107
  example1 :: Main.Tree GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.T
                   @ GHC.Integer.Type.Integer
                   Main.example10
                   Main.example4) -}
c87834c478ece493637d5b55021ead5a
  example10 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
5ab637671a33f6c7752416efa7faae3d
  example11 :: [Main.Tree GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Integer.Type.Integer)
                   Main.example1
                   Main.example12) -}
374b5af7907795473b3574571c365eb5
  example12 :: [Main.Tree GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Integer.Type.Integer)
                   Main.example1
                   Main.example13) -}
7998c67e1911fdcf6dfc7026444a6fcf
  example13 :: [Main.Tree GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Integer.Type.Integer)
                   Main.example1
                   (GHC.Types.[] @ (Main.Tree GHC.Integer.Type.Integer))) -}
eba2f9e625a400f68919d9d2db8a6424
  example14 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
894e31712ae7880be3adde841524ec56
  example15 :: [Main.Tree GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Integer.Type.Integer)
                   Main.example2
                   Main.example16) -}
1399cc97b063ce32b638ac4242418fb6
  example16 :: [Main.Tree GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Integer.Type.Integer)
                   Main.example1
                   Main.example17) -}
ff7d1bedc9da8ef03a8f9102f6718a74
  example17 :: [Main.Tree GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Integer.Type.Integer)
                   Main.example2
                   Main.example18) -}
4ef28c35f02c65d3378a6379edbdfd8e
  example18 :: [Main.Tree GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Integer.Type.Integer)
                   Main.example2
                   Main.example19) -}
fc66a6ea00965e19bae276f0299df73a
  example19 :: [Main.Tree GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Integer.Type.Integer)
                   Main.example1
                   Main.example20) -}
12a16e01e901c621840521799b18b600
  example2 :: Main.Tree GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.T
                   @ GHC.Integer.Type.Integer
                   Main.example14
                   Main.example11) -}
9fea44801a29af9091a5541b96692a25
  example20 :: [Main.Tree GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Integer.Type.Integer)
                   Main.example2
                   (GHC.Types.[] @ (Main.Tree GHC.Integer.Type.Integer))) -}
80c9cf5f47ad0b68d39b838b13a8cbfe
  example3 :: Main.Tree GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.T
                   @ GHC.Integer.Type.Integer
                   Main.example14
                   Main.example15) -}
b7fa85c799b291ca1af83ff55f08d60b
  example4 :: [Main.Tree GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Integer.Type.Integer)
                   Main.example8
                   Main.example5) -}
47ee48516b67fd067668b7fc8e2c01bc
  example5 :: [Main.Tree GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Tree GHC.Integer.Type.Integer)
                   Main.example6
                   (GHC.Types.[] @ (Main.Tree GHC.Integer.Type.Integer))) -}
5ff37ae422a011f4d02f429243046fe1
  example6 :: Main.Tree GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.T
                   @ GHC.Integer.Type.Integer
                   Main.example7
                   (GHC.Types.[] @ (Main.Tree GHC.Integer.Type.Integer))) -}
9cd988eae60cc2b962f284f11b5a670c
  example7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
863c5db113862b164a530accfa303ea8
  example8 :: Main.Tree GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.T
                   @ GHC.Integer.Type.Integer
                   Main.example9
                   (GHC.Types.[] @ (Main.Tree GHC.Integer.Type.Integer))) -}
5ebe0259c57bdbca34bbf5b4017e039b
  example9 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
97b987ce09a14871458ccfcc98c16190
  exampleTree :: Main.Blt GHC.Base.String
  {- Strictness: m2,
     Unfolding: (Main.Node
                   @ [GHC.Types.Char]
                   Main.exampleTree4
                   Main.exampleTree1) -}
ed3148b5322930178e77d34cdbce8d34
  exampleTree1 :: Main.Blt [GHC.Types.Char]
  {- Strictness: m1,
     Unfolding: (Main.Leaf @ [GHC.Types.Char] Main.exampleTree2) -}
d21e58739b8971951577c6c8792c0aeb
  exampleTree10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Hoare, Tony"#) -}
4e9219cb84c8d683111ec6d8d651a6da
  exampleTree2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.exampleTree3) -}
a4ea917600a2de9301d95696f91acfdf
  exampleTree3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Goedel, Kurt"#) -}
0e499e8850258db3c7ee74413fedc404
  exampleTree4 :: Main.Blt [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (Main.Node
                   @ [GHC.Types.Char]
                   Main.exampleTree8
                   Main.exampleTree5) -}
7788269015fc092c051fa37be3aacd17
  exampleTree5 :: Main.Blt [GHC.Types.Char]
  {- Strictness: m1,
     Unfolding: (Main.Leaf @ [GHC.Types.Char] Main.exampleTree6) -}
f12a0247a269c65d3858a9cd63104271
  exampleTree6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.exampleTree7) -}
778d004c6401345987149d6e9884920c
  exampleTree7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Turing, Alan"#) -}
8b72d79bc9d14e43a861e721c7f6da18
  exampleTree8 :: Main.Blt [GHC.Types.Char]
  {- Strictness: m1,
     Unfolding: (Main.Leaf @ [GHC.Types.Char] Main.exampleTree9) -}
504e9f4c6907520b5f152f3a745b021c
  exampleTree9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.exampleTree10) -}
9035163d56c75885a32c05973446b948
  foldT :: (a -> [b] -> b) -> Main.Tree a -> b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(C(S)),C(C1(U))><S,1*U(U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (w :: a -> [b] -> b) (w1 :: Main.Tree a) ->
                 case w1 of ww { Main.T ww1 ww2 ->
                 Main.$wfoldT @ a @ b w ww1 ww2 }) -}
10da1b242c48298790088ced4a4b60ae
  leafCount :: Main.Blt a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Main.Blt a) ->
                 case Main.$wleafCount @ a w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
ee305392bdb3808e495a8f24119bb0f0
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
bb320fd64a2c7b02bda6daa4569519d8
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True) -}
4aab2e5263b893debf2ad4a0c173f611
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main3) -}
c04efd0f4e385343a4a228adfa7c8864
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Example tree size: "#) -}
17fb6b29112344c2ab6f4a65bb83da17
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
d9f88d0396c0f72bd1537c60e4fc6a4c
  mapB :: (a -> b) -> Main.Blt a -> Main.Blt b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
67e98bba90b230df37e4c0aace4a3ef4
  mapT :: (a -> b) -> Main.Tree a -> Main.Tree b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (w :: a -> b) (w1 :: Main.Tree a) ->
                 case w1 of ww { Main.T ww1 ww2 ->
                 case Main.$wmapT @ a @ b w ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 Main.T @ b ww4 ww5 } }) -}
instance [safe] GHC.Classes.Eq [Main.Blt] = Main.$fEqBlt
instance [safe] GHC.Classes.Eq [Main.Tree] = Main.$fEqTree
instance [safe] GHC.Classes.Ord [Main.Tree] = Main.$fOrdTree
instance [safe] GHC.Show.Show [Main.Blt] = Main.$fShowBlt
instance [safe] GHC.Show.Show [Main.Tree] = Main.$fShowTree
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

