
==================== FINAL INTERFACE ====================
2018-09-06 08:24:17.377157036 UTC

interface main:Main 8043
  interface hash: fe4084cd13f81c4569d2209fe9600e66
  ABI hash: 916fb2831b7de7f9c45f67fcbd67bf0f
  export-list hash: 0bf8f4ffffb1a53a04e16086d53e9350
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8cf3db837d10b4a31b1dc7dc8c0bad67
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: QuickCheck-2.11.3 array-0.5.2.0
                      base-4.11.1.0* containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
                      pretty-1.1.3.6 primitive-0.6.3.0 random-1.1
                      template-haskell-2.13.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck e00d138ee3234e83a31cc3113c8c8ffb
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Arbitrary 749c030890709ce50a65277c8ad56400
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Gen 18d7f741d47ea7234320fe42d69d1321
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Property 2a2442debcbf309292a12478b176466b
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Test 5c80e8a0569651177c75db83b77c7ff4
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
fixities infix 1 -->
28e2b084c2671dfc72b68e72a2f6177e
  $squickCheck1 ::
    (GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable w ww1 ww2 ww3 ww4 w2 }) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
9861d3dbcfdcbfd4431496dd17350fe7
  $w$dTestable ::
    (GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Integer.Type.Integer
                   @ GHC.Types.Bool
                   GHC.Show.$fShowInteger
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Test.QuickCheck.Arbitrary.$fArbitraryInteger_$sarbitrarySizedIntegral
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Integer.Type.Integer>_R))
                   Test.QuickCheck.Arbitrary.shrinkIntegral_$sshrinkIntegral
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
90ed0581398ed9bac7099c782244d325
  $wgen ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Integer.Type.Integer
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 Test.QuickCheck.Gen.$wsuchThat
                   @ GHC.Integer.Type.Integer
                   Main.main11
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Integer.Type.Integer>_R))
                   Main.main9
                   ww
                   ww1
                   ww2
                   ww3
                   ww4) -}
11c1dfb693dd91454018a6d5ac01b61f
  $wgen1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Integer.Type.Integer
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 GHC.Integer.Type.absInteger
                   (Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral1
                      ww
                      ww1
                      ww2
                      ww3
                      ww4)) -}
0db666eb5e1121cf9b6399608555c3f1
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
710c97a3e08122279accf1b12e00a4fb
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (GHC.Integer.Type.Integer -> GHC.Types.Bool)
                        Main.$squickCheck1
                          `cast`
                        ((<GHC.Integer.Type.Integer -> GHC.Types.Bool>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                         <GHC.Integer.Type.Integer
                                                                                                                                          -> GHC.Types.Bool>_N))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main14
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (GHC.Integer.Type.Integer -> GHC.Types.Bool)
                        Main.$squickCheck1
                          `cast`
                        ((<GHC.Integer.Type.Integer -> GHC.Types.Bool>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                         <GHC.Integer.Type.Integer
                                                                                                                                          -> GHC.Types.Bool>_N))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main12
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Test.QuickCheck.Test.$w$squickCheckWithResult
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main5
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv4 } } }) -}
55bd2b2d718d5fec62cbd68a3021ed36
  main10 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (25) -}
805b68be91056d7f4614b8f646d4eb00
  main11 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> GHC.Integer.Type.Integer
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$wgen1 ww1 ww2 ww3 ww4 ww8 } }) -}
20827235a0b964d3f1c69a7e3fabaa8a
  main12 :: GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (n :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.gtInteger# n Main.main7 of wild {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> let {
                        exit :: GHC.Integer.Type.Integer -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (eta :: GHC.Integer.Type.Integer)[OneShot] ->
                          let {
                            x :: GHC.Integer.Type.Integer
                            = GHC.Integer.Type.divInteger
                                (GHC.Integer.Type.timesInteger
                                   n
                                   (GHC.Integer.Type.plusInteger n Main.main6))
                                Main.main13
                          } in
                          case GHC.Integer.Type.eqInteger#
                                 eta
                                 (GHC.Integer.Type.timesInteger x x) of wild1 { DEFAULT ->
                          GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 }
                      } in
                      letrec {
                        go :: GHC.Integer.Type.Integer
                              -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                          <join 2> {- Arity: 2, Strictness: <S,U><S,1*U> -}
                        = \ (x :: GHC.Integer.Type.Integer)
                            (eta :: GHC.Integer.Type.Integer) ->
                          case GHC.Integer.Type.gtInteger# x n of wild1 {
                            DEFAULT
                            -> go
                                 (GHC.Integer.Type.plusInteger x Main.main6)
                                 (GHC.Integer.Type.plusInteger
                                    eta
                                    (GHC.Integer.Type.timesInteger
                                       (GHC.Integer.Type.timesInteger x x)
                                       x))
                            1# -> exit eta }
                      } in
                      go Main.main6 Main.main7 }) -}
d9c04d8a78d6c3db32b97d4bcdf5444b
  main13 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
606a61c91cb4cf243fe66d04c8917426
  main14 :: GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (n :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.gtInteger# n Main.main7 of wild {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> let {
                        exit :: GHC.Integer.Type.Integer -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (eta :: GHC.Integer.Type.Integer)[OneShot] ->
                          case GHC.Integer.Type.eqInteger#
                                 eta
                                 (GHC.Integer.Type.divInteger
                                    (GHC.Integer.Type.timesInteger
                                       (GHC.Integer.Type.timesInteger
                                          n
                                          (GHC.Integer.Type.plusInteger n Main.main6))
                                       (GHC.Integer.Type.plusInteger
                                          (GHC.Integer.Type.timesInteger Main.main13 n)
                                          Main.main6))
                                    Main.main15) of wild1 { DEFAULT ->
                          GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 }
                      } in
                      letrec {
                        go :: GHC.Integer.Type.Integer
                              -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                          <join 2> {- Arity: 2, Strictness: <S,U><S,1*U> -}
                        = \ (x :: GHC.Integer.Type.Integer)
                            (eta :: GHC.Integer.Type.Integer) ->
                          case GHC.Integer.Type.gtInteger# x n of wild1 {
                            DEFAULT
                            -> go
                                 (GHC.Integer.Type.plusInteger x Main.main6)
                                 (GHC.Integer.Type.plusInteger
                                    eta
                                    (GHC.Integer.Type.timesInteger x x))
                            1# -> exit eta }
                      } in
                      go Main.main6 Main.main7 }) -}
75679eedbd305ff25e5240bdb89df7e9
  main15 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (6) -}
f5fcb6c37cc301b7a21207d313fd617e
  main16 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
84df6ce0866b80bfe39aac9178894a3f
  main2 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main3) -}
b92d9176a92de8bf02dcb6257df04af4
  main3 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (GHC.CString.unpackCString# Main.main4)
                   GHC.Show.$fShow[]1) -}
c948977ed7c2373dc829209f7b642d59
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Done!"#) -}
a7d6f70f9d81a688333674c8b336bc05
  main5 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Integer.Type.Integer
                   @ GHC.Types.Bool
                   GHC.Show.$fShowInteger
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.main8
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Integer.Type.Integer>_R))
                   (Test.QuickCheck.Property.forAll2 @ GHC.Integer.Type.Integer)
                   Main.main_pf
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
62ccec1ecf8b58a7031b35ee66f611ae
  main6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
9a6dfd213dbb17ab5ad66f1196d20a52
  main7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
90f489fa43e03bf53245e7751429a8ba
  main8 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> GHC.Integer.Type.Integer
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$wgen ww1 ww2 ww3 ww4 ww8 } }) -}
b9877fdffd4cb6b1340c49994fa85aa5
  main9 :: GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger#
                        ds
                        Main.main10 of wild { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild }) -}
74665e65aa1b184ccafb2235d079c7a9
  main_pf :: GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (n :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.geInteger# n Main.main7 of wild {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> case GHC.Integer.Type.leInteger#
                             n
                             Main.main7 of wild1 { DEFAULT ->
                      let {
                        $j :: GHC.Prim.Int# -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,U> -}
                        = \ (ww :: GHC.Prim.Int#)[OneShot] ->
                          case wild1 of lwild {
                            DEFAULT
                            -> case GHC.List.$wlenAcc
                                      @ [GHC.Integer.Type.Integer]
                                      (GHC.Types.:
                                         @ [GHC.Integer.Type.Integer]
                                         (GHC.Types.[] @ GHC.Integer.Type.Integer)
                                         (Data.OldList.nonEmptySubsequences
                                            @ GHC.Integer.Type.Integer
                                            (GHC.Enum.enumDeltaToInteger1 Main.main7 n)))
                                      0# of ww2 { DEFAULT ->
                               GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# ww2 ww) }
                            1#
                            -> case ww of wild2 {
                                 DEFAULT -> GHC.Types.False 1# -> GHC.Types.True } }
                      } in
                      case wild1 of wild2 {
                        DEFAULT
                        -> let {
                             $j1 :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (ww :: GHC.Prim.Int#)[OneShot] ->
                               case GHC.Prim.<# ww 0# of lwild {
                                 DEFAULT
                                 -> case ww of wild3 {
                                      DEFAULT
                                      -> case GHC.Real.$wf1 2# wild3 of ww4 { DEFAULT -> $j ww4 }
                                      0# -> $j 1# }
                                 1# -> case GHC.Real.^2 ret_ty GHC.Types.Bool of {} }
                           } in
                           letrec {
                             $wgo :: GHC.Integer.Type.Integer -> GHC.Prim.Int# -> GHC.Types.Bool
                               <join 2> {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
                             = \ (w :: GHC.Integer.Type.Integer) (ww :: GHC.Prim.Int#) ->
                               case GHC.Integer.Type.gtInteger# w n of wild3 {
                                 DEFAULT
                                 -> $wgo
                                      (GHC.Integer.Type.plusInteger w Main.main6)
                                      (GHC.Prim.+# ww 1#)
                                 1# -> $j1 ww }
                           } in
                           $wgo Main.main7 0#
                        1# -> $j 1# } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

