
==================== FINAL INTERFACE ====================
2018-09-13 07:57:06.932474843 UTC

interface main:Lecture2 8043
  interface hash: e21891bf4b3273265f36d5ca7c38695a
  ABI hash: edfb23ff8861de1a26dac9483afbe860
  export-list hash: fc9b2d63bf0dd1a31d14fed0958f1aca
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0e9f43a6a268d56c5d19130da6b2104e
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lecture2.#
  Lecture2.-->
  Lecture2..&&.
  Lecture2..||.
  Lecture2.compar
  Lecture2.f1
  Lecture2.f2
  Lecture2.forall
  Lecture2.genIntList
  Lecture2.genIntList'
  Lecture2.getIntL
  Lecture2.getIntL'
  Lecture2.getRandomInt
  Lecture2.getRandomInt'
  Lecture2.hoareTest
  Lecture2.hoareTestR
  Lecture2.invarTest
  Lecture2.invarTestR
  Lecture2.isTrue
  Lecture2.neg
  Lecture2.parity
  Lecture2.parity'
  Lecture2.prop_ordered
  Lecture2.quicksort
  Lecture2.quicksrt
  Lecture2.randomFlip
  Lecture2.samelength
  Lecture2.stronger
  Lecture2.test
  Lecture2.testInvar
  Lecture2.testPost
  Lecture2.testPost'
  Lecture2.testR
  Lecture2.testR'
  Lecture2.testRel
  Lecture2.testRl
  Lecture2.testRl'
  Lecture2.weaker
module dependencies:
package dependencies: QuickCheck-2.11.3 array-0.5.2.0
                      base-4.11.1.0* containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
                      pretty-1.1.3.6 primitive-0.6.3.0 random-1.1*
                      template-haskell-2.13.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck e00d138ee3234e83a31cc3113c8c8ffb
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Property 2a2442debcbf309292a12478b176466b
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Test 5c80e8a0569651177c75db83b77c7ff4
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  random-1.1:System.Random 31994b60c33f032d578c64a928f735f7
fixities infixl 2 #, infix 1 -->, infixl 2 .&&., infixl 2 .||.
38e14a467550423ff67cc5ce706c8fd5
  (#) :: (a -> b) -> (b -> c) -> a -> c
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a @ b @ c (x :: a -> b) (y :: b -> c) ->
                 GHC.Base.. @ b @ c @ a y x) -}
6c98824ea71a4667984dc414e99d6c19
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Lecture2.$trModule3
                   Lecture2.$trModule1) -}
fbe9064b9dd74ae4539fddeb60fabd8e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lecture2.$trModule2) -}
83dcebf246b144a54018a717af141d0a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lecture2"#) -}
22213ad05b19d5c2cdf5da08895f5da6
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lecture2.$trModule4) -}
aa2aabee453556fed36f682c9fcdbca7
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
3dcee1853d3e8c89e54fbdf341171f23
  $wf :: GHC.Prim.Int# -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.>=# ww 0# of lwild {
                   DEFAULT
                   -> Test.QuickCheck.Property.$fTestableDiscard2
                        `cast`
                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))
                   1#
                   -> let {
                        x1 :: Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
                        = Test.QuickCheck.Property.onRose
                            @ Test.QuickCheck.Property.Result
                            Test.QuickCheck.Property.$fTestable()1
                            (Test.QuickCheck.Property.MkRose
                               @ Test.QuickCheck.Property.Result
                               (case GHC.Prim.># 0# ww of lwild1 {
                                  DEFAULT
                                  -> let {
                                       exit :: GHC.Prim.Int#
                                               -> GHC.Prim.Int# -> Test.QuickCheck.Property.Result
                                         <join 2> {- Arity: 2, Strictness: <S,U><S,U>m -}
                                       = \ (w :: GHC.Prim.Int#)[OneShot]
                                           (ww1 :: GHC.Prim.Int#)[OneShot] ->
                                         case GHC.Prim.==#
                                                (GHC.Prim.+# ww1 w)
                                                (GHC.Prim.uncheckedIShiftRA#
                                                   (GHC.Prim.*# ww (GHC.Prim.+# ww 1#))
                                                   1#) of lwild2 {
                                           DEFAULT -> Test.QuickCheck.Property.counterexample1
                                           1# -> Test.QuickCheck.Property.succeeded }
                                     } in
                                     letrec {
                                       $wgo :: GHC.Prim.Int#
                                               -> GHC.Prim.Int# -> Test.QuickCheck.Property.Result
                                         <join 2> {- Arity: 2, Strictness: <S,U><S,U>m,
                                                     Inline: [0] -}
                                       = \ (w :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                                         case GHC.Prim.==# w ww of lwild2 {
                                           DEFAULT -> $wgo (GHC.Prim.+# w 1#) (GHC.Prim.+# ww1 w)
                                           1# -> exit w ww1 }
                                     } in
                                     $wgo 0# 0#
                                  1#
                                  -> case GHC.Prim.uncheckedIShiftRA#
                                            (GHC.Prim.*# ww (GHC.Prim.+# ww 1#))
                                            1# of wild {
                                       DEFAULT -> Test.QuickCheck.Property.counterexample1
                                       0# -> Test.QuickCheck.Property.succeeded } })
                               (GHC.Types.[]
                                  @ (Test.QuickCheck.Property.Rose
                                       Test.QuickCheck.Property.Result)))
                      } in
                      (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                       x1)
                        `cast`
                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) }) -}
b81e75b754651d23bf98ff3720992d2f
  $wgetIntL ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 3, Strictness: <L,U(U)><S,1*U><S,U>, Inline: [0] -}
520b384d6db3c99d0efbc9a7f1f69d56
  $wgetIntL' ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 3, Strictness: <L,U(U)><S,1*U><S,U>, Inline: [0] -}
3c0d0e4a855c1ca79adb69d5e00382b1
  $whoareTestR ::
    GHC.Real.Fractional t =>
    (a -> GHC.Types.Bool)
    -> (a -> a)
    -> (a -> GHC.Types.Bool)
    -> [a]
    -> (# GHC.Types.Bool, t #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(1*U(A,A,A,A,A,A,C(U)),1*C1(C1(U)),A,A)><L,C(U)><L,C(U)><L,C(U)><L,U>,
     Inline: [0],
     Unfolding: (\ @ t
                   @ a
                   (w :: GHC.Real.Fractional t)
                   (w1 :: a -> GHC.Types.Bool)
                   (w2 :: a -> a)
                   (w3 :: a -> GHC.Types.Bool)
                   (w4 :: [a]) ->
                 (# letrec {
                      go :: [a] -> GHC.Types.Bool
                        <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [a]) ->
                        case ds of wild {
                          [] -> GHC.Types.True
                          : y ys
                          -> case w1 y of wild1 {
                               GHC.Types.False -> go ys
                               GHC.Types.True
                               -> case w3 (w2 y) of wild2 {
                                    GHC.Types.False -> GHC.Types.False GHC.Types.True -> go ys } } }
                    } in
                    go w4,
                    let {
                      $dNum :: GHC.Num.Num t = GHC.Real.$p1Fractional @ t w
                    } in
                    GHC.Real./
                      @ t
                      w
                      (GHC.Num.fromInteger
                         @ t
                         $dNum
                         (letrec {
                            $wgo :: [a] -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
                              <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                            = \ (w5 :: [a]) (ww :: GHC.Prim.Int#) ->
                              case w5 of wild {
                                [] -> GHC.Integer.Type.smallInteger ww
                                : y ys
                                -> case w1 y of wild1 {
                                     GHC.Types.False -> $wgo ys ww
                                     GHC.Types.True -> $wgo ys (GHC.Prim.+# ww 1#) } }
                          } in
                          $wgo w4 0#))
                      (GHC.Num.fromInteger
                         @ t
                         $dNum
                         (case GHC.List.$wlenAcc @ a w4 0# of ww2 { DEFAULT ->
                          GHC.Integer.Type.smallInteger ww2 })) #)) -}
91870138ea3f9a32018a124ce0ebe557
  $wtestR ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ([GHC.Types.Int] -> [GHC.Types.Int])
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <S,U><S,U><L,C(U)><L,C(C1(U))><S,U>,
     Inline: [0] -}
32def4e5f018f753e8074cc23309b172
  $wtestR' ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ([GHC.Types.Int] -> [GHC.Types.Int])
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <S,U><S,U><L,C(U)><L,C(C1(U))><S,U>,
     Inline: [0] -}
7cc51bc5e46f271b2c5422a1e1bad895
  (-->) :: GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Types.Bool) (q :: GHC.Types.Bool) ->
                 case p of wild {
                   GHC.Types.False -> GHC.Types.True GHC.Types.True -> q }) -}
a58fade96c71bffb8bc093789bcff73b
  (.&&.) ::
    (a -> GHC.Types.Bool)
    -> (a -> GHC.Types.Bool) -> a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (p :: a -> GHC.Types.Bool)
                   (q :: a -> GHC.Types.Bool)
                   (x :: a) ->
                 case p x of wild {
                   GHC.Types.False -> GHC.Types.False GHC.Types.True -> q x }) -}
b47071d26490f28c2a219774413df525
  (.||.) ::
    (a -> GHC.Types.Bool)
    -> (a -> GHC.Types.Bool) -> a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (p :: a -> GHC.Types.Bool)
                   (q :: a -> GHC.Types.Bool)
                   (x :: a) ->
                 case p x of wild {
                   GHC.Types.False -> q x GHC.Types.True -> GHC.Types.True }) -}
0722cc52a961e16c942fd3e37efc4889
  compar ::
    [a]
    -> (a -> GHC.Types.Bool)
    -> (a -> GHC.Types.Bool)
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,C(U)><L,C(U)>,
     Unfolding: (\ @ a
                   (xs :: [a])
                   (p :: a -> GHC.Types.Bool)
                   (q :: a -> GHC.Types.Bool) ->
                 case (Lecture2.compar9 @ a xs p q)
                        `cast`
                      (Data.Semigroup.Internal.N:All[0]) of wild {
                   GHC.Types.False
                   -> case (Lecture2.compar9 @ a xs q p)
                             `cast`
                           (Data.Semigroup.Internal.N:All[0]) of wild1 {
                        GHC.Types.False -> Lecture2.compar7
                        GHC.Types.True -> Lecture2.compar5 }
                   GHC.Types.True
                   -> case (Lecture2.compar9 @ a xs q p)
                             `cast`
                           (Data.Semigroup.Internal.N:All[0]) of wild1 {
                        GHC.Types.False -> Lecture2.compar3
                        GHC.Types.True -> Lecture2.compar1 } }) -}
12fd79705cea20b09c8da4efcc081d94
  compar1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lecture2.compar2) -}
97c92e2dc7b3ecdefecec745e1ccd443
  compar2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("equivalent"#) -}
68ea04d1cf5fbe2f9e0258999fdc70ee
  compar3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lecture2.compar4) -}
e5f4ee3c48055d1841114d50f747f11b
  compar4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("stronger"#) -}
31de35332cf2e625207b673f473080c0
  compar5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lecture2.compar6) -}
4be85ed62b8cf18f878621c06c3b0f05
  compar6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("weaker"#) -}
2050032305b65cf543525da36eb82884
  compar7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lecture2.compar8) -}
68e62e4d923af76139c63abd6d8fa8dd
  compar8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("incomparable"#) -}
f20e1ff494c6d0bc603de7b2d6d70515
  compar9 ::
    [a]
    -> (a -> GHC.Types.Bool)
    -> (a -> GHC.Types.Bool)
    -> Data.Semigroup.Internal.All
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,C(U)>,
     Unfolding: (\ @ a
                   (xs :: [a])
                   (p :: a -> GHC.Types.Bool)
                   (q :: a -> GHC.Types.Bool) ->
                 letrec {
                   go :: [a] -> Data.Semigroup.Internal.All
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                       : y ys
                       -> case p y of wild1 {
                            GHC.Types.False -> go ys
                            GHC.Types.True
                            -> case q y of wild2 {
                                 GHC.Types.False
                                 -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                                 GHC.Types.True -> go ys } } }
                 } in
                 go xs) -}
8396a16a16b8beb23f66a627c177cdb5
  f1 :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case GHC.Prim.># 0# ww1 of lwild {
                   DEFAULT
                   -> letrec {
                        $wgo :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Int
                          <join 2> {- Arity: 2, Strictness: <S,U><S,U>m, Inline: [0] -}
                        = \ (w1 :: GHC.Prim.Int#) (ww2 :: GHC.Prim.Int#) ->
                          case GHC.Prim.==# w1 ww1 of lwild1 {
                            DEFAULT -> $wgo (GHC.Prim.+# w1 1#) (GHC.Prim.+# ww2 w1)
                            1# -> GHC.Types.I# (GHC.Prim.+# ww2 w1) }
                      } in
                      $wgo 0# 0#
                   1# -> GHC.Types.I# 0# } }) -}
d663c6e77abdb919a1e5d695ba1b10fb
  f2 :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 case n of wild { GHC.Types.I# x ->
                 GHC.Types.I#
                   (GHC.Prim.uncheckedIShiftRA#
                      (GHC.Prim.*# x (GHC.Prim.+# x 1#))
                      1#) }) -}
2be6ac757172903c0b17a0824263e236
  forall :: [a] -> (a -> GHC.Types.Bool) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.forall1
                  `cast`
                (forall (a :: <*>_N).
                 <[a]>_R
                 ->_R <a -> GHC.Types.Bool>_R
                 ->_R Data.Semigroup.Internal.N:All[0]) -}
d1d4f2fd48316e23b66882478e5f9347
  forall1 ::
    [a] -> (a -> GHC.Types.Bool) -> Data.Semigroup.Internal.All
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: [a]) (y :: a -> GHC.Types.Bool) ->
                 letrec {
                   go :: [a] -> Data.Semigroup.Internal.All <join 1> {- Arity: 1 -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                       : y1 ys
                       -> case y y1 of wild1 {
                            GHC.Types.False
                            -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                            GHC.Types.True -> go ys } }
                 } in
                 go x) -}
bb0c99c9c925e60891de6e511177d3fa
  genIntList :: GHC.Types.IO [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.genIntList1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[GHC.Types.Int]>_R)) -}
0b1307b9fd90ff5732e607f6cfe5f24d
  genIntList' :: GHC.Types.IO [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.genIntList'1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[GHC.Types.Int]>_R)) -}
2cd1136e5698758f1e25fc5de9e99649
  genIntList'1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lecture2.genIntList5
                        Lecture2.genIntList4
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Lecture2.genIntList5
                        Lecture2.genIntList3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Lecture2.genIntList'2 ipv1 ipv3 ipv2 } }) -}
6f546e494d130c172e760d630898b606
  genIntList'2 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 3, Strictness: <L,U(U)><S(S),1*U(1*U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Lecture2.$wgetIntL' w ww1 w2 }) -}
10482bbd80cf620cb6a9f85fa260dc18
  genIntList1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lecture2.genIntList5
                        Lecture2.genIntList4
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Lecture2.genIntList5
                        Lecture2.genIntList3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Lecture2.genIntList2 ipv1 ipv3 ipv2 } }) -}
0bd721f8b2c64f1afb3aefa53326e1d1
  genIntList2 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 3, Strictness: <L,U(U)><S(S),1*U(1*U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Lecture2.$wgetIntL w ww1 w2 }) -}
c71a2d80ce01461d97b3414c8625ff1e
  genIntList3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
87fe64837e751a8c88cf89f6097782b4
  genIntList4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 20#) -}
0eccce249bcd1543ea54208889502cba
  genIntList5 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>m,
     Unfolding: (\ (n :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case n of wild1 { GHC.Types.I# i ->
                     GHC.Integer.Type.smallInteger i }
                 } in
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, GHC.Types.Int)
                        @ GHC.Types.Int
                        r#
                        (\ (a1 :: System.Random.StdGen) ->
                         case System.Random.$wrandomIvalInteger
                                @ System.Random.StdGen
                                @ GHC.Types.Int
                                System.Random.$fRandomGenStdGen
                                GHC.Num.$fNumInt
                                Lecture2.genIntList_w2
                                w1
                                a1 of ww2 { (#,#) ww3 ww4 ->
                         case ww4 of a'1 { System.Random.StdGen ipv ipv1 -> (a'1, ww3) } })
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { GHC.Types.I# ipv2 -> ds1 } } }) -}
af0ce73e6f656fc97be9e403b9203f76
  genIntList_w2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
c8ae9f52eaf280e3b1e3246289838bef
  getIntL ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.IO [GHC.Types.Int]
  {- Arity: 3, Strictness: <L,U(U)><S(S),1*U(1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.genIntList2
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Types.Int]>_R)) -}
b56bf6631c865fa39ed8f730428b69a6
  getIntL' ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.IO [GHC.Types.Int]
  {- Arity: 3, Strictness: <L,U(U)><S(S),1*U(1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.genIntList'2
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Types.Int]>_R)) -}
724b18548bb15b6ed0bf9d4334d0af45
  getRandomInt :: GHC.Types.Int -> GHC.Types.IO GHC.Types.Int
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>m,
     Unfolding: InlineRule (0, True, True)
                Lecture2.genIntList5
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R)) -}
2fa3f0b9480c368c2dfd8ca6eeb1da75
  getRandomInt' ::
    (System.Random.Random a, GHC.Num.Num a) => a -> GHC.Types.IO a
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C(U(U,1*U)))),A,A,A,A,A)><L,1*U(A,A,A,1*C1(U),A,A,A)><L,U><S,U>m,
     Unfolding: InlineRule (0, True, True)
                Lecture2.getRandomInt'1
                  `cast`
                (forall (a :: <*>_N).
                 <System.Random.Random a>_R
                 ->_R <GHC.Num.Num a>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
e1dc2cd4973b5324fe1cc5c49c6e3534
  getRandomInt'1 ::
    (System.Random.Random a, GHC.Num.Num a) =>
    a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C(U(U,1*U)))),A,A,A,A,A)><L,1*U(A,A,A,1*C1(U),A,A,A)><L,U><S,U>m,
     Unfolding: (\ @ a
                   ($dRandom :: System.Random.Random a)
                   ($dNum :: GHC.Num.Num a)
                   (n :: a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 let {
                   f :: System.Random.StdGen -> (a, System.Random.StdGen)
                   = System.Random.randomR
                       @ a
                       $dRandom
                       @ System.Random.StdGen
                       System.Random.$fRandomGenStdGen
                       (GHC.Num.negate @ a $dNum n, n)
                 } in
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, a)
                        @ a
                        r#
                        (\ (a1 :: System.Random.StdGen) ->
                         case f a1 of wild1 { (,) v g ->
                         case g of a'1 { System.Random.StdGen ipv ipv1 -> (a'1, v) } })
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { DEFAULT -> ds1 } } }) -}
fe7272621f4015021ee413427105026c
  hoareTest ::
    (a -> GHC.Types.Bool)
    -> (a -> a) -> (a -> GHC.Types.Bool) -> [a] -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(U)><L,C(U)><L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.hoareTest1
                  `cast`
                (forall (a :: <*>_N).
                 <a -> GHC.Types.Bool>_R
                 ->_R <a -> a>_R
                 ->_R <a -> GHC.Types.Bool>_R
                 ->_R <[a]>_R
                 ->_R Data.Semigroup.Internal.N:All[0]) -}
738bfead027f3562814ff2cac62d8a95
  hoareTest1 ::
    (a -> GHC.Types.Bool)
    -> (a -> a)
    -> (a -> GHC.Types.Bool)
    -> [a]
    -> Data.Semigroup.Internal.All
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(U)><L,C(U)><L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   (precondition :: a -> GHC.Types.Bool)
                   (f :: a -> a)
                   (postcondition :: a -> GHC.Types.Bool)
                   (eta :: [a]) ->
                 letrec {
                   go :: [a] -> Data.Semigroup.Internal.All
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                       : y ys
                       -> case precondition y of wild1 {
                            GHC.Types.False -> go ys
                            GHC.Types.True
                            -> case postcondition (f y) of wild2 {
                                 GHC.Types.False
                                 -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                                 GHC.Types.True -> go ys } } }
                 } in
                 go eta) -}
8980403d0c3ba03c8c0106bd19022b2f
  hoareTestR ::
    GHC.Real.Fractional t =>
    (a -> GHC.Types.Bool)
    -> (a -> a) -> (a -> GHC.Types.Bool) -> [a] -> (GHC.Types.Bool, t)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U(A,A,A,A,A,A,C(U)),C(C1(U)),A,A)><L,C(U)><L,C(U)><L,C(U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ t
                   @ a
                   (w :: GHC.Real.Fractional t)
                   (w1 :: a -> GHC.Types.Bool)
                   (w2 :: a -> a)
                   (w3 :: a -> GHC.Types.Bool)
                   (w4 :: [a]) ->
                 case Lecture2.$whoareTestR
                        @ t
                        @ a
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
805ab470e182324311b866f5173b3f20
  invarTest ::
    (a -> GHC.Types.Bool) -> (a -> a) -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.invarTest1
                  `cast`
                (forall (a :: <*>_N).
                 <a -> GHC.Types.Bool>_R
                 ->_R <a -> a>_R
                 ->_R <[a]>_R
                 ->_R Data.Semigroup.Internal.N:All[0]) -}
53c70c85c9980a8cd62460562ece1a21
  invarTest1 ::
    (a -> GHC.Types.Bool)
    -> (a -> a) -> [a] -> Data.Semigroup.Internal.All
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (invar :: a -> GHC.Types.Bool) (f :: a -> a) ->
                 Lecture2.hoareTest1 @ a invar f invar) -}
a750b81b35d1c7d3b6ea0e62db28da29
  invarTestR ::
    GHC.Real.Fractional t =>
    (a -> GHC.Types.Bool) -> (a -> a) -> [a] -> (GHC.Types.Bool, t)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(A,A,A,A,A,A,C(U)),C(C1(U)),A,A)><L,C(U)><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   @ a
                   ($dFractional :: GHC.Real.Fractional t)
                   (invar :: a -> GHC.Types.Bool)
                   (f :: a -> a) ->
                 Lecture2.hoareTestR @ t @ a $dFractional invar f invar) -}
30efabc005c0d319cd941a7b6b6814fd
  isTrue :: a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: a) -> GHC.Types.True) -}
81da5d53fcdb067b63c5097431295c92
  neg :: (a -> GHC.Types.Bool) -> a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (p :: a -> GHC.Types.Bool) (x :: a) ->
                 case p x of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
78037195d19d022c25629741bfdb8806
  parity :: GHC.Real.Integral a => a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLC(C(S))LLL),U(1*U(1*U(A,A,A,A,A,A,1*C1(U)),A,A),A,A,A,A,1*C1(C1(U)),A,A,A)><L,U>,
     Unfolding: (\ @ a ($dIntegral :: GHC.Real.Integral a) (eta :: a) ->
                 GHC.Real.mod
                   @ a
                   $dIntegral
                   eta
                   (GHC.Num.fromInteger
                      @ a
                      (GHC.Real.$p1Real @ a (GHC.Real.$p1Integral @ a $dIntegral))
                      Lecture2.parity1)) -}
6b47ddd2f12667cef627c312ea1f6739
  parity' :: GHC.Real.Integral a => a -> a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LS(S(C(C(S))L)LLLLLLL)L)LLLLLLLL),U(U(U(A,A,A,A,A,A,C(U)),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A,A,A),A),A,A,A,A,C(C1(U)),A,A,A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dIntegral :: GHC.Real.Integral a)
                   (eta :: a)
                   (eta1 :: a) ->
                 GHC.Classes.==
                   @ a
                   (GHC.Classes.$p1Ord
                      @ a
                      (GHC.Real.$p2Real @ a (GHC.Real.$p1Integral @ a $dIntegral)))
                   (Lecture2.parity @ a $dIntegral eta)
                   (Lecture2.parity @ a $dIntegral eta1)) -}
ba957cb8be8a1e91cfac2e54cc79a298
  parity1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
7cc2e88dda7d4052eca0a4606f2c0753
  prop_ordered :: GHC.Classes.Ord a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)><S,1*U> -}
f5f5341c1e0adcd33d8eb2c6c2366be5
  quicksort :: GHC.Classes.Ord a => [a] -> [a]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(C1(U)),C(C1(U)),A,A,A)><S,1*U> -}
0d7cabcf0ab5d8150beb931a0814c1f1
  quicksrt :: GHC.Classes.Ord a => [a] -> [a]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,C(C1(U)),A,A,A)><S,1*U> -}
25c5662429b5a87e1b1d1a02e1eba6dc
  randomFlip :: GHC.Types.Int -> GHC.Types.IO GHC.Types.Int
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.randomFlip1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R)) -}
8f88e72bb932e8aa0d0cc64f9cd82c07
  randomFlip1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lecture2.genIntList5
                        Lecture2.randomFlip2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { GHC.Types.I# x1 ->
                 case x1 of wild1 {
                   DEFAULT -> (# ipv, GHC.Num.$fNumInt_$cnegate x #)
                   0# -> (# ipv, x #) } } }) -}
7094353acb9fea734c990def8a3c9848
  randomFlip2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
05551417d5176cf0d090307104812166
  samelength :: [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (xs :: [GHC.Types.Int]) (ys :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int xs 0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int ys 0# of ww1 { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# ww2 ww1) } }) -}
4c551e650a6fdcd24b6d9e1bd56e5b42
  stronger ::
    [a]
    -> (a -> GHC.Types.Bool) -> (a -> GHC.Types.Bool) -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.compar9
                  `cast`
                (forall (a :: <*>_N).
                 <[a]>_R
                 ->_R <a -> GHC.Types.Bool>_R
                 ->_R <a -> GHC.Types.Bool>_R
                 ->_R Data.Semigroup.Internal.N:All[0]) -}
11ad78830738ce7db3c1be7b4cd977a2
  test :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.test1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
da878e4974d3fd3d78bd2ab335ac5b0d
  test1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$w$squickCheckWithResult
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Lecture2.test2
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))
                        s of ds3 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
880dda0258f1e3d8cc36f18b09a9840d
  test2 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (r :: Test.QuickCheck.Random.QCGen)
                   (n :: GHC.Types.Int)[OneShot] ->
                 case r `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.onRose
                   @ Test.QuickCheck.Property.Result
                   Test.QuickCheck.Property.$fTestable()1
                   (Test.QuickCheck.Property.$fApplicativeRose_$cfmap
                      @ Test.QuickCheck.Property.Result
                      @ Test.QuickCheck.Property.Result
                      Test.QuickCheck.Property.verbose1
                      (Test.QuickCheck.Property.$wforAllShrink
                         @ GHC.Types.Int
                         @ Test.QuickCheck.Property.Property
                         GHC.Show.$fShowInt
                         Test.QuickCheck.Property.$fTestableProperty1
                           `cast`
                         ((<Test.QuickCheck.Property.Property>_R
                           ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                         <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                       <Test.QuickCheck.Property.Property>_N))
                         Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                           `cast`
                         (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                         Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sshrinkIntegral
                         Lecture2.test3
                         ww1
                         ww2
                         ww3
                         ww4
                         n)) }) -}
1fb62ddb48c28df01b62878ab11c6798
  test3 :: GHC.Types.Int -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Lecture2.$wf ww1 }) -}
cb926c85051c29b91199c6f6cf735dee
  testInvar ::
    GHC.Classes.Eq b => (a -> b) -> (a -> a) -> [a] -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,C(U)><L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.testInvar1
                  `cast`
                (forall (b :: <*>_N) (a :: <*>_N).
                 <GHC.Classes.Eq b>_R
                 ->_R <a -> b>_R
                 ->_R <a -> a>_R
                 ->_R <[a]>_R
                 ->_R Data.Semigroup.Internal.N:All[0]) -}
7bfde862af0c59081a3cb7705656fdb0
  testInvar1 ::
    GHC.Classes.Eq b =>
    (a -> b) -> (a -> a) -> [a] -> Data.Semigroup.Internal.All
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,C(U)><L,C(U)><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   ($dEq :: GHC.Classes.Eq b)
                   (specf :: a -> b)
                   (eta :: a -> a)
                   (eta1 :: [a]) ->
                 letrec {
                   go :: [a] -> Data.Semigroup.Internal.All
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                       : y ys
                       -> case GHC.Classes.==
                                 @ b
                                 $dEq
                                 (specf y)
                                 (specf (eta y)) of wild1 {
                            GHC.Types.False
                            -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                            GHC.Types.True -> go ys } }
                 } in
                 go eta1) -}
6d6b79b1364f24ac8d63b928d09bad4f
  testPost ::
    ([GHC.Types.Int] -> [GHC.Types.Int])
    -> ([GHC.Types.Int] -> GHC.Types.Bool) -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,C(U)><L,C(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.testPost1
                  `cast`
                (<[GHC.Types.Int] -> [GHC.Types.Int]>_R
                 ->_R <[GHC.Types.Int] -> GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c02a964626d71e49f4f2f0798acd93af
  testPost' ::
    ([GHC.Types.Int] -> [GHC.Types.Int])
    -> ([GHC.Types.Int] -> GHC.Types.Bool) -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,C(U)><L,C(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.testPost'1
                  `cast`
                (<[GHC.Types.Int] -> [GHC.Types.Int]>_R
                 ->_R <[GHC.Types.Int] -> GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
465e036c46ecace09af749e23e4ef2ee
  testPost'1 ::
    ([GHC.Types.Int] -> [GHC.Types.Int])
    -> ([GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,C(U)><L,C(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: [GHC.Types.Int] -> [GHC.Types.Int])
                   (p :: [GHC.Types.Int] -> GHC.Types.Bool)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Lecture2.testPost'2
                   Lecture2.randomFlip2
                   Lecture2.testPost2
                   f
                   (\ (ds :: [GHC.Types.Int]) -> p)
                   eta) -}
8f70a1321d22bf5225a3d2a8e574d69e
  testPost'2 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> ([GHC.Types.Int] -> [GHC.Types.Int])
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><L,C(U)><L,C(C1(U))><S,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: [GHC.Types.Int] -> [GHC.Types.Int])
                   (w3 :: [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Lecture2.$wtestR' ww1 ww3 w2 w3 w4 } }) -}
4e975c7bfffcdfe72a8a2818144a93c9
  testPost1 ::
    ([GHC.Types.Int] -> [GHC.Types.Int])
    -> ([GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,C(U)><L,C(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: [GHC.Types.Int] -> [GHC.Types.Int])
                   (p :: [GHC.Types.Int] -> GHC.Types.Bool)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Lecture2.testPost3
                   Lecture2.randomFlip2
                   Lecture2.testPost2
                   f
                   (\ (ds :: [GHC.Types.Int]) -> p)
                   eta) -}
b7be5c486c618bb9d39cbfb8b846464e
  testPost2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 100#) -}
fa34f1dc05f78363c5e19c818edf94d2
  testPost3 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> ([GHC.Types.Int] -> [GHC.Types.Int])
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><L,C(U)><L,C(C1(U))><S,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: [GHC.Types.Int] -> [GHC.Types.Int])
                   (w3 :: [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Lecture2.$wtestR ww1 ww3 w2 w3 w4 } }) -}
c4d3feb708f842872913af6e4ce963cf
  testR ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> ([GHC.Types.Int] -> [GHC.Types.Int])
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><L,C(U)><L,C(C1(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.testPost3
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <[GHC.Types.Int] -> [GHC.Types.Int]>_R
                 ->_R <[GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
bae60fa4adcb9bf3d9e4966ee5d2e91a
  testR' ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> ([GHC.Types.Int] -> [GHC.Types.Int])
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><L,C(U)><L,C(C1(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.testPost'2
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <[GHC.Types.Int] -> [GHC.Types.Int]>_R
                 ->_R <[GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c7833049c75ea223036853d81af60924
  testRel ::
    (a -> a -> GHC.Types.Bool) -> (a -> a) -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.testRel1
                  `cast`
                (forall (a :: <*>_N).
                 <a -> a -> GHC.Types.Bool>_R
                 ->_R <a -> a>_R
                 ->_R <[a]>_R
                 ->_R Data.Semigroup.Internal.N:All[0]) -}
1075bdeb854e2a4d427f7555720a2fb6
  testRel1 ::
    (a -> a -> GHC.Types.Bool)
    -> (a -> a) -> [a] -> Data.Semigroup.Internal.All
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,C(U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (spec :: a -> a -> GHC.Types.Bool)
                   (f :: a -> a)
                   (eta :: [a]) ->
                 letrec {
                   go :: [a] -> Data.Semigroup.Internal.All <join 1> {- Arity: 1 -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                       : y ys
                       -> case spec y (f y) of wild1 {
                            GHC.Types.False
                            -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                            GHC.Types.True -> go ys } }
                 } in
                 go eta) -}
567f84caa7fdaaf24d621bdd1b17c8ac
  testRl ::
    ([GHC.Types.Int] -> [GHC.Types.Int])
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,C(U)><L,C(C1(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.testRl1
                  `cast`
                (<[GHC.Types.Int] -> [GHC.Types.Int]>_R
                 ->_R <[GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
55ea93ce55932a6b43d6d3bba4e81330
  testRl' ::
    ([GHC.Types.Int] -> [GHC.Types.Int])
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,C(U)><L,C(C1(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.testRl'1
                  `cast`
                (<[GHC.Types.Int] -> [GHC.Types.Int]>_R
                 ->_R <[GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
200205927bbbfacf12647fc8f5dc1e22
  testRl'1 ::
    ([GHC.Types.Int] -> [GHC.Types.Int])
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,C(U)><L,C(C1(U))><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: [GHC.Types.Int] -> [GHC.Types.Int])
                   (r :: [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Lecture2.testPost'2
                   Lecture2.randomFlip2
                   Lecture2.testPost2
                   f
                   r
                   eta) -}
676f02e347e1a0f8fbbc63965efac430
  testRl1 ::
    ([GHC.Types.Int] -> [GHC.Types.Int])
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,C(U)><L,C(C1(U))><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: [GHC.Types.Int] -> [GHC.Types.Int])
                   (r :: [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Lecture2.testPost3
                   Lecture2.randomFlip2
                   Lecture2.testPost2
                   f
                   r
                   eta) -}
2278bf5f4b4bd82946015a679a84790a
  weaker ::
    [a]
    -> (a -> GHC.Types.Bool) -> (a -> GHC.Types.Bool) -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Lecture2.weaker1
                  `cast`
                (forall (a :: <*>_N).
                 <[a]>_R
                 ->_R <a -> GHC.Types.Bool>_R
                 ->_R <a -> GHC.Types.Bool>_R
                 ->_R Data.Semigroup.Internal.N:All[0]) -}
66700ab93edd65e6ed19b594aabdf9f3
  weaker1 ::
    [a]
    -> (a -> GHC.Types.Bool)
    -> (a -> GHC.Types.Bool)
    -> Data.Semigroup.Internal.All
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,C(U)>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (xs :: [a])
                   (p :: a -> GHC.Types.Bool)
                   (q :: a -> GHC.Types.Bool) ->
                 Lecture2.compar9 @ a xs q p) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

