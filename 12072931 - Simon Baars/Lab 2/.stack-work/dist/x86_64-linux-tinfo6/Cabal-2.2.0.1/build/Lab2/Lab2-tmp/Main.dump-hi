
==================== FINAL INTERFACE ====================
2018-09-17 19:02:17.703312953 UTC

interface main:Main 8043
  interface hash: cccdbf4703a2263bc19b351988cc9da9
  ABI hash: 1a9a8f0e67af776f09d46362002454b3
  export-list hash: b5cea12dc373cc881c6c350eeec30d96
  orphan hash: fa411082c6365fec24248e321ba658ab
  flag hash: 8e9ed84417c9432185130cd9861fe2b6
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.calcQuartile
  Main.checkTestResult
  Main.checkTriangleFunction
  Main.deran
  Main.derangementProperties
  Main.derangementTestList
  Main.derangementTestListTwo
  Main.domain
  Main.genBigNumbers
  Main.getAmountInQuartile
  Main.isDerangement
  Main.isPermutation
  Main.isPythagorean
  Main.main
  Main.p1
  Main.p2
  Main.p3
  Main.p4
  Main.permutationProperties
  Main.permutationTestList
  Main.propAllDeranRotations
  Main.propAllDeranSmaller
  Main.propAllRotations
  Main.propAllSmaller
  Main.propAllSwapped
  Main.propBigger
  Main.propDeranBigger
  Main.propDeranIncreased
  Main.propDeranReversed
  Main.propDeranRotated
  Main.propDeranSmaller
  Main.propDeranSwapped
  Main.propIncreased
  Main.propListOfSize
  Main.propReversed
  Main.propRotated
  Main.propSmaller
  Main.propSwapped
  Main.properties
  Main.rotate
  Main.swapAt
  Main.testDerangements
  Main.testPermutations
  Main.testQuartiles
  Main.testQuartilesSafe
  Main.testTriangle
  Main.triangle
  Main.triangleType
  Main.withinPercentage
  Main.Prop{Main.Prop name propertyFunction}
module dependencies: Lab2 Lecture2
package dependencies: QuickCheck-2.11.3 array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 pretty-1.1.3.6
                      primitive-0.6.3.0 random-1.1 template-haskell-2.13.0.0
                      tf-random-0.5 time-1.8.0.2 transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck e00d138ee3234e83a31cc3113c8c8ffb
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Arbitrary 749c030890709ce50a65277c8ad56400
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Gen 18d7f741d47ea7234320fe42d69d1321
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Property 2a2442debcbf309292a12478b176466b
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Test 5c80e8a0569651177c75db83b77c7ff4
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.IO.Unsafe c1dfcbb6f65c5fb985b7e5159499b64e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  base-4.11.1.0:System.IO.Unsafe 0a2eb33ad4988fdd87ebf1fb8b419957
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  Lab2 58f142ce979bc82be2c0114c7ac77986
  exports: a5316334a3f9b37ecaea00f9011fdb2b
  --> b3887377deb1d7cc8d1a797733886330
  Equilateral 94296fdd9c3a7b05802aa923c5acc5ae
  Isosceles 8e00bd96027c5cbc0c9b960f3f0d9e4c
  NoTriangle 4bc4364a91974b4106482aeeb9f45dd0
  Other 171209b09813ee871e1c78906bc1342a
  Rectangular ebc803140599615cc2f652994ae189b5
  Shape 4f321edfbfaf3dc5f384e8b53049cebc
  probs 93788a82fb6e0e80b0f083ea2b1d6786
import  -/  Lecture2 217d1f81d64de0e9de04f332a47a0619
  exports: d9f76553a58edbff754f00d8da3dde40
  quicksort f5f5341c1e0adcd33d8eb2c6c2366be5
  stronger 4c551e650a6fdcd24b6d9e1bd56e5b42
  weaker 2278bf5f4b4bd82946015a679a84790a
import  -/  random-1.1:System.Random 31994b60c33f032d578c64a928f735f7
b54fc46995c11ea29c858432669f8509
  $fEqProp :: GHC.Classes.Eq (Main.Prop a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Main.Prop a)
                  (Main.$fEqProp_$c== @ a)
                  (Main.$fEqProp_$c/= @ a) -}
b54fc46995c11ea29c858432669f8509
  $fEqProp_$c/= :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case x of wild { Main.Prop ds ds1 ->
                 case y of wild1 { Main.Prop ds2 ds3 ->
                 case GHC.Base.eqString ds ds2 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
b54fc46995c11ea29c858432669f8509
  $fEqProp_$c== :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (y :: Main.Prop a) (z :: Main.Prop a) ->
                 case y of wild { Main.Prop ds ds1 ->
                 case z of wild1 { Main.Prop ds2 ds3 ->
                 GHC.Base.eqString ds ds2 } }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp :: GHC.Classes.Ord (Main.Prop a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Main.Prop a)
                  (Main.$fEqProp @ a)
                  (Main.$fOrdProp_$ccompare @ a)
                  (Main.$fOrdProp_$c< @ a)
                  (Main.$fOrdProp_$c<= @ a)
                  (Main.$fOrdProp_$c> @ a)
                  (Main.$fOrdProp_$c>= @ a)
                  (Main.$fOrdProp_$cmax @ a)
                  (Main.$fOrdProp_$cmin @ a) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$c< :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$c<= :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$c> :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$c>= :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$ccompare ::
    Main.Prop a -> Main.Prop a -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Main.Prop a) (w1 :: Main.Prop a) ->
                 case w of ww { Main.Prop ww1 ww2 ->
                 case w1 of ww3 { Main.Prop ww4 ww5 ->
                 Main.$w$ccompare @ a ww2 ww5 } }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$cmax :: Main.Prop a -> Main.Prop a -> Main.Prop a
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$cmin :: Main.Prop a -> Main.Prop a -> Main.Prop a
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
b54fc46995c11ea29c858432669f8509
  $fShowProp :: GHC.Show.Show (Main.Prop a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Main.Prop a)
                  (Main.$fShowProp_$cshowsPrec @ a)
                  (Main.name @ a)
                  (Main.$fShowProp_$cshowList @ a) -}
b54fc46995c11ea29c858432669f8509
  $fShowProp1 :: Main.Prop a -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (s :: GHC.Base.String)[OneShot] ->
                 case x of wild { Main.Prop ds ds1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n ds)
                   s }) -}
b54fc46995c11ea29c858432669f8509
  $fShowProp_$cshowList :: [Main.Prop a] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (ls :: [Main.Prop a]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ (Main.Prop a) (Main.$fShowProp1 @ a) ls s) -}
b54fc46995c11ea29c858432669f8509
  $fShowProp_$cshowsPrec ::
    GHC.Types.Int -> Main.Prop a -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(SL),1*U(1*U,A)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (ds :: GHC.Types.Int)
                   (x :: Main.Prop a)
                   (s :: GHC.Base.String) ->
                 case x of wild { Main.Prop ds1 ds2 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n ds1)
                   s }) -}
2337f19ee379498eb4859440d993f4a7
  $seven :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 case n of wild2 { GHC.Types.I# x1 ->
                 case GHC.Prim.remInt# x1 2# of wild {
                   DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } }) -}
5fea766bb3a4961f440c55ba7beee693
  $tc'Prop :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11664713279280497732##
                   13337821378297450670##
                   Main.$trModule
                   Main.$tc'Prop2
                   1#
                   Main.$tc'Prop1) -}
97bcfedd624d57d950a6ed209b3fa858
  $tc'Prop1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5fc1d23d6c2364a801a6a0efbb01c831
  $tc'Prop2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Prop3) -}
e3af92953143f3ad462661951481250f
  $tc'Prop3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Prop"#) -}
949258bb665bb0e85392c67367c3d15b
  $tcProp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5185905648462801233##
                   3706247735825240864##
                   Main.$trModule
                   Main.$tcProp1
                   0#
                   GHC.Types.krep$*Arr*) -}
46fbfbb647034517711aca03e554f559
  $tcProp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcProp2) -}
8abd6cc7e399189ad139ebe12ef4c8a1
  $tcProp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prop"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
b6204f68714a5784cbcd53962008d007
  $w$ccompare ::
    (GHC.Types.Int -> GHC.Types.Bool)
    -> (GHC.Types.Int -> GHC.Types.Bool) -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <L,C(U)><L,C(U)>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Types.Int -> GHC.Types.Bool)
                   (ww1 :: GHC.Types.Int -> GHC.Types.Bool) ->
                 case (Lecture2.compar9 @ GHC.Types.Int Main.domain ww1 ww)
                        `cast`
                      (Data.Semigroup.Internal.N:All[0]) of wild {
                   GHC.Types.False
                   -> case (Lecture2.compar9 @ GHC.Types.Int Main.domain ww ww1)
                             `cast`
                           (Data.Semigroup.Internal.N:All[0]) of wild1 {
                        GHC.Types.False -> GHC.Types.EQ GHC.Types.True -> GHC.Types.LT }
                   GHC.Types.True -> GHC.Types.GT }) -}
69b6ca754c4d4f6dfa60b61f28f7810c
  $wderangementProperties :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   origList :: [GHC.Types.Int] = GHC.Enum.eftInt 1# ww
                 } in
                 Main.deran_$sisDerangement
                   origList
                   (GHC.Base.map
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      Main.derangementProperties8
                      origList)) -}
8c0460d39fe9246820451f5a38cbad96
  $wderangementProperties1 :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   origList :: [GHC.Types.Int] = GHC.Enum.eftInt 1# ww
                 } in
                 Main.deran_$sisDerangement
                   origList
                   (GHC.Types.:
                      @ GHC.Types.Int
                      Main.derangementProperties13
                      origList)) -}
33374161ef64d80552e063d6f47d08d6
  $wderangementProperties2 :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   origList :: [GHC.Types.Int] = GHC.Enum.eftInt 1# ww
                 } in
                 Main.deran_$sisDerangement
                   origList
                   (GHC.List.reverse1
                      @ GHC.Types.Int
                      origList
                      (GHC.Types.[] @ GHC.Types.Int))) -}
835ebed4606aa92964498d0d376afba1
  $wgenBigNumbers ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 Test.QuickCheck.Gen.$wsuchThat
                   @ GHC.Types.Int
                   Main.genBigNumbers3
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   Main.genBigNumbers2
                   ww
                   ww1
                   ww2
                   ww3
                   ww4) -}
7b4508a1d6c66093374439b08a9fef83
  $wp4 :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.remInt# ww 2# of wild {
                   DEFAULT -> GHC.Types.False 0# -> GHC.Types.True }) -}
1dde57a6725c3d6a5847332f46de02dd
  $wpermutationProperties :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   origList :: [GHC.Types.Int] = GHC.Enum.eftInt 1# ww
                 } in
                 Main.deran_$sisPermutation
                   origList
                   (GHC.Base.map
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      Main.derangementProperties8
                      origList)) -}
9eb2ce46470ee428bf2aaff5c09f359e
  $wpermutationProperties1 :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   origList :: [GHC.Types.Int] = GHC.Enum.eftInt 1# ww
                 } in
                 Main.deran_$sisPermutation
                   origList
                   (GHC.Types.:
                      @ GHC.Types.Int
                      Main.derangementProperties13
                      origList)) -}
ecfd993c674e5ef807dfdc25d94fc8f6
  $wpermutationProperties2 :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   origList :: [GHC.Types.Int] = GHC.Enum.eftInt 1# ww
                 } in
                 Main.deran_$sisPermutation
                   origList
                   (GHC.List.reverse1
                      @ GHC.Types.Int
                      origList
                      (GHC.Types.[] @ GHC.Types.Int))) -}
819a7c3ad4d5864cdc92822d45678ad9
  $wpropDeranSmaller ::
    GHC.Classes.Eq a => GHC.Prim.Int# -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)))><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: [a]) ->
                 case GHC.Prim.<# 0# ww of lwild {
                   DEFAULT -> Main.isDerangement @ a w w1 (GHC.Types.[] @ a)
                   1#
                   -> Main.isDerangement
                        @ a
                        w
                        w1
                        (GHC.List.$wunsafeTake @ a ww w1) }) -}
460b506014e58dd377ce5fa49caacf4a
  $wpropSmaller ::
    GHC.Classes.Eq a => GHC.Prim.Int# -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: [a]) ->
                 case GHC.Prim.<# 0# ww of lwild {
                   DEFAULT -> Main.isPermutation @ a w w1 (GHC.Types.[] @ a)
                   1#
                   -> Main.isPermutation
                        @ a
                        w
                        w1
                        (GHC.List.$wunsafeTake @ a ww w1) }) -}
9dd4910d2fe75ef70d20d9b3db1edd88
  $wswapAt :: GHC.Prim.Int# -> [a] -> [a]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ @ a (ww :: GHC.Prim.Int#) (w :: [a]) ->
                 let {
                   swapPos :: [a]
                   = case GHC.Prim.<=# ww 0# of lwild {
                       DEFAULT -> Main.$wunsafeDrop @ a ww w 1# -> w }
                 } in
                 let {
                   swapWithPos :: [a] = Main.$wunsafeDrop @ a 1# swapPos
                 } in
                 let {
                   n :: a
                   = case swapWithPos of wild {
                       [] -> GHC.List.badHead @ a : x ds1 -> x }
                 } in
                 let {
                   n1 :: a
                   = case swapPos of wild { [] -> GHC.List.badHead @ a : x ds1 -> x }
                 } in
                 let {
                   n2 :: [a]
                   = case swapWithPos of wild {
                       [] -> GHC.List.scanl2 @ a : ds1 xs -> xs }
                 } in
                 let {
                   n3 :: [a] = GHC.Types.: @ a n1 n2
                 } in
                 let {
                   n4 :: [a] = GHC.Types.: @ a n n3
                 } in
                 case GHC.Prim.<# 0# ww of lwild {
                   DEFAULT -> n4
                   1#
                   -> letrec {
                        $wgo :: [a] -> GHC.Prim.Int# -> [a]
                          {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                        = \ (w1 :: [a]) (ww1 :: GHC.Prim.Int#) ->
                          case w1 of wild {
                            [] -> n4
                            : y ys
                            -> case ww1 of ds1 {
                                 DEFAULT -> GHC.Types.: @ a y ($wgo ys (GHC.Prim.-# ds1 1#))
                                 1# -> GHC.Types.: @ a y n4 } }
                      } in
                      $wgo w ww }) -}
cbf756deeaabd8389e201f54b006623d
  $wtestQuartiles :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.># ww 100# of lwild {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
                             (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.noDuplicate#
                                     @ GHC.Prim.RealWorld
                                     s of s' { DEFAULT ->
                              case Lab2.$wprobs ww s' of ds1 { (#,#) ipv ipv1 ->
                              (# ipv,
                                 Main.calcQuartile
                                   ipv1
                                   Main.getAmountInQuartile2 #) } }) of ds { (#,#) ipv ipv1 ->
                      let {
                        lvl5 :: GHC.Prim.Int# = GHC.Prim.uncheckedIShiftRA# ww 2#
                      } in
                      let {
                        lvl6 :: GHC.Types.Int
                        = case GHC.Classes.divInt# lvl5 100# of v { DEFAULT ->
                          GHC.Types.I# v }
                      } in
                      letrec {
                        go :: [GHC.Types.Int] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds1 :: [GHC.Types.Int]) ->
                          case ds1 of wild {
                            [] -> GHC.Types.True
                            : y ys
                            -> case lvl6 of v { GHC.Types.I# v1 ->
                               case y of wild1 { GHC.Types.I# x ->
                               let {
                                 y1 :: GHC.Prim.Int# = GHC.Prim.*# v1 25#
                               } in
                               case GHC.Prim.>=#
                                      x
                                      (GHC.Prim.-# (GHC.Prim.-# lvl5 y1) 1#) of lwild1 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> case GHC.Prim.<=#
                                           x
                                           (GHC.Prim.+# (GHC.Prim.+# lvl5 y1) 1#) of lwild2 {
                                      DEFAULT -> GHC.Types.False 1# -> go ys } } } } }
                      } in
                      go ipv1 } }) -}
6dae98b665c4d2765e1872374062948f
  $wtestQuartilesSafe ::
    GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lab2.$wprobs ww w of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case GHC.Prim.># ww 0# of lwild {
                      DEFAULT -> GHC.Types.True
                      1#
                      -> let {
                           lvl5 :: GHC.Prim.Int# = GHC.Prim.uncheckedIShiftRA# ww 2#
                         } in
                         let {
                           lvl6 :: GHC.Types.Int
                           = case GHC.Classes.divInt# lvl5 100# of v { DEFAULT ->
                             GHC.Types.I# v }
                         } in
                         letrec {
                           go :: [GHC.Types.Int] -> GHC.Types.Bool
                             <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds :: [GHC.Types.Int]) ->
                             case ds of wild {
                               [] -> GHC.Types.True
                               : y ys
                               -> case lvl6 of v { GHC.Types.I# v1 ->
                                  case y of wild1 { GHC.Types.I# x ->
                                  let {
                                    y1 :: GHC.Prim.Int# = GHC.Prim.*# v1 10#
                                  } in
                                  case GHC.Prim.>=#
                                         x
                                         (GHC.Prim.-# (GHC.Prim.-# lvl5 y1) 1#) of lwild1 {
                                    DEFAULT -> GHC.Types.False
                                    1#
                                    -> case GHC.Prim.<=#
                                              x
                                              (GHC.Prim.+# (GHC.Prim.+# lvl5 y1) 1#) of lwild2 {
                                         DEFAULT -> GHC.Types.False 1# -> go ys } } } } }
                         } in
                         go (Main.calcQuartile ipv1 Main.getAmountInQuartile2) } #) }) -}
1eae4f6737fb333a6b4dbefb66f1d832
  $wtriangleType ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger#
                        (GHC.Integer.Type.plusInteger ww ww1)
                        ww2 of wild {
                   DEFAULT
                   -> case GHC.Integer.Type.ltInteger#
                             (GHC.Integer.Type.plusInteger ww1 ww2)
                             ww of wild1 {
                        DEFAULT
                        -> case GHC.Integer.Type.ltInteger#
                                  (GHC.Integer.Type.plusInteger ww2 ww)
                                  ww1 of wild2 {
                             DEFAULT
                             -> case GHC.Integer.Type.eqInteger# ww ww1 of wild3 { DEFAULT ->
                                let {
                                  $j :: GHC.Base.String <join 0>
                                  = case Main.isPythagorean ww ww1 ww2 of wild4 {
                                      GHC.Types.False
                                      -> case Main.isPythagorean ww1 ww2 ww of wild5 {
                                           GHC.Types.False
                                           -> case Main.isPythagorean ww2 ww ww1 of wild6 {
                                                GHC.Types.False
                                                -> case wild3 of wild7 {
                                                     DEFAULT
                                                     -> case GHC.Integer.Type.eqInteger#
                                                               ww1
                                                               ww2 of wild8 {
                                                          DEFAULT
                                                          -> case GHC.Integer.Type.eqInteger#
                                                                    ww2
                                                                    ww of wild9 {
                                                               DEFAULT -> Main.triangle9
                                                               1# -> Main.triangle5 }
                                                          1# -> Main.triangle5 }
                                                     1# -> Main.triangle5 }
                                                GHC.Types.True -> Main.triangle1 }
                                           GHC.Types.True -> Main.triangle1 }
                                      GHC.Types.True -> Main.triangle1 }
                                } in
                                case wild3 of lwild {
                                  DEFAULT -> $j
                                  1#
                                  -> case GHC.Integer.Type.eqInteger# ww1 ww2 of wild4 {
                                       DEFAULT -> $j
                                       1#
                                       -> case GHC.Integer.Type.eqInteger# ww2 ww of wild5 {
                                            DEFAULT -> $j 1# -> Main.triangle7 } } } }
                             1# -> Main.triangle3 }
                        1# -> Main.triangle3 }
                   1# -> Main.triangle3 }) -}
00bb2257859340c278f030fbdf7c8098
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
b54fc46995c11ea29c858432669f8509
  type role Prop phantom
  data Prop a
    = Prop {name :: GHC.Base.String,
            propertyFunction :: GHC.Types.Int -> GHC.Types.Bool}
983c1c5ceb5ccc6f7e3e04af5a358742
  calcQuartile ::
    [GHC.Types.Float] -> [GHC.Types.Float] -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
1360b2fe0904050bab925ba79003f352
  checkTestResult :: GHC.Types.Bool -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Bool) ->
                 case ds of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
07e9afa9026195e449fc2901f6e320ce
  checkTestResult1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkTestResult2) -}
fd977f4fe81bf76dcfad9cba3419444e
  checkTestResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test succeeded!"#) -}
4169382264dc63218ac46fc6f81064e7
  checkTestResult3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkTestResult4) -}
50f4966c81758abf29b6b8f80753cc03
  checkTestResult4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test failed!"#) -}
f259455213a5f5374054d0926c228555
  checkTriangleFunction ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Lab2.Shape
    -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <S,U><S,U><S,U><S,U> -}
ed04e84577a3746c659fcb0c4cd6c1e2
  deran :: [GHC.Types.Int] -> [[GHC.Types.Int]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: (\ (x :: [GHC.Types.Int]) ->
                 GHC.List.filter
                   @ [GHC.Types.Int]
                   (\ (ds :: [GHC.Types.Int]) -> Main.deran_$sisDerangement ds x)
                   (GHC.Types.:
                      @ [GHC.Types.Int]
                      x
                      (Data.OldList.permutations1
                         @ GHC.Types.Int
                         x
                         (GHC.Types.[] @ GHC.Types.Int)))) -}
28cda7a5df15bc54fde07418c9dba5a0
  deran_$sisDerangement ::
    [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: (\ (x :: [GHC.Types.Int]) (y :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int x 0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int y 0# of ww1 { DEFAULT ->
                 case GHC.Prim.==# ww2 ww1 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case Main.deran_$sisPermutation x y of wild {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> Main.deran_go2 x y } } } }) -}
7df0fe66b662b21360109c4b0a98b94f
  deran_$sisPermutation ::
    [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: (\ (x :: [GHC.Types.Int]) (y :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int x 0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int y 0# of ww1 { DEFAULT ->
                 case GHC.Prim.==# ww2 ww1 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> letrec {
                        go :: [GHC.Types.Int] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [GHC.Types.Int]) ->
                          case ds of wild {
                            [] -> GHC.Types.True
                            : y1 ys
                            -> letrec {
                                 $wgo :: [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Prim.Int#
                                   {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                                 = \ (w :: [GHC.Types.Int]) (ww :: GHC.Prim.Int#) ->
                                   case w of wild1 {
                                     [] -> ww
                                     : y2 ys1
                                     -> case y2 of wild2 { GHC.Types.I# x1 ->
                                        case y1 of wild3 { GHC.Types.I# y3 ->
                                        case GHC.Prim.==# x1 y3 of lwild1 {
                                          DEFAULT -> $wgo ys1 ww
                                          1# -> $wgo ys1 (GHC.Prim.+# ww 1#) } } } }
                               } in
                               case $wgo x 0# of ww { DEFAULT ->
                               case $wgo y 0# of ww3 { DEFAULT ->
                               case GHC.Prim.==# ww ww3 of lwild1 {
                                 DEFAULT -> GHC.Types.False 1# -> go ys } } } }
                      } in
                      go x } } }) -}
60b069d475be5090318de9b9e2648586
  deran_go2 :: [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
4aa826fb98a3c0c9b2b58ad8659fcf53
  derangementProperties :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.derangementProperties28 @ a)
                   (Main.derangementProperties1 @ a)) -}
717a6dc8cd3d9012504044f11710c28d
  derangementProperties1 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.derangementProperties24 @ a)
                   (Main.derangementProperties2 @ a)) -}
2e1280c05b63317631bc03bfdeab7679
  derangementProperties10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Increased"#) -}
2be10ce00637747b667efbfdd95bf46a
  derangementProperties11 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties14
                   Main.derangementProperties12) -}
80b33cb2c8b4e6ece60edb79b0134664
  derangementProperties12 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wderangementProperties1 ww1 }) -}
920dc0f3a590b41609eb658bd71e871d
  derangementProperties13 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
0696b4af1d4320a9853edb37dcaeb141
  derangementProperties14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.derangementProperties15) -}
e4ae6758d107faf94e8987957d1d2ee9
  derangementProperties15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bigger"#) -}
044193a6b6e3dbf2249b2d4f2e9fcc39
  derangementProperties16 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties18
                   Main.derangementProperties17) -}
7e46b1b08d5dfce3f31c0497eb6af573
  derangementProperties17 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (size :: GHC.Types.Int) ->
                 case size of wild1 { GHC.Types.I# y ->
                 Main.derangementProperties_$spropAllDeranSmaller
                   (GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n 1# y)) }) -}
10e577919d7558bd21ca203fa232d447
  derangementProperties18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.derangementProperties19) -}
cf12cc512499f16cb17f83a022b126a6
  derangementProperties19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Smaller"#) -}
a17a1ded614b1e2a4744fecaa066a273
  derangementProperties2 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.derangementProperties20 @ a)
                   (Main.derangementProperties3 @ a)) -}
e58e1faadc3a5859aad50bd1448614d5
  derangementProperties20 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties22
                   Main.derangementProperties21) -}
7cec70d2e440e1352b3e74d66d1cc417
  derangementProperties21 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (size :: GHC.Types.Int) ->
                 case size of wild1 { GHC.Types.I# y ->
                 Main.derangementProperties_$spropDeranSwapped
                   (GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n 1# y)) }) -}
3a2d66a1f1eb246e847752d8fc4b5e41
  derangementProperties22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.derangementProperties23) -}
488fe437cdfa728cd5956f269a460e04
  derangementProperties23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Swapped"#) -}
9e8dc0d01e157033ec3c24fb3158231b
  derangementProperties24 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties26
                   Main.derangementProperties25) -}
e221c79c5915d46c8d151ab0fbb850e0
  derangementProperties25 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (size :: GHC.Types.Int) ->
                 case size of wild1 { GHC.Types.I# y ->
                 Main.derangementProperties_$spropAllDeranRotations
                   (GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n 1# y)) }) -}
399c3edbdbddb25101cc7e95573da485
  derangementProperties26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.derangementProperties27) -}
ddd9025ff828b57e2db59c11de942248
  derangementProperties27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rotated"#) -}
e43ceef9b15ea2b156304ea12ae49827
  derangementProperties28 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties30
                   Main.derangementProperties29) -}
f8a049b4fbd84d4b902c90e3174b5945
  derangementProperties29 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wderangementProperties2 ww1 }) -}
8b3d5bf09dca8b19c7821de783aea583
  derangementProperties3 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.derangementProperties16 @ a)
                   (Main.derangementProperties4 @ a)) -}
22fb032f1db885dc428d0299af308e3b
  derangementProperties30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.derangementProperties31) -}
59592e7ad12c7a995eafbfe03b2d281a
  derangementProperties31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Reversed"#) -}
4aac553cf39bfb5f6894f48314fdb550
  derangementProperties4 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.derangementProperties11 @ a)
                   (Main.derangementProperties5 @ a)) -}
95c15b8b50f16cc25a3a4e034ea2844a
  derangementProperties5 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.derangementProperties6 @ a)
                   (GHC.Types.[] @ (Main.Prop a))) -}
faee790c5eb5c631c3bf508d9c37ef00
  derangementProperties6 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties9
                   Main.derangementProperties7) -}
96bbb9549d26349377c04575bde949c4
  derangementProperties7 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wderangementProperties ww1 }) -}
49a4af33193758b07bf35204011783c5
  derangementProperties8 :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# x ->
                 GHC.Types.I# (GHC.Prim.+# x 1#) }) -}
065c546d723330c95ca3639eb7129dbd
  derangementProperties9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.derangementProperties10) -}
2ab372fb5b1db4f97051c754f0a8ced3
  derangementProperties_$spropAllDeranRotations ::
    [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (origList :: [GHC.Types.Int]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case GHC.List.$wlenAcc
                             @ GHC.Types.Int
                             wild
                             0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                      } in
                      case GHC.Prim.># 1# y of lwild {
                        DEFAULT
                        -> letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <L,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case Main.deran_$sisDerangement
                                      wild
                                      (Main.rotate @ GHC.Types.Int (GHC.Types.I# x) wild) of wild1 {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True
                                 -> case GHC.Prim.==# x y of lwild1 {
                                      DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                           } in
                           go 1#
                        1# -> GHC.Types.True } } }) -}
1086584426cdcc94cf53c4ea8190fbd3
  derangementProperties_$spropAllDeranSmaller ::
    [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (origList :: [GHC.Types.Int]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case GHC.List.$wlenAcc
                             @ GHC.Types.Int
                             wild
                             0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                      } in
                      case GHC.Prim.># 1# y of lwild {
                        DEFAULT
                        -> let {
                             lvl5 :: GHC.Types.Bool
                             = Main.deran_$sisDerangement wild (GHC.Types.[] @ GHC.Types.Int)
                           } in
                           letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case GHC.Prim.<# 0# x of lwild1 {
                                 DEFAULT
                                 -> case lvl5 of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild2 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                                 1#
                                 -> case Main.deran_$sisDerangement
                                           wild
                                           (GHC.List.$wunsafeTake @ GHC.Types.Int x wild) of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild2 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#)
                                           1# -> GHC.Types.True } } }
                           } in
                           go 1#
                        1# -> GHC.Types.True } } }) -}
047bdde6ec637d35710fee8001ffd3f8
  derangementProperties_$spropDeranSwapped ::
    [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (origList :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc
                        @ GHC.Types.Int
                        origList
                        0# of ww2 { DEFAULT ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww2 2#
                 } in
                 case GHC.Prim.<# y 2# of lwild {
                   DEFAULT
                   -> Main.deran_$sisDerangement
                        origList
                        (Main.$wswapAt
                           @ GHC.Types.Int
                           0#
                           (let {
                              y' :: GHC.Prim.Int# = GHC.Prim.-# y 2#
                            } in
                            letrec {
                              go_up :: GHC.Prim.Int# -> [GHC.Types.Int]
                                {- Arity: 1, Strictness: <S,U> -}
                              = \ (x :: GHC.Prim.Int#) ->
                                case GHC.Prim.># x y' of lwild1 {
                                  DEFAULT
                                  -> Main.$wswapAt @ GHC.Types.Int x (go_up (GHC.Prim.+# x 2#))
                                  1# -> Main.$wswapAt @ GHC.Types.Int x origList }
                            } in
                            go_up 2#))
                   1#
                   -> case GHC.Prim.<# y 0# of lwild1 {
                        DEFAULT
                        -> Main.deran_$sisDerangement
                             origList
                             (Main.$wswapAt @ GHC.Types.Int 0# origList)
                        1# -> Main.deran_$sisDerangement origList origList } } }) -}
dfaa4fbbcdf9b841a8e83ed4ae6b86f2
  derangementTestList :: [GHC.Types.Int]
  {- Strictness: m2, Unfolding: (Main.permutationTestList) -}
9e3af2ee84c9147d6a0f239f79992b4c
  derangementTestListTwo :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.derangementTestListTwo7
                   Main.derangementTestListTwo1) -}
cca78031cd78a70cc757b3dfea88b863
  derangementTestListTwo1 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.derangementTestListTwo6
                   Main.derangementTestListTwo2) -}
5f88b2e90bcab2406c9ae04dc11ffe75
  derangementTestListTwo2 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.derangementTestListTwo5
                   Main.derangementTestListTwo3) -}
8d41a21faf649ea8071654958d54fdeb
  derangementTestListTwo3 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.derangementTestListTwo4
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
795805d1ec6f1b7242c2e662758c7434
  derangementTestListTwo4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
0c191a1f0c712e5d02c910dc6f6b4601
  derangementTestListTwo5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
28737705889aab0a2e70902be952d9b7
  derangementTestListTwo6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
98e6a0d5f43c44c510075cf255119c15
  derangementTestListTwo7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
439f87fde0c0bced6c431bff02576bf5
  domain :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt -10# 10#) -}
1d5ff3a09539d534f7a5c58adc34d09c
  genBigNumbers :: Test.QuickCheck.Gen.Gen GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.genBigNumbers1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R)) -}
f6364b4636c81c661f12e6d2ab8ec4cd
  genBigNumbers1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$wgenBigNumbers ww1 ww2 ww3 ww4 ww8 } }) -}
05b3eb220256edcf295dfd263358c54c
  genBigNumbers2 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# x ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># x 1000#) }) -}
4f31152f4a88b5bf09001ac54bba68fd
  genBigNumbers3 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 case Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral
                        ww1
                        ww2
                        ww3
                        ww4
                        ww8 of ww9 { DEFAULT ->
                 case GHC.Prim.>=# ww9 0# of lwild {
                   DEFAULT -> GHC.Types.I# (GHC.Prim.negateInt# ww9)
                   1# -> GHC.Types.I# ww9 } } } }) -}
f87ffc90a38bdf25b142b08c5e43f32c
  getAmountInQuartile ::
    GHC.Types.Int -> GHC.Types.IO [GHC.Types.Int]
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getAmountInQuartile1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Types.Int]>_R)) -}
c61e0fe09466a4f80ae3107d71c39b6e
  getAmountInQuartile1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case x of ww { GHC.Types.I# ww1 ->
                 case Lab2.$wprobs ww1 s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, Main.calcQuartile ipv1 Main.getAmountInQuartile2 #) } }) -}
a8ab5a6afd23d27eef1dc8226e21731e
  getAmountInQuartile2 :: [GHC.Types.Float]
  {- Unfolding: (GHC.Real.numericEnumFromThenTo
                   @ GHC.Types.Float
                   GHC.Classes.$fOrdFloat
                   GHC.Float.$fFractionalFloat
                   Main.getAmountInQuartile5
                   Main.getAmountInQuartile4
                   Main.getAmountInQuartile3) -}
59df7f0c0f9d10cc353eb3f30924d76a
  getAmountInQuartile3 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
966ee2eaf7fda2f7cc3cc848f560b5d3
  getAmountInQuartile4 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.25#) -}
e26b34f29ce2f7068141f7d6d6850d3e
  getAmountInQuartile5 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
0d5e12cb4e1ce01e7f0034bf3d2c24b0
  isDerangement :: GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)))><S,U><S,U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: [a])
                   (y :: [a]) ->
                 case GHC.List.$wlenAcc @ a x 0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc @ a y 0# of ww1 { DEFAULT ->
                 case GHC.Prim.==# ww2 ww1 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case Main.isPermutation @ a $dEq x y of wild {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> letrec {
                             go2 :: [a] -> [a] -> GHC.Types.Bool
                               <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                             = \ (ds :: [a]) (_ys :: [a]) ->
                               case ds of wild1 {
                                 [] -> GHC.Types.True
                                 : ipv ipv1
                                 -> case _ys of wild2 {
                                      [] -> GHC.Types.True
                                      : ipv2 ipv3
                                      -> case GHC.Classes./= @ a $dEq ipv ipv2 of wild3 {
                                           GHC.Types.False -> GHC.Types.False
                                           GHC.Types.True -> go2 ipv1 ipv3 } } }
                           } in
                           go2 x y } } } }) -}
fe6960543b7b52a967e51da5270fa831
  isDerangement_$sisDerangement ::
    [GHC.Integer.Type.Integer]
    -> [GHC.Integer.Type.Integer] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: (\ (x :: [GHC.Integer.Type.Integer])
                   (y :: [GHC.Integer.Type.Integer]) ->
                 case GHC.List.$wlenAcc
                        @ GHC.Integer.Type.Integer
                        x
                        0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc
                        @ GHC.Integer.Type.Integer
                        y
                        0# of ww1 { DEFAULT ->
                 case GHC.Prim.==# ww2 ww1 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case Main.isDerangement_$sisPermutation x y of wild {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> Main.isDerangement_go2 x y } } } }) -}
16fa6c2ed5f5b6d786df0658ec3f7ed5
  isDerangement_$sisPermutation ::
    [GHC.Integer.Type.Integer]
    -> [GHC.Integer.Type.Integer] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: (\ (x :: [GHC.Integer.Type.Integer])
                   (y :: [GHC.Integer.Type.Integer]) ->
                 case GHC.List.$wlenAcc
                        @ GHC.Integer.Type.Integer
                        x
                        0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc
                        @ GHC.Integer.Type.Integer
                        y
                        0# of ww1 { DEFAULT ->
                 case GHC.Prim.==# ww2 ww1 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> letrec {
                        go :: [GHC.Integer.Type.Integer] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [GHC.Integer.Type.Integer]) ->
                          case ds of wild {
                            [] -> GHC.Types.True
                            : y1 ys
                            -> letrec {
                                 $wgo :: [GHC.Integer.Type.Integer]
                                         -> GHC.Prim.Int# -> GHC.Prim.Int#
                                   {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                                 = \ (w :: [GHC.Integer.Type.Integer]) (ww :: GHC.Prim.Int#) ->
                                   case w of wild1 {
                                     [] -> ww
                                     : y2 ys1
                                     -> case GHC.Integer.Type.eqInteger# y2 y1 of wild2 {
                                          DEFAULT -> $wgo ys1 ww
                                          1# -> $wgo ys1 (GHC.Prim.+# ww 1#) } }
                               } in
                               case $wgo x 0# of ww { DEFAULT ->
                               case $wgo y 0# of ww3 { DEFAULT ->
                               case GHC.Prim.==# ww ww3 of lwild1 {
                                 DEFAULT -> GHC.Types.False 1# -> go ys } } } }
                      } in
                      go x } } }) -}
d0efb64afc0a935c4c984b3aba1d9980
  isDerangement_go2 ::
    [GHC.Integer.Type.Integer]
    -> [GHC.Integer.Type.Integer] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
eaf4228641d2ae54a2d62d0a4e43dab7
  isPermutation :: GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U><S,U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: [a])
                   (y :: [a]) ->
                 case GHC.List.$wlenAcc @ a x 0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc @ a y 0# of ww1 { DEFAULT ->
                 case GHC.Prim.==# ww2 ww1 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> letrec {
                        go :: [a] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [a]) ->
                          case ds of wild {
                            [] -> GHC.Types.True
                            : y1 ys
                            -> letrec {
                                 $wgo :: [a] -> GHC.Prim.Int# -> GHC.Prim.Int#
                                   {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                                 = \ (w :: [a]) (ww :: GHC.Prim.Int#) ->
                                   case w of wild1 {
                                     [] -> ww
                                     : y2 ys1
                                     -> case GHC.Classes.== @ a $dEq y2 y1 of wild2 {
                                          GHC.Types.False -> $wgo ys1 ww
                                          GHC.Types.True -> $wgo ys1 (GHC.Prim.+# ww 1#) } }
                               } in
                               case $wgo x 0# of ww { DEFAULT ->
                               case $wgo y 0# of ww3 { DEFAULT ->
                               case GHC.Prim.==# ww ww3 of lwild1 {
                                 DEFAULT -> GHC.Types.False 1# -> go ys } } } }
                      } in
                      go x } } }) -}
dc06da07a31c99000d29d580a46a05ff
  isPythagorean ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, Strictness: <S,U><S,U><S,U>,
     Unfolding: (\ (a :: GHC.Integer.Type.Integer)
                   (b :: GHC.Integer.Type.Integer)
                   (c :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger#
                        (GHC.Integer.Type.plusInteger
                           (GHC.Integer.Type.timesInteger a a)
                           (GHC.Integer.Type.timesInteger b b))
                        (GHC.Integer.Type.timesInteger c c) of wild { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild }) -}
04f49e17ca2ddaa21ebd15d9a86d1676
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
24a2af149867bc94a3b13347c8e80244
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main71
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Main.$wtestQuartilesSafe
                        10000#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           Main.main70
                           (case ipv3 of wild {
                              GHC.Types.False -> Main.checkTestResult3
                              GHC.Types.True -> Main.checkTestResult1 }))
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Test.QuickCheck.Test.$w$squickCheckWithResult
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main69
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main67
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case Main.main59 ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main57
                        GHC.Types.True
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main56
                        GHC.Types.True
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main54
                        GHC.Types.True
                        ipv14 of ds9 { (#,#) ipv16 ipv17 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main53
                        GHC.Types.True
                        ipv16 of ds10 { (#,#) ipv18 ipv19 ->
                 case Main.main36 ipv18 of ds11 { (#,#) ipv20 ipv21 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main34
                        GHC.Types.True
                        ipv20 of ds12 { (#,#) ipv22 ipv23 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main33
                        GHC.Types.True
                        ipv22 of ds13 { (#,#) ipv24 ipv25 ->
                 case Main.main4 ipv24 of ds14 { (#,#) ipv26 ipv27 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv26 } } } } } } } } } } } } } }) -}
4e189bd88fa8e7366d148828097daa1e
  main10 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.derangementProperties13
                   Main.permutationTestList) -}
0ac5df58afa1f14e380abdc556a4c944
  main11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Testing all bigger lists: "#) -}
c5ac5000a7e8bcba51f357cc0374ea34
  main12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main14
                   Main.main13) -}
80502ce60f239a09b4147fb87d618012
  main13 :: [GHC.Types.Char]
  {- Unfolding: (case Main.derangementProperties_$spropAllDeranSmaller
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult1
                   GHC.Types.True -> Main.checkTestResult3 }) -}
e3eac12c6aead005341d5bc3e1cfc49a
  main14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Testing all smaller lists: "#) -}
2175882f8bec80e806c64a57eca43cc6
  main15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main17
                   Main.main16) -}
d91f5260406192ffea2dbc3046436656
  main16 :: [GHC.Types.Char]
  {- Unfolding: (case Main.derangementProperties_$spropDeranSwapped
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult1
                   GHC.Types.True -> Main.checkTestResult3 }) -}
18d8be7a4f54b9d83b182ca278ecef0d
  main17 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Testing all swapped lists on uneven lists: "#) -}
086042bd72e14fc8ca93fd16fbf464e9
  main18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main20
                   Main.main19) -}
aa003ba1e48cdbc6b36cf1c81ec186cc
  main19 :: [GHC.Types.Char]
  {- Unfolding: (case Main.deran_$sisDerangement
                        Main.permutationTestList
                        (GHC.List.reverse1
                           @ GHC.Types.Int
                           Main.permutationTestList
                           (GHC.Types.[] @ GHC.Types.Int)) of wild {
                   GHC.Types.False -> Main.checkTestResult1
                   GHC.Types.True -> Main.checkTestResult3 }) -}
21ee1e9ce3c251c7ad2ca4e7f5b78afc
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main3) -}
5e0550b3526d74176b7668809d23235a
  main20 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Testing reversed list on uneven lists: "#) -}
c1087609ddd768f2b8c8bc7d3049cfac
  main21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main23
                   Main.main22) -}
5c361ebea4f7c9abfc05027313be315c
  main22 :: [GHC.Types.Char]
  {- Unfolding: (case Main.main_$spropDeranSwapped
                        Main.derangementTestListTwo of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
12992983f4cbca63fefb4c52c546e5f0
  main23 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Testing all swapped lists on even lists: "#) -}
fcccb6f81699cee64c7cc4306a5b9e3e
  main24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main26
                   Main.main25) -}
35b5d0efe77b74d73d8ef13affd7efd7
  main25 :: [GHC.Types.Char]
  {- Unfolding: (case Main.isDerangement_$sisDerangement
                        Main.derangementTestListTwo
                        (GHC.List.reverse1
                           @ GHC.Integer.Type.Integer
                           Main.derangementTestListTwo
                           (GHC.Types.[] @ GHC.Integer.Type.Integer)) of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
9210d26c79aeca144725577102726c7a
  main26 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Testing reversed list on even lists: "#) -}
98be5d429e14fa90bdd58321ba3a7205
  main27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main29
                   Main.main28) -}
db28ec781e8745622b32238896f8636b
  main28 :: [GHC.Types.Char]
  {- Unfolding: (case Main.derangementProperties_$spropAllDeranRotations
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
e7d7920fe74a72306aa0c51d635151ff
  main29 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Testing all rotated lists: "#) -}
44ddb9097779558b7596e4d0209f99ed
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Done"#) -}
eafe1d21abd4f00e517bb9ea4d7142af
  main30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main32
                   Main.main31) -}
1c6003287c19509bb34976ceacae179c
  main31 :: [GHC.Types.Char]
  {- Unfolding: (case Main.deran_$sisDerangement
                        Main.permutationTestList
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult1
                   GHC.Types.True -> Main.checkTestResult3 }) -}
d2b482a1b6fc10ce8ac7313339f1f512
  main32 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Testing same list: "#) -}
8ae16e7a4ad0f6cf95ad7c898f0c0257
  main33 :: GHC.Base.String
  {- Unfolding: (case Lecture2.quicksort
                        @ (Main.Prop GHC.Types.Any)
                        (Main.$fOrdProp @ GHC.Types.Any)
                        (Main.derangementProperties @ GHC.Types.Any) of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        GHC.Show.showList__4
                        (GHC.Types.[] @ GHC.Types.Char)
                   : x xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.showList__3
                        (case x of wild1 { Main.Prop ds ds1 ->
                         let {
                           z :: [GHC.Types.Char]
                           = let {
                               lvl43 :: [GHC.Types.Char]
                               = GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showList__2
                                   (GHC.Types.[] @ GHC.Types.Char)
                             } in
                             letrec {
                               showl :: [Main.Prop GHC.Types.Any] -> GHC.Base.String
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ (ds2 :: [Main.Prop GHC.Types.Any]) ->
                                 case ds2 of wild2 {
                                   [] -> lvl43
                                   : y ys
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showList__1
                                        (case y of wild3 { Main.Prop ds3 ds4 ->
                                         let {
                                           z1 :: [GHC.Types.Char] = showl ys
                                         } in
                                         letrec {
                                           go :: [GHC.Types.Char] -> [GHC.Types.Char]
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds5 :: [GHC.Types.Char]) ->
                                             case ds5 of wild4 {
                                               [] -> z1
                                               : y1 ys1
                                               -> GHC.Types.: @ GHC.Types.Char y1 (go ys1) }
                                         } in
                                         go ds3 }) }
                             } in
                             showl xs
                         } in
                         letrec {
                           go :: [GHC.Types.Char] -> [GHC.Types.Char]
                             {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds2 :: [GHC.Types.Char]) ->
                             case ds2 of wild2 {
                               [] -> z : y ys -> GHC.Types.: @ GHC.Types.Char y (go ys) }
                         } in
                         go ds }) }) -}
224a65830c4c5d1bc2285c834056591e
  main34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main35) -}
b6ca15be6f2076716fa102871702ecc9
  main35 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \== Assignment 5 (Recognizing and generating derangements) =="#) -}
c5b298e599fb27534af35ef76eeab722
  main36 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main51
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main49
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main46
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main43
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main41
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main39
                        GHC.Types.True
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main37
                   GHC.Types.True
                   ipv10 } } } } } }) -}
b056ac8a886bb620b15eec6e992be399
  main37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main7
                   Main.main38) -}
cf0e1188d730ba5fef6bff6728ccaa31
  main38 :: [GHC.Types.Char]
  {- Unfolding: (case Main.propIncreased
                        Main.permutationTestList5
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult1
                   GHC.Types.True -> Main.checkTestResult3 }) -}
a99c8a002c201ad8c296b56b24d898ae
  main39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main11
                   Main.main40) -}
fe8da907e2449801e733b5cc626c4f23
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main30
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main27
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main24
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main21
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main18
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main15
                        GHC.Types.True
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main12
                        GHC.Types.True
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main8
                        GHC.Types.True
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main5
                   GHC.Types.True
                   ipv14 } } } } } } } }) -}
c9f26b4f27115f380071098038cbf1e4
  main40 :: [GHC.Types.Char]
  {- Unfolding: (case Main.deran_$sisPermutation
                        Main.permutationTestList
                        Main.main10 of wild {
                   GHC.Types.False -> Main.checkTestResult1
                   GHC.Types.True -> Main.checkTestResult3 }) -}
8e1e1b75e320c696a403810d2a90849d
  main41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main14
                   Main.main42) -}
376b14f3deccfda03e93ea074fb5cb02
  main42 :: [GHC.Types.Char]
  {- Unfolding: (case Main.main_$spropAllSmaller
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult1
                   GHC.Types.True -> Main.checkTestResult3 }) -}
3a20e104916ebdd4de1fa1155dc5b1e8
  main43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main45
                   Main.main44) -}
35cb2b3a15966451002646d7fb985dc6
  main44 :: [GHC.Types.Char]
  {- Unfolding: (case Main.main_$spropAllSwapped
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
9661e8577a436b4f3032b8904df2ed5f
  main45 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Testing all swapped lists: "#) -}
41aba80058f5ab2150026b554f8d91fd
  main46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main48
                   Main.main47) -}
394feb68f7abfc8fdd79aadb49369709
  main47 :: [GHC.Types.Char]
  {- Unfolding: (case Main.deran_$sisPermutation
                        Main.permutationTestList
                        (GHC.List.reverse1
                           @ GHC.Types.Int
                           Main.permutationTestList
                           (GHC.Types.[] @ GHC.Types.Int)) of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
603859cb630b7a9cb3d6bd89682a8f30
  main48 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Testing reversed list: "#) -}
8cc24f3ccaa38d2b9c892140084248e2
  main49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main29
                   Main.main50) -}
3166ec6fa05bb40e4014baef506da223
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main7
                   Main.main6) -}
ec4cd63281e36035b9b68d92f7e9eaf6
  main50 :: [GHC.Types.Char]
  {- Unfolding: (case Main.main_$spropAllRotations
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
866182f7ddb746442a16a1ca164dc784
  main51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main32
                   Main.main52) -}
0a55ecc1f3b32ca5b0560c7ded817888
  main52 :: [GHC.Types.Char]
  {- Unfolding: (case Main.deran_$sisPermutation
                        Main.permutationTestList
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
4028f9103e07ff6951d56f7aeaa125e6
  main53 :: GHC.Base.String
  {- Unfolding: (case Lecture2.quicksort
                        @ (Main.Prop GHC.Types.Any)
                        (Main.$fOrdProp @ GHC.Types.Any)
                        (Main.permutationProperties @ GHC.Types.Any) of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        GHC.Show.showList__4
                        (GHC.Types.[] @ GHC.Types.Char)
                   : x xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.showList__3
                        (case x of wild1 { Main.Prop ds ds1 ->
                         let {
                           z :: [GHC.Types.Char]
                           = let {
                               lvl43 :: [GHC.Types.Char]
                               = GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showList__2
                                   (GHC.Types.[] @ GHC.Types.Char)
                             } in
                             letrec {
                               showl :: [Main.Prop GHC.Types.Any] -> GHC.Base.String
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ (ds2 :: [Main.Prop GHC.Types.Any]) ->
                                 case ds2 of wild2 {
                                   [] -> lvl43
                                   : y ys
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showList__1
                                        (case y of wild3 { Main.Prop ds3 ds4 ->
                                         let {
                                           z1 :: [GHC.Types.Char] = showl ys
                                         } in
                                         letrec {
                                           go :: [GHC.Types.Char] -> [GHC.Types.Char]
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds5 :: [GHC.Types.Char]) ->
                                             case ds5 of wild4 {
                                               [] -> z1
                                               : y1 ys1
                                               -> GHC.Types.: @ GHC.Types.Char y1 (go ys1) }
                                         } in
                                         go ds3 }) }
                             } in
                             showl xs
                         } in
                         letrec {
                           go :: [GHC.Types.Char] -> [GHC.Types.Char]
                             {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds2 :: [GHC.Types.Char]) ->
                             case ds2 of wild2 {
                               [] -> z : y ys -> GHC.Types.: @ GHC.Types.Char y (go ys) }
                         } in
                         go ds }) }) -}
1ca9bf1699ead618f5343b616a4c62a5
  main54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main55) -}
4819b9eb05cb7afe5663b6b9853d2faa
  main55 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \== Assignment 4 (Recognizing Permutations) =="#) -}
7896a60043f4a9d291084f7c11baa506
  main56 :: GHC.Base.String
  {- Unfolding: (case Lecture2.quicksort
                        @ (Main.Prop GHC.Types.Any)
                        (Main.$fOrdProp @ GHC.Types.Any)
                        (Main.properties @ GHC.Types.Any) of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        GHC.Show.showList__4
                        (GHC.Types.[] @ GHC.Types.Char)
                   : x xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.showList__3
                        (case x of wild1 { Main.Prop ds ds1 ->
                         let {
                           z :: [GHC.Types.Char]
                           = let {
                               lvl43 :: [GHC.Types.Char]
                               = GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showList__2
                                   (GHC.Types.[] @ GHC.Types.Char)
                             } in
                             letrec {
                               showl :: [Main.Prop GHC.Types.Any] -> GHC.Base.String
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ (ds2 :: [Main.Prop GHC.Types.Any]) ->
                                 case ds2 of wild2 {
                                   [] -> lvl43
                                   : y ys
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showList__1
                                        (case y of wild3 { Main.Prop ds3 ds4 ->
                                         let {
                                           z1 :: [GHC.Types.Char] = showl ys
                                         } in
                                         letrec {
                                           go :: [GHC.Types.Char] -> [GHC.Types.Char]
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds5 :: [GHC.Types.Char]) ->
                                             case ds5 of wild4 {
                                               [] -> z1
                                               : y1 ys1
                                               -> GHC.Types.: @ GHC.Types.Char y1 (go ys1) }
                                         } in
                                         go ds3 }) }
                             } in
                             showl xs
                         } in
                         letrec {
                           go :: [GHC.Types.Char] -> [GHC.Types.Char]
                             {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds2 :: [GHC.Types.Char]) ->
                             case ds2 of wild2 {
                               [] -> z : y ys -> GHC.Types.: @ GHC.Types.Char y (go ys) }
                         } in
                         go ds }) }) -}
7748229585c4a6d75b83ed235edc95a4
  main57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main58) -}
589fb1bba88e4f797f46da471ceb08e6
  main58 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \== Assignment 3 (Testing properties strength) =="#) -}
22b6b2da86891502852aa2770778d3e2
  main59 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Main.checkTriangleFunction
                         Main.main66
                         Main.main65
                         Main.main65
                         Lab2.NoTriangle)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case (Main.checkTriangleFunction
                         Main.main65
                         Main.main65
                         Main.main65
                         Lab2.Equilateral)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case (Main.checkTriangleFunction
                         Main.derangementTestListTwo5
                         Main.derangementTestListTwo4
                         Main.main64
                         Lab2.Rectangular)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case (Main.checkTriangleFunction
                         Main.main63
                         Main.main62
                         Main.main62
                         Lab2.Isosceles)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 (Main.checkTriangleFunction
                    Main.main65
                    Main.main61
                    Main.main60
                    Lab2.Other)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   ipv6 } } } }) -}
db8abb4c1a2a3e57d51d25127036f85a
  main6 :: [GHC.Types.Char]
  {- Unfolding: (case Main.propDeranIncreased
                        Main.permutationTestList5
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult1
                   GHC.Types.True -> Main.checkTestResult3 }) -}
1c4eefaa8560b84baddf9ba73b4cccbd
  main60 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (12) -}
30447f1cf281cc6f8fca4703cf653b71
  main61 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (11) -}
00beaf0ff3f2eebe03d168ce590ef2b8
  main62 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (15) -}
bd236c7b63ed3798d147e7f4c368bddf
  main63 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (20) -}
d8f190908a3b876495b0564208fc7f4c
  main64 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (5) -}
b026ac6c169073f6db145fbd66377942
  main65 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10) -}
26cd5002ec6d37d70b6e7364a5f62fdb
  main66 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (90) -}
4c4cb7d69688ce4b518f16189a14cbf7
  main67 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main68) -}
5368a787911ce8aba67a1e2157b144c1
  main68 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \== Assignment 2 (Recognizing triangles) =="#) -}
16593f36205c97618426bcf0f31e4e49
  main69 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Types.Int
                   @ GHC.Types.Bool
                   GHC.Show.$fShowInt
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.genBigNumbers1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   (Test.QuickCheck.Property.forAll2 @ GHC.Types.Int)
                   Main.testQuartiles
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
fde1af9393619d66d4cf12f8bc8c010e
  main7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Testing increased list: "#) -}
7478916d43355b55dce19ac9b1502f44
  main70 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Safe, but without QuickCheck: "#) -}
330bf5e1f69625e227738530139dc0a5
  main71 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main72) -}
02efaea2c89bb46dca34964f456e45e9
  main72 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("== Assignment 1 (Random floating point numbers) =="#) -}
de6aa15b97a93140d01d5262acf59945
  main73 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
e6d73bffd17379e2083636fdbbaf2b37
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main11
                   Main.main9) -}
9434a36ff6cc8968fbb6e17cd74a4c37
  main9 :: [GHC.Types.Char]
  {- Unfolding: (case Main.deran_$sisDerangement
                        Main.permutationTestList
                        Main.main10 of wild {
                   GHC.Types.False -> Main.checkTestResult1
                   GHC.Types.True -> Main.checkTestResult3 }) -}
a3d15d61031c212de8cec9b5a716bdce
  main_$spropAllRotations :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (origList :: [GHC.Types.Int]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case GHC.List.$wlenAcc
                             @ GHC.Types.Int
                             wild
                             0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                      } in
                      case GHC.Prim.># 1# y of lwild {
                        DEFAULT
                        -> letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <L,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case Main.deran_$sisPermutation
                                      wild
                                      (Main.rotate @ GHC.Types.Int (GHC.Types.I# x) wild) of wild1 {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True
                                 -> case GHC.Prim.==# x y of lwild1 {
                                      DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                           } in
                           go 1#
                        1# -> GHC.Types.True } } }) -}
58278e83236bee1e1f312e9de82b3c39
  main_$spropAllSmaller :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (origList :: [GHC.Types.Int]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case GHC.List.$wlenAcc
                             @ GHC.Types.Int
                             wild
                             0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                      } in
                      case GHC.Prim.># 1# y of lwild {
                        DEFAULT
                        -> let {
                             lvl5 :: GHC.Types.Bool
                             = Main.deran_$sisPermutation wild (GHC.Types.[] @ GHC.Types.Int)
                           } in
                           letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case GHC.Prim.<# 0# x of lwild1 {
                                 DEFAULT
                                 -> case lvl5 of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild2 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                                 1#
                                 -> case Main.deran_$sisPermutation
                                           wild
                                           (GHC.List.$wunsafeTake @ GHC.Types.Int x wild) of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild2 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#)
                                           1# -> GHC.Types.True } } }
                           } in
                           go 1#
                        1# -> GHC.Types.True } } }) -}
e75a5fa84aee6c4ed40de9db36c4823b
  main_$spropAllSwapped :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (origList :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc
                        @ GHC.Types.Int
                        origList
                        0# of ww2 { DEFAULT ->
                 case GHC.Prim.># ww2 1# of lwild {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 2#
                      } in
                      case GHC.Prim.># 0# y of lwild1 {
                        DEFAULT
                        -> letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case Main.deran_$sisPermutation
                                      origList
                                      (Main.$wswapAt @ GHC.Types.Int x origList) of wild {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True
                                 -> case GHC.Prim.==# x y of lwild2 {
                                      DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                           } in
                           go 0#
                        1# -> GHC.Types.True } } }) -}
d6f468358e811553117a21f3f78dceb4
  main_$spropDeranSwapped ::
    [GHC.Integer.Type.Integer] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (origList :: [GHC.Integer.Type.Integer]) ->
                 case GHC.List.$wlenAcc
                        @ GHC.Integer.Type.Integer
                        origList
                        0# of ww2 { DEFAULT ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww2 2#
                 } in
                 case GHC.Prim.<# y 2# of lwild {
                   DEFAULT
                   -> Main.isDerangement_$sisDerangement
                        origList
                        (Main.$wswapAt
                           @ GHC.Integer.Type.Integer
                           0#
                           (let {
                              y' :: GHC.Prim.Int# = GHC.Prim.-# y 2#
                            } in
                            letrec {
                              go_up :: GHC.Prim.Int# -> [GHC.Integer.Type.Integer]
                                {- Arity: 1, Strictness: <S,U> -}
                              = \ (x :: GHC.Prim.Int#) ->
                                case GHC.Prim.># x y' of lwild1 {
                                  DEFAULT
                                  -> Main.$wswapAt
                                       @ GHC.Integer.Type.Integer
                                       x
                                       (go_up (GHC.Prim.+# x 2#))
                                  1# -> Main.$wswapAt @ GHC.Integer.Type.Integer x origList }
                            } in
                            go_up 2#))
                   1#
                   -> case GHC.Prim.<# y 0# of lwild1 {
                        DEFAULT
                        -> Main.isDerangement_$sisDerangement
                             origList
                             (Main.$wswapAt @ GHC.Integer.Type.Integer 0# origList)
                        1#
                        -> Main.isDerangement_$sisDerangement origList origList } } }) -}
b54fc46995c11ea29c858432669f8509
  name :: Main.Prop a -> GHC.Base.String
  RecSel Left Main.Prop
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Main.Prop a) ->
                 case ds of wild { Main.Prop ds1 ds2 -> ds1 }) -}
b2eb3d6a977e7471f5fcdee2e23cbdb2
  p1 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Int) ->
                 case x of wild2 { GHC.Types.I# x1 ->
                 case GHC.Prim.remInt# x1 2# of wild {
                   DEFAULT -> GHC.Types.False
                   0#
                   -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># x1 3#) } }) -}
4f9773f087d33e44584b721ec0514e1b
  p2 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Int) ->
                 case x of wild2 { GHC.Types.I# x1 ->
                 case GHC.Prim.remInt# x1 2# of wild {
                   DEFAULT -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># x1 3#)
                   0# -> GHC.Types.True } }) -}
cdf918deacfd39faecb9d35ceae5a503
  p3 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wp4 ww1 }) -}
80c913a5e0c249579c515ebbea12b751
  p4 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wp4 ww1 }) -}
ba9c9777b1faa84f49cb075bd7e897ae
  permutationProperties :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.permutationProperties16 @ a)
                   (Main.permutationProperties1 @ a)) -}
2e35e05040e897a59af0165dd364a508
  permutationProperties1 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.permutationProperties14 @ a)
                   (Main.permutationProperties2 @ a)) -}
483a3a264ce4ce96019ff001d423233a
  permutationProperties10 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties18
                   Main.permutationProperties11) -}
3741917531ffab5405cec2bc4439dd2b
  permutationProperties11 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (size :: GHC.Types.Int) ->
                 case size of wild1 { GHC.Types.I# y ->
                 Main.main_$spropAllSmaller
                   (GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n 1# y)) }) -}
dba77d20fe8784d32fce37b400b7d8ac
  permutationProperties12 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties22
                   Main.permutationProperties13) -}
ec7cc5ecd434dafdfff6f4bcae050c80
  permutationProperties13 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (size :: GHC.Types.Int) ->
                 case size of wild1 { GHC.Types.I# y ->
                 Main.main_$spropAllSwapped
                   (GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n 1# y)) }) -}
0769f62400e9ec97778396fee80d09c3
  permutationProperties14 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties26
                   Main.permutationProperties15) -}
f6ef00308967c907e56996c3f4d08a92
  permutationProperties15 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (size :: GHC.Types.Int) ->
                 case size of wild1 { GHC.Types.I# y ->
                 Main.main_$spropAllRotations
                   (GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n 1# y)) }) -}
ad26a840e3311d33be8241b4a10776b9
  permutationProperties16 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties30
                   Main.permutationProperties17) -}
8c2775c40261c1f9a3acdefb95f94736
  permutationProperties17 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wpermutationProperties2 ww1 }) -}
3081cc517665c530bcf95918cbd9a910
  permutationProperties2 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.permutationProperties12 @ a)
                   (Main.permutationProperties3 @ a)) -}
1c7b81dd77e29f7b7900170d6c14b3d3
  permutationProperties3 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.permutationProperties10 @ a)
                   (Main.permutationProperties4 @ a)) -}
6bb16456b12152ddb15543e8bcf1fa31
  permutationProperties4 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.permutationProperties8 @ a)
                   (Main.permutationProperties5 @ a)) -}
15520425088a6b19edf5f3cc2d64544c
  permutationProperties5 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.permutationProperties6 @ a)
                   (GHC.Types.[] @ (Main.Prop a))) -}
b5f35d93bf8fdfc0540bc34b3b94dd24
  permutationProperties6 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties9
                   Main.permutationProperties7) -}
a55ce2baf533d4056fe2a8a570994a14
  permutationProperties7 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wpermutationProperties ww1 }) -}
d09333350b9b85b46978dd0aa6bfd602
  permutationProperties8 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties14
                   Main.permutationProperties9) -}
06b659c35a988e9643211d12df24f654
  permutationProperties9 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wpermutationProperties1 ww1 }) -}
d263853c98a043707b9b8c2d5a0c114c
  permutationTestList :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.permutationTestList5
                   Main.permutationTestList1) -}
4f7d16301a3b1d0f98911e0e70e78060
  permutationTestList1 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.permutationTestList4
                   Main.permutationTestList2) -}
f71fa97651f4d6b0e64e69ca52ac985a
  permutationTestList2 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.permutationTestList3
                   (GHC.Types.[] @ GHC.Types.Int)) -}
17092f6ded996c1ffdcef079befa3360
  permutationTestList3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
5f214ee729614aca0ed296882f49835e
  permutationTestList4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
87cbe41af0f1f1eea8aca8a80952bc3d
  permutationTestList5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
67cf6129c4b8f96421a0b52b62b754ce
  propAllDeranRotations :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)))><S,1*U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case GHC.List.$wlenAcc @ a wild 0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                      } in
                      case GHC.Prim.># 1# y of lwild {
                        DEFAULT
                        -> letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <L,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case Main.isDerangement
                                      @ a
                                      $dEq
                                      wild
                                      (Main.rotate @ a (GHC.Types.I# x) wild) of wild1 {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True
                                 -> case GHC.Prim.==# x y of lwild1 {
                                      DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                           } in
                           go 1#
                        1# -> GHC.Types.True } } }) -}
7d653f40551bb31b346f04ac655e86ea
  propAllDeranSmaller :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)))><S,1*U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case GHC.List.$wlenAcc @ a wild 0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                      } in
                      case GHC.Prim.># 1# y of lwild {
                        DEFAULT
                        -> let {
                             lvl5 :: GHC.Types.Bool
                             = Main.isDerangement @ a $dEq wild (GHC.Types.[] @ a)
                           } in
                           letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case GHC.Prim.<# 0# x of lwild1 {
                                 DEFAULT
                                 -> case lvl5 of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild2 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                                 1#
                                 -> case Main.isDerangement
                                           @ a
                                           $dEq
                                           wild
                                           (GHC.List.$wunsafeTake @ a x wild) of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild2 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#)
                                           1# -> GHC.Types.True } } }
                           } in
                           go 1#
                        1# -> GHC.Types.True } } }) -}
9deeff2551819644c43e69fa06ba3f3f
  propAllRotations :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case GHC.List.$wlenAcc @ a wild 0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                      } in
                      case GHC.Prim.># 1# y of lwild {
                        DEFAULT
                        -> letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <L,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case Main.isPermutation
                                      @ a
                                      $dEq
                                      wild
                                      (Main.rotate @ a (GHC.Types.I# x) wild) of wild1 {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True
                                 -> case GHC.Prim.==# x y of lwild1 {
                                      DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                           } in
                           go 1#
                        1# -> GHC.Types.True } } }) -}
b68eef19ea4f1a73f8e771b4e44d09ed
  propAllSmaller :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case GHC.List.$wlenAcc @ a wild 0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                      } in
                      case GHC.Prim.># 1# y of lwild {
                        DEFAULT
                        -> let {
                             lvl5 :: GHC.Types.Bool
                             = Main.isPermutation @ a $dEq wild (GHC.Types.[] @ a)
                           } in
                           letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case GHC.Prim.<# 0# x of lwild1 {
                                 DEFAULT
                                 -> case lvl5 of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild2 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                                 1#
                                 -> case Main.isPermutation
                                           @ a
                                           $dEq
                                           wild
                                           (GHC.List.$wunsafeTake @ a x wild) of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild2 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#)
                                           1# -> GHC.Types.True } } }
                           } in
                           go 1#
                        1# -> GHC.Types.True } } }) -}
1f529742ec306683b9ad01e98803f07a
  propAllSwapped :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><S,U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 case GHC.List.$wlenAcc @ a origList 0# of ww2 { DEFAULT ->
                 case GHC.Prim.># ww2 1# of lwild {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 2#
                      } in
                      case GHC.Prim.># 0# y of lwild1 {
                        DEFAULT
                        -> letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case Main.isPermutation
                                      @ a
                                      $dEq
                                      origList
                                      (Main.$wswapAt @ a x origList) of wild {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True
                                 -> case GHC.Prim.==# x y of lwild2 {
                                      DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                           } in
                           go 0#
                        1# -> GHC.Types.True } } }) -}
10d413db0e8c9f7d36c34c207b43018a
  propBigger :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (origList :: [GHC.Types.Int]) ->
                 Main.deran_$sisPermutation
                   origList
                   (GHC.Types.:
                      @ GHC.Types.Int
                      Main.derangementProperties13
                      origList)) -}
56bd9563ab93a9a96dd96533032fa5ed
  propDeranBigger :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (origList :: [GHC.Types.Int]) ->
                 Main.deran_$sisDerangement
                   origList
                   (GHC.Types.:
                      @ GHC.Types.Int
                      Main.derangementProperties13
                      origList)) -}
0c315a16dc45a0c48dc9fafa33e07c8c
  propDeranIncreased ::
    GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,U>,
     Unfolding: (\ (amount :: GHC.Types.Int)
                   (origList :: [GHC.Types.Int]) ->
                 Main.deran_$sisDerangement
                   origList
                   (GHC.Base.map
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      (\ (ds :: GHC.Types.Int) -> GHC.Num.$fNumInt_$c+ ds amount)
                      origList)) -}
2adb94a5fad10432f7e5c2b7a137e000
  propDeranReversed :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)))><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 Main.isDerangement
                   @ a
                   $dEq
                   origList
                   (GHC.List.reverse1 @ a origList (GHC.Types.[] @ a))) -}
058a31135d515e68800ceb54a764c781
  propDeranRotated ::
    GHC.Classes.Eq a => GHC.Types.Int -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)))><L,1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (rotation :: GHC.Types.Int)
                   (origList :: [a]) ->
                 Main.isDerangement
                   @ a
                   $dEq
                   origList
                   (Main.rotate @ a rotation origList)) -}
dd926cd65c3d508412035362c06b8ed6
  propDeranSmaller ::
    GHC.Classes.Eq a => GHC.Types.Int -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)))><S(S),1*U(U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Classes.Eq a) (w1 :: GHC.Types.Int) (w2 :: [a]) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$wpropDeranSmaller @ a w ww1 w2 }) -}
2e007272ee6b942cd514caa61d64126a
  propDeranSwapped :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U(C(C1(U)),C(C1(U)))><S,U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 case GHC.List.$wlenAcc @ a origList 0# of ww2 { DEFAULT ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww2 2#
                 } in
                 case GHC.Prim.<# y 2# of lwild {
                   DEFAULT
                   -> Main.isDerangement
                        @ a
                        $dEq
                        origList
                        (Main.$wswapAt
                           @ a
                           0#
                           (let {
                              y' :: GHC.Prim.Int# = GHC.Prim.-# y 2#
                            } in
                            letrec {
                              go_up :: GHC.Prim.Int# -> [a] {- Arity: 1, Strictness: <S,U> -}
                              = \ (x :: GHC.Prim.Int#) ->
                                case GHC.Prim.># x y' of lwild1 {
                                  DEFAULT -> Main.$wswapAt @ a x (go_up (GHC.Prim.+# x 2#))
                                  1# -> Main.$wswapAt @ a x origList }
                            } in
                            go_up 2#))
                   1#
                   -> case GHC.Prim.<# y 0# of lwild1 {
                        DEFAULT
                        -> Main.isDerangement
                             @ a
                             $dEq
                             origList
                             (Main.$wswapAt @ a 0# origList)
                        1# -> Main.isDerangement @ a $dEq origList origList } } }) -}
31aabd2aceecd2d8372b6410c7797c5a
  propIncreased :: GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,U>,
     Unfolding: (\ (amount :: GHC.Types.Int)
                   (origList :: [GHC.Types.Int]) ->
                 Main.deran_$sisPermutation
                   origList
                   (GHC.Base.map
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      (\ (ds :: GHC.Types.Int) -> GHC.Num.$fNumInt_$c+ ds amount)
                      origList)) -}
5781ac6ee5a5eeaea20835e0a6f3a2e8
  propListOfSize ::
    ([GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (propFunction :: [GHC.Types.Int] -> GHC.Types.Bool)
                   (size :: GHC.Types.Int) ->
                 propFunction
                   (case size of wild1 { GHC.Types.I# y ->
                    GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n 1# y) })) -}
86d5f1b09ce58e45302ff07fbe0dd773
  propReversed :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 Main.isPermutation
                   @ a
                   $dEq
                   origList
                   (GHC.List.reverse1 @ a origList (GHC.Types.[] @ a))) -}
56fd1a8e447283b5dea3c1d6bf531bd9
  propRotated ::
    GHC.Classes.Eq a => GHC.Types.Int -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (rotation :: GHC.Types.Int)
                   (origList :: [a]) ->
                 Main.isPermutation
                   @ a
                   $dEq
                   origList
                   (Main.rotate @ a rotation origList)) -}
923fb8b8e44472517de623ed6aeaa16d
  propSmaller ::
    GHC.Classes.Eq a => GHC.Types.Int -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S(S),1*U(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Classes.Eq a) (w1 :: GHC.Types.Int) (w2 :: [a]) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$wpropSmaller @ a w ww1 w2 }) -}
d75a50258f195278a85ae11b66e64a51
  propSwapped ::
    GHC.Classes.Eq a => GHC.Types.Int -> [a] -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (index :: GHC.Types.Int)
                   (origList :: [a]) ->
                 Main.isPermutation
                   @ a
                   $dEq
                   origList
                   (Main.swapAt @ a index origList)) -}
0782db639333caacb357b9a5e46529db
  properties :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties17 @ a)
                   (Main.properties1 @ a)) -}
49440fddd6dc637d72d34fbd65ca8bc0
  properties1 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties14 @ a)
                   (Main.properties2 @ a)) -}
0b2064bb66cbba054292b78e39753c93
  properties10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p4"#) -}
e0b99ea16bf6cef8b946f1d7adaed17f
  properties11 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties12 Main.p4) -}
38b648ccf1d5feee920e5eededddf345
  properties12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties13) -}
81a0d671928693e18b0cc495c48b4e8a
  properties13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p3"#) -}
84b74c07ddb34fbbc56f86124f6398c8
  properties14 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties15 Main.p2) -}
d90078e430d1e7a0218ea20e39763ff7
  properties15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties16) -}
cfe7539edc111c27f1ce4a136164816f
  properties16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p2"#) -}
f8deceb661829b57e48017aea87c0489
  properties17 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties18 Main.p1) -}
95c5937877e8aedc7e5380ddbd9efbd1
  properties18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties19) -}
1d4f846fbf607bf97155f3ee62f2cf82
  properties19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p1"#) -}
58f18374f9de8be8955e20f89bf0bc44
  properties2 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties11 @ a)
                   (Main.properties3 @ a)) -}
a8575ff988eabe6481a5a3fabaed908a
  properties3 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties8 @ a)
                   (Main.properties4 @ a)) -}
5959686cf4a42fec72c2b1b3838366b2
  properties4 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties5 @ a)
                   (GHC.Types.[] @ (Main.Prop a))) -}
79c7dc67bb6779f767434ef503b9c323
  properties5 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties6 Main.$seven) -}
608519e9431fd60cf273bb9bfd945d52
  properties6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties7) -}
46a3e61e2ccec3609a264f1163b27d10
  properties7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p5"#) -}
f8ba5c1b3f70d3df6bcd4d3ad9bf2aa0
  properties8 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties9 Main.p4) -}
3925dafaf54ff6c7287aeda8c82a5144
  properties9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties10) -}
b54fc46995c11ea29c858432669f8509
  propertyFunction :: Main.Prop a -> GHC.Types.Int -> GHC.Types.Bool
  RecSel Left Main.Prop
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Main.Prop a) ->
                 case ds of wild { Main.Prop ds1 ds2 -> ds2 }) -}
c600f45d19a1a9afe90d8e559eaa11fb
  rotate :: GHC.Types.Int -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a (ds :: GHC.Types.Int) (ds1 :: [a]) ->
                 case ds1 of wild {
                   [] -> GHC.Types.[] @ a
                   : ipv ipv1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      letrec {
                        xs' :: [a] = GHC.Base.++_$s++ @ a xs' ipv ipv1
                      } in
                      case GHC.Prim.<=# x 0# of lwild {
                        DEFAULT -> Main.rotate1 @ a (Main.$wunsafeDrop @ a x xs') wild
                        1# -> Main.rotate1 @ a xs' wild } } }) -}
480efeb0636ffa66ba7a5a09b9d7b291
  rotate1 :: [a] -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
afa5087ad4582569d3148406ed390bff
  swapAt :: GHC.Types.Int -> [a] -> [a]
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: [a]) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wswapAt @ a ww1 w1 }) -}
3975b458ab7dffe9df654bc5f2281772
  testDerangements :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main4 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
120e55dba76af355c382e4e2a2332987
  testPermutations :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main36 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
203516a2ae7bb85a5ed330ef20ff16d0
  testQuartiles :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wtestQuartiles ww1 }) -}
28248f790b2c55f84c51e5442ba65ba1
  testQuartilesSafe :: GHC.Types.Int -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.testQuartilesSafe1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
49fe9b066c775df80d8767a7b0ffc4ea
  testQuartilesSafe1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wtestQuartilesSafe ww1 w1 }) -}
867a9f21e96c12c8fc38148fba42297a
  testTriangle :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main59 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ee74330f3ede76cb0524cdd7ea2325ef
  triangle ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Lab2.Shape
  {- Arity: 3, Strictness: <S,U><S,U><S,U>,
     Unfolding: (\ (x :: GHC.Integer.Type.Integer)
                   (y :: GHC.Integer.Type.Integer)
                   (z :: GHC.Integer.Type.Integer) ->
                 let {
                   ds :: [GHC.Types.Char] = Main.$wtriangleType x y z
                 } in
                 case GHC.Base.eqString ds Main.triangle7 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString ds Main.triangle5 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString ds Main.triangle3 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString ds Main.triangle1 of wild3 {
                                  GHC.Types.False -> Lab2.Other GHC.Types.True -> Lab2.Rectangular }
                             GHC.Types.True -> Lab2.NoTriangle }
                        GHC.Types.True -> Lab2.Isosceles }
                   GHC.Types.True -> Lab2.Equilateral }) -}
a4ee19d6afe251450ce53248bbccbfbc
  triangle1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle2) -}
388f0dafd543bf503fc5dabaa62a6fa5
  triangle10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Other"#) -}
8ea8754ad4d0b2bea433d428ec59e6fb
  triangle2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rectangular"#) -}
d33c9b85f0558ddf6502ba99e9ed2548
  triangle3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle4) -}
b27dd0ee955cd57b98be145e419903bd
  triangle4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Not a triangle"#) -}
f39059380bffcf8a90d28e325459003a
  triangle5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle6) -}
916b525dd7cc70e72bd08b89c8277efe
  triangle6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Isosceles"#) -}
32059da5ea272c47be4bc783344f20d5
  triangle7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle8) -}
e7ce84b020e42dd1ef5ff7ad0d904b9c
  triangle8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Equilateral"#) -}
7c758a7078c526fda7d09b0dae10232c
  triangle9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle10) -}
be45505db7405e47766fce512bda34c0
  triangleType ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                          GHC.Integer.Type.Integer)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 Main.$wtriangleType ww1 ww2 ww3 }) -}
aee61897f6d6ba40e9ba4c9f64572571
  withinPercentage ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ (number :: GHC.Types.Int)
                   (percentage :: GHC.Types.Int)
                   (ofNumber :: GHC.Types.Int) ->
                 case ofNumber of wild { GHC.Types.I# x ->
                 case GHC.Classes.divInt# x 100# of ww4 { DEFAULT ->
                 case percentage of wild1 { GHC.Types.I# y ->
                 case number of wild2 { GHC.Types.I# x1 ->
                 let {
                   y1 :: GHC.Prim.Int# = GHC.Prim.*# ww4 y
                 } in
                 case GHC.Prim.>=# x1 (GHC.Prim.-# (GHC.Prim.-# x y1) 1#) of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x1 (GHC.Prim.+# (GHC.Prim.+# x y1) 1#)) } } } } }) -}
instance GHC.Classes.Eq [Main.Prop] = Main.$fEqProp
instance GHC.Classes.Ord [Main.Prop] = Main.$fOrdProp
instance GHC.Show.Show [Main.Prop] = Main.$fShowProp
"SPEC isDerangement @ Int" forall ($dEq :: GHC.Classes.Eq
                                             GHC.Types.Int)
  Main.isDerangement @ GHC.Types.Int $dEq
  = Main.deran_$sisDerangement
"SPEC isDerangement @ Integer" forall ($dEq :: GHC.Classes.Eq
                                                 GHC.Integer.Type.Integer)
  Main.isDerangement @ GHC.Integer.Type.Integer $dEq
  = Main.isDerangement_$sisDerangement
"SPEC isPermutation @ Int" forall ($dEq :: GHC.Classes.Eq
                                             GHC.Types.Int)
  Main.isPermutation @ GHC.Types.Int $dEq
  = Main.deran_$sisPermutation
"SPEC isPermutation @ Integer" forall ($dEq :: GHC.Classes.Eq
                                                 GHC.Integer.Type.Integer)
  Main.isPermutation @ GHC.Integer.Type.Integer $dEq
  = Main.isDerangement_$sisPermutation
"SPEC propAllDeranRotations @ Int" forall ($dEq :: GHC.Classes.Eq
                                                     GHC.Types.Int)
  Main.propAllDeranRotations @ GHC.Types.Int $dEq
  = Main.derangementProperties_$spropAllDeranRotations
"SPEC propAllDeranSmaller @ Int" forall ($dEq :: GHC.Classes.Eq
                                                   GHC.Types.Int)
  Main.propAllDeranSmaller @ GHC.Types.Int $dEq
  = Main.derangementProperties_$spropAllDeranSmaller
"SPEC propAllRotations @ Int" forall ($dEq :: GHC.Classes.Eq
                                                GHC.Types.Int)
  Main.propAllRotations @ GHC.Types.Int $dEq
  = Main.main_$spropAllRotations
"SPEC propAllSmaller @ Int" forall ($dEq :: GHC.Classes.Eq
                                              GHC.Types.Int)
  Main.propAllSmaller @ GHC.Types.Int $dEq
  = Main.main_$spropAllSmaller
"SPEC propAllSwapped @ Int" forall ($dEq :: GHC.Classes.Eq
                                              GHC.Types.Int)
  Main.propAllSwapped @ GHC.Types.Int $dEq
  = Main.main_$spropAllSwapped
"SPEC propDeranSwapped @ Int" forall ($dEq :: GHC.Classes.Eq
                                                GHC.Types.Int)
  Main.propDeranSwapped @ GHC.Types.Int $dEq
  = Main.derangementProperties_$spropDeranSwapped
"SPEC propDeranSwapped @ Integer" forall ($dEq :: GHC.Classes.Eq
                                                    GHC.Integer.Type.Integer)
  Main.propDeranSwapped @ GHC.Integer.Type.Integer $dEq
  = Main.main_$spropDeranSwapped
"SPEC/Main even @ Int" [orphan] forall ($dIntegral :: GHC.Real.Integral
                                                        GHC.Types.Int)
  GHC.Real.even @ GHC.Types.Int $dIntegral = Main.$seven
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

