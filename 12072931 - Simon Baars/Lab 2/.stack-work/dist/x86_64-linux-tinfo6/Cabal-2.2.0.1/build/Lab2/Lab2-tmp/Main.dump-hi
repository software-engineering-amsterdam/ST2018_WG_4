
==================== FINAL INTERFACE ====================
2018-09-13 16:31:36.057568946 UTC

interface main:Main 8043
  interface hash: 2b7308bb3a81de369e7b14f549a37237
  ABI hash: fd01fee9f6d84855bbfabea553e485b6
  export-list hash: 98320eea1c95445bcd869ce4d9cb1192
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8e9ed84417c9432185130cd9861fe2b6
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.calcQuartile
  Main.checkTestResult
  Main.checkTriangleFunction
  Main.genBigNumbers
  Main.getAmountInQuartile
  Main.isPythagorean
  Main.main
  Main.testQuartiles
  Main.testQuartilesSafe
  Main.testTriangle
  Main.triangle
  Main.triangleType
  Main.withinPercentage
module dependencies: Lab2
package dependencies: QuickCheck-2.11.3 array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 pretty-1.1.3.6
                      primitive-0.6.3.0 random-1.1 template-haskell-2.13.0.0
                      tf-random-0.5 time-1.8.0.2 transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck e00d138ee3234e83a31cc3113c8c8ffb
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Arbitrary 749c030890709ce50a65277c8ad56400
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Gen 18d7f741d47ea7234320fe42d69d1321
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Property 2a2442debcbf309292a12478b176466b
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Test 5c80e8a0569651177c75db83b77c7ff4
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.IO.Unsafe c1dfcbb6f65c5fb985b7e5159499b64e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  base-4.11.1.0:System.IO.Unsafe 0a2eb33ad4988fdd87ebf1fb8b419957
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  Lab2 58f142ce979bc82be2c0114c7ac77986
  exports: a5316334a3f9b37ecaea00f9011fdb2b
  --> b3887377deb1d7cc8d1a797733886330
  Equilateral 94296fdd9c3a7b05802aa923c5acc5ae
  Isosceles 8e00bd96027c5cbc0c9b960f3f0d9e4c
  NoTriangle 4bc4364a91974b4106482aeeb9f45dd0
  Other 171209b09813ee871e1c78906bc1342a
  Rectangular ebc803140599615cc2f652994ae189b5
  Shape 4f321edfbfaf3dc5f384e8b53049cebc
  probs 93788a82fb6e0e80b0f083ea2b1d6786
import  -/  random-1.1:System.Random 31994b60c33f032d578c64a928f735f7
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
835ebed4606aa92964498d0d376afba1
  $wgenBigNumbers ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 Test.QuickCheck.Gen.$wsuchThat
                   @ GHC.Types.Int
                   Main.genBigNumbers3
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   Main.genBigNumbers2
                   ww
                   ww1
                   ww2
                   ww3
                   ww4) -}
cbf756deeaabd8389e201f54b006623d
  $wtestQuartiles :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.># ww 100# of lwild {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
                             (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.noDuplicate#
                                     @ GHC.Prim.RealWorld
                                     s of s' { DEFAULT ->
                              case Lab2.$wprobs ww s' of ds1 { (#,#) ipv ipv1 ->
                              (# ipv,
                                 Main.calcQuartile
                                   ipv1
                                   Main.getAmountInQuartile2 #) } }) of ds { (#,#) ipv ipv1 ->
                      let {
                        lvl5 :: GHC.Prim.Int# = GHC.Prim.uncheckedIShiftRA# ww 2#
                      } in
                      let {
                        lvl6 :: GHC.Types.Int
                        = case GHC.Classes.divInt# lvl5 100# of v { DEFAULT ->
                          GHC.Types.I# v }
                      } in
                      letrec {
                        go :: [GHC.Types.Int] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds1 :: [GHC.Types.Int]) ->
                          case ds1 of wild {
                            [] -> GHC.Types.True
                            : y ys
                            -> case lvl6 of v { GHC.Types.I# v1 ->
                               case y of wild1 { GHC.Types.I# x ->
                               let {
                                 y1 :: GHC.Prim.Int# = GHC.Prim.*# v1 25#
                               } in
                               case GHC.Prim.>=#
                                      x
                                      (GHC.Prim.-# (GHC.Prim.-# lvl5 y1) 1#) of lwild1 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> case GHC.Prim.<=#
                                           x
                                           (GHC.Prim.+# (GHC.Prim.+# lvl5 y1) 1#) of lwild2 {
                                      DEFAULT -> GHC.Types.False 1# -> go ys } } } } }
                      } in
                      go ipv1 } }) -}
6dae98b665c4d2765e1872374062948f
  $wtestQuartilesSafe ::
    GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lab2.$wprobs ww w of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case GHC.Prim.># ww 0# of lwild {
                      DEFAULT -> GHC.Types.True
                      1#
                      -> let {
                           lvl5 :: GHC.Prim.Int# = GHC.Prim.uncheckedIShiftRA# ww 2#
                         } in
                         let {
                           lvl6 :: GHC.Types.Int
                           = case GHC.Classes.divInt# lvl5 100# of v { DEFAULT ->
                             GHC.Types.I# v }
                         } in
                         letrec {
                           go :: [GHC.Types.Int] -> GHC.Types.Bool
                             <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds :: [GHC.Types.Int]) ->
                             case ds of wild {
                               [] -> GHC.Types.True
                               : y ys
                               -> case lvl6 of v { GHC.Types.I# v1 ->
                                  case y of wild1 { GHC.Types.I# x ->
                                  let {
                                    y1 :: GHC.Prim.Int# = GHC.Prim.*# v1 10#
                                  } in
                                  case GHC.Prim.>=#
                                         x
                                         (GHC.Prim.-# (GHC.Prim.-# lvl5 y1) 1#) of lwild1 {
                                    DEFAULT -> GHC.Types.False
                                    1#
                                    -> case GHC.Prim.<=#
                                              x
                                              (GHC.Prim.+# (GHC.Prim.+# lvl5 y1) 1#) of lwild2 {
                                         DEFAULT -> GHC.Types.False 1# -> go ys } } } } }
                         } in
                         go (Main.calcQuartile ipv1 Main.getAmountInQuartile2) } #) }) -}
1eae4f6737fb333a6b4dbefb66f1d832
  $wtriangleType ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger#
                        (GHC.Integer.Type.plusInteger ww ww1)
                        ww2 of wild {
                   DEFAULT
                   -> case GHC.Integer.Type.ltInteger#
                             (GHC.Integer.Type.plusInteger ww1 ww2)
                             ww of wild1 {
                        DEFAULT
                        -> case GHC.Integer.Type.ltInteger#
                                  (GHC.Integer.Type.plusInteger ww2 ww)
                                  ww1 of wild2 {
                             DEFAULT
                             -> case GHC.Integer.Type.eqInteger# ww ww1 of wild3 { DEFAULT ->
                                let {
                                  $j :: GHC.Base.String <join 0>
                                  = case Main.isPythagorean ww ww1 ww2 of wild4 {
                                      GHC.Types.False
                                      -> case Main.isPythagorean ww1 ww2 ww of wild5 {
                                           GHC.Types.False
                                           -> case Main.isPythagorean ww2 ww ww1 of wild6 {
                                                GHC.Types.False
                                                -> case wild3 of wild7 {
                                                     DEFAULT
                                                     -> case GHC.Integer.Type.eqInteger#
                                                               ww1
                                                               ww2 of wild8 {
                                                          DEFAULT
                                                          -> case GHC.Integer.Type.eqInteger#
                                                                    ww2
                                                                    ww of wild9 {
                                                               DEFAULT -> Main.triangle9
                                                               1# -> Main.triangle5 }
                                                          1# -> Main.triangle5 }
                                                     1# -> Main.triangle5 }
                                                GHC.Types.True -> Main.triangle1 }
                                           GHC.Types.True -> Main.triangle1 }
                                      GHC.Types.True -> Main.triangle1 }
                                } in
                                case wild3 of lwild {
                                  DEFAULT -> $j
                                  1#
                                  -> case GHC.Integer.Type.eqInteger# ww1 ww2 of wild4 {
                                       DEFAULT -> $j
                                       1#
                                       -> case GHC.Integer.Type.eqInteger# ww2 ww of wild5 {
                                            DEFAULT -> $j 1# -> Main.triangle7 } } } }
                             1# -> Main.triangle3 }
                        1# -> Main.triangle3 }
                   1# -> Main.triangle3 }) -}
983c1c5ceb5ccc6f7e3e04af5a358742
  calcQuartile ::
    [GHC.Types.Float] -> [GHC.Types.Float] -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
1360b2fe0904050bab925ba79003f352
  checkTestResult :: GHC.Types.Bool -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Bool) ->
                 case ds of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
07e9afa9026195e449fc2901f6e320ce
  checkTestResult1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkTestResult2) -}
fd977f4fe81bf76dcfad9cba3419444e
  checkTestResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test succeeded!"#) -}
4169382264dc63218ac46fc6f81064e7
  checkTestResult3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkTestResult4) -}
50f4966c81758abf29b6b8f80753cc03
  checkTestResult4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test failed!"#) -}
f259455213a5f5374054d0926c228555
  checkTriangleFunction ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Lab2.Shape
    -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <S,U><S,U><S,U><S,U> -}
1d5ff3a09539d534f7a5c58adc34d09c
  genBigNumbers :: Test.QuickCheck.Gen.Gen GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.genBigNumbers1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R)) -}
f6364b4636c81c661f12e6d2ab8ec4cd
  genBigNumbers1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$wgenBigNumbers ww1 ww2 ww3 ww4 ww8 } }) -}
05b3eb220256edcf295dfd263358c54c
  genBigNumbers2 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# x ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># x 1000#) }) -}
4f31152f4a88b5bf09001ac54bba68fd
  genBigNumbers3 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 case Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral
                        ww1
                        ww2
                        ww3
                        ww4
                        ww8 of ww9 { DEFAULT ->
                 case GHC.Prim.>=# ww9 0# of lwild {
                   DEFAULT -> GHC.Types.I# (GHC.Prim.negateInt# ww9)
                   1# -> GHC.Types.I# ww9 } } } }) -}
f87ffc90a38bdf25b142b08c5e43f32c
  getAmountInQuartile ::
    GHC.Types.Int -> GHC.Types.IO [GHC.Types.Int]
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getAmountInQuartile1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Types.Int]>_R)) -}
c61e0fe09466a4f80ae3107d71c39b6e
  getAmountInQuartile1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case x of ww { GHC.Types.I# ww1 ->
                 case Lab2.$wprobs ww1 s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, Main.calcQuartile ipv1 Main.getAmountInQuartile2 #) } }) -}
a8ab5a6afd23d27eef1dc8226e21731e
  getAmountInQuartile2 :: [GHC.Types.Float]
  {- Unfolding: (GHC.Real.numericEnumFromThenTo
                   @ GHC.Types.Float
                   GHC.Classes.$fOrdFloat
                   GHC.Float.$fFractionalFloat
                   Main.getAmountInQuartile5
                   Main.getAmountInQuartile4
                   Main.getAmountInQuartile3) -}
59df7f0c0f9d10cc353eb3f30924d76a
  getAmountInQuartile3 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
966ee2eaf7fda2f7cc3cc848f560b5d3
  getAmountInQuartile4 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.25#) -}
e26b34f29ce2f7068141f7d6d6850d3e
  getAmountInQuartile5 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
dc06da07a31c99000d29d580a46a05ff
  isPythagorean ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, Strictness: <S,U><S,U><S,U>,
     Unfolding: (\ (a :: GHC.Integer.Type.Integer)
                   (b :: GHC.Integer.Type.Integer)
                   (c :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger#
                        (GHC.Integer.Type.plusInteger
                           (GHC.Integer.Type.timesInteger a a)
                           (GHC.Integer.Type.timesInteger b b))
                        (GHC.Integer.Type.timesInteger c c) of wild { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild }) -}
479ca96a35a2fcb8bad4038d5fa39253
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
d2a7baf45f02f36a6305a804b873e628
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main18
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Main.$wtestQuartilesSafe
                        10000#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           Main.main17
                           (case ipv3 of wild {
                              GHC.Types.False -> Main.checkTestResult3
                              GHC.Types.True -> Main.checkTestResult1 }))
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Test.QuickCheck.Test.$w$squickCheckWithResult
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main16
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main14
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case Main.main4 ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv10 } } } } } }) -}
182e3e3c35e59c3bdb62a075ea192257
  main10 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
e1131913590008d31ca2ae1ac01a9402
  main11 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
22ef853f0da701533de77be742814591
  main12 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10) -}
fc0b4e79e1564496b5d65d8f9d93b37a
  main13 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (90) -}
28591c9fb54ab8aebc506ba4dff0eb91
  main14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main15) -}
9b0fcdfce3d581d224d92c5d2450141e
  main15 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \== Assignment 2 =="#) -}
6d19f06bcccb32d6a1b744364dda4791
  main16 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Types.Int
                   @ GHC.Types.Bool
                   GHC.Show.$fShowInt
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.genBigNumbers1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   (Test.QuickCheck.Property.forAll2 @ GHC.Types.Int)
                   Main.testQuartiles
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
57dd9a7637ed7a20e81fb34467e7be42
  main17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Safe, but without QuickCheck: "#) -}
f92e6fb9925fd569db15a41970d9d277
  main18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main19) -}
b97b926e814f25faa3887e9f691a612a
  main19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("== Assignment 1 =="#) -}
21ee1e9ce3c251c7ad2ca4e7f5b78afc
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main3) -}
e9d4437acdba47074bf52baae0b86aa6
  main20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
44ddb9097779558b7596e4d0209f99ed
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Done"#) -}
3c4956335a501c9a4d625000b8c36fcd
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Main.checkTriangleFunction
                         Main.main13
                         Main.main12
                         Main.main12
                         Lab2.NoTriangle)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case (Main.checkTriangleFunction
                         Main.main12
                         Main.main12
                         Main.main12
                         Lab2.Equilateral)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case (Main.checkTriangleFunction
                         Main.main11
                         Main.main10
                         Main.main9
                         Lab2.Rectangular)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case (Main.checkTriangleFunction
                         Main.main8
                         Main.main7
                         Main.main7
                         Lab2.Isosceles)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 (Main.checkTriangleFunction
                    Main.main12
                    Main.main6
                    Main.main5
                    Lab2.Other)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   ipv6 } } } }) -}
8a9e72d85893ffb570b47e9fda1e188d
  main5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (12) -}
1a9601085247d782f5e45a2626507342
  main6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (11) -}
fd72521c53c04d6d47f49c2e00511c24
  main7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (15) -}
e6dbae02ecda49759e11a2cf336a0d1e
  main8 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (20) -}
bef8e1c265b95bdad60effcf9f3dcb60
  main9 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (5) -}
203516a2ae7bb85a5ed330ef20ff16d0
  testQuartiles :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wtestQuartiles ww1 }) -}
28248f790b2c55f84c51e5442ba65ba1
  testQuartilesSafe :: GHC.Types.Int -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.testQuartilesSafe1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
49fe9b066c775df80d8767a7b0ffc4ea
  testQuartilesSafe1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wtestQuartilesSafe ww1 w1 }) -}
72eb5016ec1951707cb6130f22492a54
  testTriangle :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main4 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ee74330f3ede76cb0524cdd7ea2325ef
  triangle ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Lab2.Shape
  {- Arity: 3, Strictness: <S,U><S,U><S,U>,
     Unfolding: (\ (x :: GHC.Integer.Type.Integer)
                   (y :: GHC.Integer.Type.Integer)
                   (z :: GHC.Integer.Type.Integer) ->
                 let {
                   ds :: [GHC.Types.Char] = Main.$wtriangleType x y z
                 } in
                 case GHC.Base.eqString ds Main.triangle7 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString ds Main.triangle5 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString ds Main.triangle3 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString ds Main.triangle1 of wild3 {
                                  GHC.Types.False -> Lab2.Other GHC.Types.True -> Lab2.Rectangular }
                             GHC.Types.True -> Lab2.NoTriangle }
                        GHC.Types.True -> Lab2.Isosceles }
                   GHC.Types.True -> Lab2.Equilateral }) -}
a4ee19d6afe251450ce53248bbccbfbc
  triangle1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle2) -}
388f0dafd543bf503fc5dabaa62a6fa5
  triangle10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Other"#) -}
8ea8754ad4d0b2bea433d428ec59e6fb
  triangle2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rectangular"#) -}
d33c9b85f0558ddf6502ba99e9ed2548
  triangle3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle4) -}
b27dd0ee955cd57b98be145e419903bd
  triangle4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Not a triangle"#) -}
f39059380bffcf8a90d28e325459003a
  triangle5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle6) -}
916b525dd7cc70e72bd08b89c8277efe
  triangle6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Isosceles"#) -}
32059da5ea272c47be4bc783344f20d5
  triangle7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle8) -}
e7ce84b020e42dd1ef5ff7ad0d904b9c
  triangle8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Equilateral"#) -}
7c758a7078c526fda7d09b0dae10232c
  triangle9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle10) -}
be45505db7405e47766fce512bda34c0
  triangleType ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                          GHC.Integer.Type.Integer)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 Main.$wtriangleType ww1 ww2 ww3 }) -}
aee61897f6d6ba40e9ba4c9f64572571
  withinPercentage ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ (number :: GHC.Types.Int)
                   (percentage :: GHC.Types.Int)
                   (ofNumber :: GHC.Types.Int) ->
                 case ofNumber of wild { GHC.Types.I# x ->
                 case GHC.Classes.divInt# x 100# of ww4 { DEFAULT ->
                 case percentage of wild1 { GHC.Types.I# y ->
                 case number of wild2 { GHC.Types.I# x1 ->
                 let {
                   y1 :: GHC.Prim.Int# = GHC.Prim.*# ww4 y
                 } in
                 case GHC.Prim.>=# x1 (GHC.Prim.-# (GHC.Prim.-# x y1) 1#) of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x1 (GHC.Prim.+# (GHC.Prim.+# x y1) 1#)) } } } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

