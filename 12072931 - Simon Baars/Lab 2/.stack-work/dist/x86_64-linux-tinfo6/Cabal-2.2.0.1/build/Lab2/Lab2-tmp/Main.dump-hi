
==================== FINAL INTERFACE ====================
2018-09-18 08:15:47.233649286 UTC

interface main:Main 8043
  interface hash: 105776ffe9ba7d0c6580a4c9663e2062
  ABI hash: 4a929758106339cb5f30c352da751b70
  export-list hash: f260d31af74298430e820fee260a67a9
  orphan hash: 281e8b5afce51593dfa605c10b8f6aa7
  flag hash: 8e9ed84417c9432185130cd9861fe2b6
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.allDifferent
  Main.calcQuartile
  Main.checkTestResult
  Main.checkTriangleFunction
  Main.deran
  Main.derangementProperties
  Main.derangementTestList
  Main.derangementTestListTwo
  Main.domain
  Main.evenListSizeReverse
  Main.evenListSizeSwapped
  Main.genBigNumbers
  Main.getAmountInQuartile
  Main.isDerangement
  Main.isPermutation
  Main.isPythagorean
  Main.main
  Main.oddListSizeReverse
  Main.oddListSizeSwapped
  Main.p1
  Main.p2
  Main.p3
  Main.p4
  Main.permutationProperties
  Main.permutationTestList
  Main.propAllDeranRotations
  Main.propAllDeranSmaller
  Main.propAllRotations
  Main.propAllSmaller
  Main.propAllSwapped
  Main.propBigger
  Main.propDeranBigger
  Main.propDeranIncreased
  Main.propDeranReversed
  Main.propDeranRotated
  Main.propDeranSmaller
  Main.propDeranSwapped
  Main.propIncreased
  Main.propListOfSize
  Main.propReversed
  Main.propRotated
  Main.propSmaller
  Main.propSwapped
  Main.properties
  Main.rotate
  Main.swapAt
  Main.testDerangements
  Main.testPermutations
  Main.testPropAllDeranSmaller
  Main.testPropDeranBigger
  Main.testPropDeranIncreased
  Main.testQuartiles
  Main.testQuartilesSafe
  Main.testTriangle
  Main.triangle
  Main.triangleType
  Main.withinPercentage
  Main.Prop{Main.Prop name propertyFunction}
module dependencies: Lab2 Lecture2
package dependencies: QuickCheck-2.11.3 array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 pretty-1.1.3.6
                      primitive-0.6.3.0 random-1.1 template-haskell-2.13.0.0
                      tf-random-0.5 time-1.8.0.2 transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck e00d138ee3234e83a31cc3113c8c8ffb
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Arbitrary 749c030890709ce50a65277c8ad56400
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Gen 18d7f741d47ea7234320fe42d69d1321
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Property 2a2442debcbf309292a12478b176466b
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Test 5c80e8a0569651177c75db83b77c7ff4
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.IO.Unsafe c1dfcbb6f65c5fb985b7e5159499b64e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  base-4.11.1.0:System.IO.Unsafe 0a2eb33ad4988fdd87ebf1fb8b419957
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  Lab2 58f142ce979bc82be2c0114c7ac77986
  exports: a5316334a3f9b37ecaea00f9011fdb2b
  --> b3887377deb1d7cc8d1a797733886330
  Equilateral 94296fdd9c3a7b05802aa923c5acc5ae
  Isosceles 8e00bd96027c5cbc0c9b960f3f0d9e4c
  NoTriangle 4bc4364a91974b4106482aeeb9f45dd0
  Other 171209b09813ee871e1c78906bc1342a
  Rectangular ebc803140599615cc2f652994ae189b5
  Shape 4f321edfbfaf3dc5f384e8b53049cebc
  probs 93788a82fb6e0e80b0f083ea2b1d6786
import  -/  Lecture2 217d1f81d64de0e9de04f332a47a0619
  exports: d9f76553a58edbff754f00d8da3dde40
  quicksort f5f5341c1e0adcd33d8eb2c6c2366be5
  stronger 4c551e650a6fdcd24b6d9e1bd56e5b42
  weaker 2278bf5f4b4bd82946015a679a84790a
import  -/  random-1.1:System.Random 31994b60c33f032d578c64a928f735f7
b54fc46995c11ea29c858432669f8509
  $fEqProp :: GHC.Classes.Eq (Main.Prop a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Main.Prop a)
                  (Main.$fEqProp_$c== @ a)
                  (Main.$fEqProp_$c/= @ a) -}
b54fc46995c11ea29c858432669f8509
  $fEqProp_$c/= :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case x of wild { Main.Prop ds ds1 ->
                 case y of wild1 { Main.Prop ds2 ds3 ->
                 case GHC.Base.eqString ds ds2 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
b54fc46995c11ea29c858432669f8509
  $fEqProp_$c== :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (y :: Main.Prop a) (z :: Main.Prop a) ->
                 case y of wild { Main.Prop ds ds1 ->
                 case z of wild1 { Main.Prop ds2 ds3 ->
                 GHC.Base.eqString ds ds2 } }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp :: GHC.Classes.Ord (Main.Prop a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Main.Prop a)
                  (Main.$fEqProp @ a)
                  (Main.$fOrdProp_$ccompare @ a)
                  (Main.$fOrdProp_$c< @ a)
                  (Main.$fOrdProp_$c<= @ a)
                  (Main.$fOrdProp_$c> @ a)
                  (Main.$fOrdProp_$c>= @ a)
                  (Main.$fOrdProp_$cmax @ a)
                  (Main.$fOrdProp_$cmin @ a) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$c< :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$c<= :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$c> :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$c>= :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$ccompare ::
    Main.Prop a -> Main.Prop a -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Main.Prop a) (w1 :: Main.Prop a) ->
                 case w of ww { Main.Prop ww1 ww2 ->
                 case w1 of ww3 { Main.Prop ww4 ww5 ->
                 Main.$w$ccompare @ a ww2 ww5 } }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$cmax :: Main.Prop a -> Main.Prop a -> Main.Prop a
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$cmin :: Main.Prop a -> Main.Prop a -> Main.Prop a
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
b54fc46995c11ea29c858432669f8509
  $fShowProp :: GHC.Show.Show (Main.Prop a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Main.Prop a)
                  (Main.$fShowProp_$cshowsPrec @ a)
                  (Main.name @ a)
                  (Main.$fShowProp_$cshowList @ a) -}
b54fc46995c11ea29c858432669f8509
  $fShowProp1 :: Main.Prop a -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (s :: GHC.Base.String)[OneShot] ->
                 case x of wild { Main.Prop ds ds1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n ds)
                   s }) -}
b54fc46995c11ea29c858432669f8509
  $fShowProp_$cshowList :: [Main.Prop a] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (ls :: [Main.Prop a]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ (Main.Prop a) (Main.$fShowProp1 @ a) ls s) -}
b54fc46995c11ea29c858432669f8509
  $fShowProp_$cshowsPrec ::
    GHC.Types.Int -> Main.Prop a -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(SL),1*U(1*U,A)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (ds :: GHC.Types.Int)
                   (x :: Main.Prop a)
                   (s :: GHC.Base.String) ->
                 case x of wild { Main.Prop ds1 ds2 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n ds1)
                   s }) -}
b68fba6af21cabc077e4e8d4cb7fa0b8
  $s$fArbitraryZipList2 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Int]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Test.QuickCheck.Random.QCGen) (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w2 of ww7 { GHC.Types.I# ww8 ->
                 Test.QuickCheck.Gen.$wlistOf
                   @ GHC.Types.Int
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   ww1
                   ww2
                   ww3
                   ww4
                   ww8 } }) -}
690942fed51bf9061a2519e641bc495a
  $s$fTestable(->)4 ::
    ([GHC.Types.Int] -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Types.Int] -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable w ww1 ww2 ww3 ww4 w2 }) -}
103016c2126f51a9229609a0cad6da59
  $s$fTestable(->)5 :: [GHC.Types.Int] -> [[GHC.Types.Int]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [GHC.Types.Int]) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ GHC.Types.Int
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sshrinkIntegral
                   eta) -}
2337f19ee379498eb4859440d993f4a7
  $seven :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 case n of wild2 { GHC.Types.I# x1 ->
                 case GHC.Prim.remInt# x1 2# of wild {
                   DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } }) -}
5fea766bb3a4961f440c55ba7beee693
  $tc'Prop :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11664713279280497732##
                   13337821378297450670##
                   Main.$trModule
                   Main.$tc'Prop2
                   1#
                   Main.$tc'Prop1) -}
97bcfedd624d57d950a6ed209b3fa858
  $tc'Prop1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5fc1d23d6c2364a801a6a0efbb01c831
  $tc'Prop2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Prop3) -}
e3af92953143f3ad462661951481250f
  $tc'Prop3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Prop"#) -}
949258bb665bb0e85392c67367c3d15b
  $tcProp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5185905648462801233##
                   3706247735825240864##
                   Main.$trModule
                   Main.$tcProp1
                   0#
                   GHC.Types.krep$*Arr*) -}
46fbfbb647034517711aca03e554f559
  $tcProp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcProp2) -}
8abd6cc7e399189ad139ebe12ef4c8a1
  $tcProp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prop"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
b6204f68714a5784cbcd53962008d007
  $w$ccompare ::
    (GHC.Types.Int -> GHC.Types.Bool)
    -> (GHC.Types.Int -> GHC.Types.Bool) -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <L,C(U)><L,C(U)>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Types.Int -> GHC.Types.Bool)
                   (ww1 :: GHC.Types.Int -> GHC.Types.Bool) ->
                 case (Lecture2.compar9 @ GHC.Types.Int Main.domain ww1 ww)
                        `cast`
                      (Data.Semigroup.Internal.N:All[0]) of wild {
                   GHC.Types.False
                   -> case (Lecture2.compar9 @ GHC.Types.Int Main.domain ww ww1)
                             `cast`
                           (Data.Semigroup.Internal.N:All[0]) of wild1 {
                        GHC.Types.False -> GHC.Types.EQ GHC.Types.True -> GHC.Types.LT }
                   GHC.Types.True -> GHC.Types.GT }) -}
a5f77ef7e6982093df32843734e20103
  $w$dTestable ::
    ([GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Int] -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ [GHC.Types.Int]
                   @ GHC.Types.Bool
                   GHC.Show.$fShow[]_$s$fShow[]
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$s$fArbitraryZipList2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Int]>_R))
                   Main.$s$fTestable(->)5
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
af38b0c6a66ced497b2064f15e68d22d
  $wderangementProperties :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   origList :: [GHC.Types.Int] = GHC.Enum.eftInt 1# ww
                 } in
                 Main.isDerangement
                   origList
                   (GHC.Base.map
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      Main.derangementProperties8
                      origList)) -}
c5fb44fd243641f9a431c757f299ffa2
  $wderangementProperties1 :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   origList :: [GHC.Types.Int] = GHC.Enum.eftInt 1# ww
                 } in
                 Main.isDerangement
                   origList
                   (GHC.Types.:
                      @ GHC.Types.Int
                      Main.derangementProperties13
                      origList)) -}
5f633829d91a13bd28f0a0eb1f71b7b0
  $wderangementProperties2 :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   origList :: [GHC.Types.Int] = GHC.Enum.eftInt 1# ww
                 } in
                 case Main.allDifferent_$sallDifferent origList of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> Main.isDerangement
                        origList
                        (GHC.List.reverse1
                           @ GHC.Types.Int
                           origList
                           (GHC.Types.[] @ GHC.Types.Int)) }) -}
835ebed4606aa92964498d0d376afba1
  $wgenBigNumbers ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 Test.QuickCheck.Gen.$wsuchThat
                   @ GHC.Types.Int
                   Main.genBigNumbers3
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   Main.genBigNumbers2
                   ww
                   ww1
                   ww2
                   ww3
                   ww4) -}
7b4508a1d6c66093374439b08a9fef83
  $wp4 :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.remInt# ww 2# of wild {
                   DEFAULT -> GHC.Types.False 0# -> GHC.Types.True }) -}
925d439c31129cb1dfee6057ea85c514
  $wpermutationProperties :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   origList :: [GHC.Types.Int] = GHC.Enum.eftInt 1# ww
                 } in
                 Main.isDerangement_$sisPermutation
                   origList
                   (GHC.Base.map
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      Main.derangementProperties8
                      origList)) -}
12b29e9f38ce7ea0ffd716e9a35a8c55
  $wpermutationProperties1 :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   origList :: [GHC.Types.Int] = GHC.Enum.eftInt 1# ww
                 } in
                 Main.isDerangement_$sisPermutation
                   origList
                   (GHC.Types.:
                      @ GHC.Types.Int
                      Main.derangementProperties13
                      origList)) -}
b19966a07726b293603b710afa7b81a3
  $wpermutationProperties2 :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   origList :: [GHC.Types.Int] = GHC.Enum.eftInt 1# ww
                 } in
                 Main.isDerangement_$sisPermutation
                   origList
                   (GHC.List.reverse1
                      @ GHC.Types.Int
                      origList
                      (GHC.Types.[] @ GHC.Types.Int))) -}
11b08cb3ba19f92eba7d1ff84f98a69b
  $wpropDeranIncreased ::
    GHC.Prim.Int# -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: [GHC.Types.Int]) ->
                 case ww of wild {
                   DEFAULT
                   -> Main.isDerangement
                        w
                        (GHC.Base.map
                           @ GHC.Types.Int
                           @ GHC.Types.Int
                           (\ (ds :: GHC.Types.Int) ->
                            case ds of wild1 { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.+# x wild) })
                           w)
                   0# -> GHC.Types.True }) -}
ee94015eee46a504b45b6c16f76bce01
  $wpropDeranSmaller ::
    GHC.Prim.Int# -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: [GHC.Types.Int]) ->
                 case GHC.Prim.<# 0# ww of lwild {
                   DEFAULT -> Main.isDerangement w (GHC.Types.[] @ GHC.Types.Int)
                   1#
                   -> Main.isDerangement
                        w
                        (GHC.List.$wunsafeTake @ GHC.Types.Int ww w) }) -}
ae360eed13c9e7d7f7a64010de4a6eae
  $wpropSmaller ::
    GHC.Classes.Eq a => GHC.Prim.Int# -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: [a]) ->
                 case GHC.Prim.<# 0# ww of lwild {
                   DEFAULT -> Main.isPermutation @ a w w1 (GHC.Types.[] @ a)
                   1#
                   -> Main.isPermutation
                        @ a
                        w
                        w1
                        (GHC.List.$wunsafeTake @ a ww w1) }) -}
9dd4910d2fe75ef70d20d9b3db1edd88
  $wswapAt :: GHC.Prim.Int# -> [a] -> [a]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ @ a (ww :: GHC.Prim.Int#) (w :: [a]) ->
                 let {
                   swapPos :: [a]
                   = case GHC.Prim.<=# ww 0# of lwild {
                       DEFAULT -> Main.$wunsafeDrop @ a ww w 1# -> w }
                 } in
                 let {
                   swapWithPos :: [a] = Main.$wunsafeDrop @ a 1# swapPos
                 } in
                 let {
                   n :: a
                   = case swapWithPos of wild {
                       [] -> GHC.List.badHead @ a : x ds1 -> x }
                 } in
                 let {
                   n1 :: a
                   = case swapPos of wild { [] -> GHC.List.badHead @ a : x ds1 -> x }
                 } in
                 let {
                   n2 :: [a]
                   = case swapWithPos of wild {
                       [] -> GHC.List.scanl2 @ a : ds1 xs -> xs }
                 } in
                 let {
                   n3 :: [a] = GHC.Types.: @ a n1 n2
                 } in
                 let {
                   n4 :: [a] = GHC.Types.: @ a n n3
                 } in
                 case GHC.Prim.<# 0# ww of lwild {
                   DEFAULT -> n4
                   1#
                   -> letrec {
                        $wgo :: [a] -> GHC.Prim.Int# -> [a]
                          {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                        = \ (w1 :: [a]) (ww1 :: GHC.Prim.Int#) ->
                          case w1 of wild {
                            [] -> n4
                            : y ys
                            -> case ww1 of ds1 {
                                 DEFAULT -> GHC.Types.: @ a y ($wgo ys (GHC.Prim.-# ds1 1#))
                                 1# -> GHC.Types.: @ a y n4 } }
                      } in
                      $wgo w ww }) -}
9245046bb51a39a13b87ebcb751f1fdf
  $wtestPropDeranIncreased ::
    GHC.Prim.Int# -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: [GHC.Types.Int]) ->
                 case ww of wild {
                   DEFAULT
                   -> case w of wild1 {
                        [] -> GHC.Types.True
                        : ds1 ds2
                        -> case Main.isDerangement
                                  wild1
                                  (GHC.Base.map
                                     @ GHC.Types.Int
                                     @ GHC.Types.Int
                                     (\ (ds :: GHC.Types.Int) ->
                                      case ds of wild2 { GHC.Types.I# x ->
                                      GHC.Types.I# (GHC.Prim.+# x wild) })
                                     wild1) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } }
                   0# -> GHC.Types.True }) -}
a1cd0343e4c0f2ead72f253d02701ad0
  $wtestQuartiles :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.># ww 100# of lwild {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
                             (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.noDuplicate#
                                     @ GHC.Prim.RealWorld
                                     s of s' { DEFAULT ->
                              case Lab2.$wprobs ww s' of ds1 { (#,#) ipv ipv1 ->
                              (# ipv,
                                 Main.calcQuartile
                                   ipv1
                                   Main.getAmountInQuartile2 #) } }) of ds { (#,#) ipv ipv1 ->
                      let {
                        lvl32 :: GHC.Prim.Int# = GHC.Prim.uncheckedIShiftRA# ww 2#
                      } in
                      let {
                        lvl33 :: GHC.Types.Int
                        = case GHC.Classes.divInt# lvl32 100# of v { DEFAULT ->
                          GHC.Types.I# v }
                      } in
                      letrec {
                        go :: [GHC.Types.Int] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds1 :: [GHC.Types.Int]) ->
                          case ds1 of wild {
                            [] -> GHC.Types.True
                            : y ys
                            -> case lvl33 of v { GHC.Types.I# v1 ->
                               case y of wild1 { GHC.Types.I# x ->
                               let {
                                 y1 :: GHC.Prim.Int# = GHC.Prim.*# v1 25#
                               } in
                               case GHC.Prim.>=#
                                      x
                                      (GHC.Prim.-# (GHC.Prim.-# lvl32 y1) 1#) of lwild1 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> case GHC.Prim.<=#
                                           x
                                           (GHC.Prim.+# (GHC.Prim.+# lvl32 y1) 1#) of lwild2 {
                                      DEFAULT -> GHC.Types.False 1# -> go ys } } } } }
                      } in
                      go ipv1 } }) -}
963bc85fddb60468bd209784d80896fc
  $wtestQuartilesSafe ::
    GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lab2.$wprobs ww w of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case GHC.Prim.># ww 0# of lwild {
                      DEFAULT -> GHC.Types.True
                      1#
                      -> let {
                           lvl32 :: GHC.Prim.Int# = GHC.Prim.uncheckedIShiftRA# ww 2#
                         } in
                         let {
                           lvl33 :: GHC.Types.Int
                           = case GHC.Classes.divInt# lvl32 100# of v { DEFAULT ->
                             GHC.Types.I# v }
                         } in
                         letrec {
                           go :: [GHC.Types.Int] -> GHC.Types.Bool
                             <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds :: [GHC.Types.Int]) ->
                             case ds of wild {
                               [] -> GHC.Types.True
                               : y ys
                               -> case lvl33 of v { GHC.Types.I# v1 ->
                                  case y of wild1 { GHC.Types.I# x ->
                                  let {
                                    y1 :: GHC.Prim.Int# = GHC.Prim.*# v1 10#
                                  } in
                                  case GHC.Prim.>=#
                                         x
                                         (GHC.Prim.-# (GHC.Prim.-# lvl32 y1) 1#) of lwild1 {
                                    DEFAULT -> GHC.Types.False
                                    1#
                                    -> case GHC.Prim.<=#
                                              x
                                              (GHC.Prim.+# (GHC.Prim.+# lvl32 y1) 1#) of lwild2 {
                                         DEFAULT -> GHC.Types.False 1# -> go ys } } } } }
                         } in
                         go (Main.calcQuartile ipv1 Main.getAmountInQuartile2) } #) }) -}
1eae4f6737fb333a6b4dbefb66f1d832
  $wtriangleType ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger#
                        (GHC.Integer.Type.plusInteger ww ww1)
                        ww2 of wild {
                   DEFAULT
                   -> case GHC.Integer.Type.ltInteger#
                             (GHC.Integer.Type.plusInteger ww1 ww2)
                             ww of wild1 {
                        DEFAULT
                        -> case GHC.Integer.Type.ltInteger#
                                  (GHC.Integer.Type.plusInteger ww2 ww)
                                  ww1 of wild2 {
                             DEFAULT
                             -> case GHC.Integer.Type.eqInteger# ww ww1 of wild3 { DEFAULT ->
                                let {
                                  $j :: GHC.Base.String <join 0>
                                  = case Main.isPythagorean ww ww1 ww2 of wild4 {
                                      GHC.Types.False
                                      -> case Main.isPythagorean ww1 ww2 ww of wild5 {
                                           GHC.Types.False
                                           -> case Main.isPythagorean ww2 ww ww1 of wild6 {
                                                GHC.Types.False
                                                -> case wild3 of wild7 {
                                                     DEFAULT
                                                     -> case GHC.Integer.Type.eqInteger#
                                                               ww1
                                                               ww2 of wild8 {
                                                          DEFAULT
                                                          -> case GHC.Integer.Type.eqInteger#
                                                                    ww2
                                                                    ww of wild9 {
                                                               DEFAULT -> Main.triangle9
                                                               1# -> Main.triangle5 }
                                                          1# -> Main.triangle5 }
                                                     1# -> Main.triangle5 }
                                                GHC.Types.True -> Main.triangle1 }
                                           GHC.Types.True -> Main.triangle1 }
                                      GHC.Types.True -> Main.triangle1 }
                                } in
                                case wild3 of lwild {
                                  DEFAULT -> $j
                                  1#
                                  -> case GHC.Integer.Type.eqInteger# ww1 ww2 of wild4 {
                                       DEFAULT -> $j
                                       1#
                                       -> case GHC.Integer.Type.eqInteger# ww2 ww of wild5 {
                                            DEFAULT -> $j 1# -> Main.triangle7 } } } }
                             1# -> Main.triangle3 }
                        1# -> Main.triangle3 }
                   1# -> Main.triangle3 }) -}
00bb2257859340c278f030fbdf7c8098
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
b54fc46995c11ea29c858432669f8509
  type role Prop phantom
  data Prop a
    = Prop {name :: GHC.Base.String,
            propertyFunction :: GHC.Types.Int -> GHC.Types.Bool}
b80b7bfb48a28a612627fa64cc2f496f
  allDifferent :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,1*U> -}
e8f0eb75174129746e95b52a9100d97d
  allDifferent_$sallDifferent :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
983c1c5ceb5ccc6f7e3e04af5a358742
  calcQuartile ::
    [GHC.Types.Float] -> [GHC.Types.Float] -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
1360b2fe0904050bab925ba79003f352
  checkTestResult :: GHC.Types.Bool -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Bool) ->
                 case ds of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
07e9afa9026195e449fc2901f6e320ce
  checkTestResult1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkTestResult2) -}
fd977f4fe81bf76dcfad9cba3419444e
  checkTestResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test succeeded!"#) -}
4169382264dc63218ac46fc6f81064e7
  checkTestResult3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkTestResult4) -}
50f4966c81758abf29b6b8f80753cc03
  checkTestResult4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test failed!"#) -}
f259455213a5f5374054d0926c228555
  checkTriangleFunction ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Lab2.Shape
    -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <S,U><S,U><S,U><S,U> -}
2e872b82f2885c649a22599630368fa2
  deran :: [GHC.Types.Int] -> [[GHC.Types.Int]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: (\ (x :: [GHC.Types.Int]) ->
                 GHC.List.filter
                   @ [GHC.Types.Int]
                   (\ (ds :: [GHC.Types.Int]) -> Main.isDerangement ds x)
                   (GHC.Types.:
                      @ [GHC.Types.Int]
                      x
                      (Data.OldList.permutations1
                         @ GHC.Types.Int
                         x
                         (GHC.Types.[] @ GHC.Types.Int)))) -}
d0df4ec9eb613d67892c49223b47d353
  derangementProperties :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.derangementProperties28 @ a)
                   (Main.derangementProperties1 @ a)) -}
61ee0175092c8965d27cdf0b693b2210
  derangementProperties1 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.derangementProperties24 @ a)
                   (Main.derangementProperties2 @ a)) -}
2e1280c05b63317631bc03bfdeab7679
  derangementProperties10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Increased"#) -}
590e1647d568f6f52d9cdc533564b807
  derangementProperties11 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties14
                   Main.derangementProperties12) -}
00622aea0db2b9a149c97e1850357e90
  derangementProperties12 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wderangementProperties1 ww1 }) -}
920dc0f3a590b41609eb658bd71e871d
  derangementProperties13 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
0696b4af1d4320a9853edb37dcaeb141
  derangementProperties14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.derangementProperties15) -}
e4ae6758d107faf94e8987957d1d2ee9
  derangementProperties15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bigger"#) -}
80aef1291a3c2325431eb82efcb1e08e
  derangementProperties16 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties18
                   Main.derangementProperties17) -}
cc81605e7ee16a50603d3bc1aa768cb5
  derangementProperties17 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (size :: GHC.Types.Int) ->
                 case size of wild1 { GHC.Types.I# y ->
                 Main.propAllDeranSmaller
                   (GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n 1# y)) }) -}
10e577919d7558bd21ca203fa232d447
  derangementProperties18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.derangementProperties19) -}
cf12cc512499f16cb17f83a022b126a6
  derangementProperties19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Smaller"#) -}
375bf3161aae4183e62990aac9b27bb8
  derangementProperties2 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.derangementProperties20 @ a)
                   (Main.derangementProperties3 @ a)) -}
1c216e8a2672993ae0af810b8251d48e
  derangementProperties20 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties22
                   Main.derangementProperties21) -}
6c196419f36aec997f8601b5dc7f40f0
  derangementProperties21 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (size :: GHC.Types.Int) ->
                 case size of wild1 { GHC.Types.I# y ->
                 Main.propDeranSwapped
                   (GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n 1# y)) }) -}
3a2d66a1f1eb246e847752d8fc4b5e41
  derangementProperties22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.derangementProperties23) -}
488fe437cdfa728cd5956f269a460e04
  derangementProperties23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Swapped"#) -}
120ba6a9139de52e9d49f516b1b7609a
  derangementProperties24 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties26
                   Main.derangementProperties25) -}
e61b179d6b6734bf94d6c9adfcf09536
  derangementProperties25 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (size :: GHC.Types.Int) ->
                 case size of wild1 { GHC.Types.I# y ->
                 Main.propAllDeranRotations
                   (GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n 1# y)) }) -}
399c3edbdbddb25101cc7e95573da485
  derangementProperties26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.derangementProperties27) -}
ddd9025ff828b57e2db59c11de942248
  derangementProperties27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rotated"#) -}
ebf6bec975ceb76d79ecafa0a31962f5
  derangementProperties28 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties30
                   Main.derangementProperties29) -}
c84ee9932b860bf58525ab30f8702db9
  derangementProperties29 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wderangementProperties2 ww1 }) -}
ec71bf28e6eeaab2ab684c5f678a693e
  derangementProperties3 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.derangementProperties16 @ a)
                   (Main.derangementProperties4 @ a)) -}
22fb032f1db885dc428d0299af308e3b
  derangementProperties30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.derangementProperties31) -}
59592e7ad12c7a995eafbfe03b2d281a
  derangementProperties31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Reversed"#) -}
b1ec4934d39cfbca49df3c218effc1ca
  derangementProperties4 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.derangementProperties11 @ a)
                   (Main.derangementProperties5 @ a)) -}
b4b3d25f86236c0e1b356a3f94f776bf
  derangementProperties5 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.derangementProperties6 @ a)
                   (GHC.Types.[] @ (Main.Prop a))) -}
dc0a1904bf228b0c7ceaf1e073fd9a62
  derangementProperties6 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties9
                   Main.derangementProperties7) -}
ad1ddbcfba90973aebc57eb61e81e65d
  derangementProperties7 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wderangementProperties ww1 }) -}
49a4af33193758b07bf35204011783c5
  derangementProperties8 :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# x ->
                 GHC.Types.I# (GHC.Prim.+# x 1#) }) -}
065c546d723330c95ca3639eb7129dbd
  derangementProperties9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.derangementProperties10) -}
dfaa4fbbcdf9b841a8e83ed4ae6b86f2
  derangementTestList :: [GHC.Types.Int]
  {- Strictness: m2, Unfolding: (Main.permutationTestList) -}
1d1f197476868d11e29d49355644751b
  derangementTestListTwo :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.permutationTestList5
                   Main.derangementTestListTwo1) -}
ff79b0877ee00c031c1226e2eb38c16a
  derangementTestListTwo1 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.permutationTestList4
                   Main.derangementTestListTwo2) -}
4216cda92ab4e517c07f7ae836a4b038
  derangementTestListTwo2 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.permutationTestList3
                   Main.derangementTestListTwo3) -}
e8961132c88e0fbf13b0c3097d065f3f
  derangementTestListTwo3 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.derangementTestListTwo4
                   (GHC.Types.[] @ GHC.Types.Int)) -}
167546ac5f2de9fac1e62ac250d3bf37
  derangementTestListTwo4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
439f87fde0c0bced6c431bff02576bf5
  domain :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt -10# 10#) -}
b9139cd1adb7180bc759f6df268eb581
  evenListSizeReverse :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (list :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int list 0# of ww2 { DEFAULT ->
                 case GHC.Prim.remInt# ww2 2# of wild {
                   DEFAULT -> GHC.Types.True 0# -> Main.propDeranReversed list } }) -}
7dbea7ccb11d50d26bda54481bfa9ae9
  evenListSizeSwapped :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (list :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int list 0# of ww2 { DEFAULT ->
                 case GHC.Prim.remInt# ww2 2# of wild {
                   DEFAULT -> GHC.Types.True 0# -> Main.propDeranSwapped list } }) -}
1d5ff3a09539d534f7a5c58adc34d09c
  genBigNumbers :: Test.QuickCheck.Gen.Gen GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.genBigNumbers1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R)) -}
f6364b4636c81c661f12e6d2ab8ec4cd
  genBigNumbers1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$wgenBigNumbers ww1 ww2 ww3 ww4 ww8 } }) -}
05b3eb220256edcf295dfd263358c54c
  genBigNumbers2 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# x ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># x 1000#) }) -}
4f31152f4a88b5bf09001ac54bba68fd
  genBigNumbers3 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 case Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral
                        ww1
                        ww2
                        ww3
                        ww4
                        ww8 of ww9 { DEFAULT ->
                 case GHC.Prim.>=# ww9 0# of lwild {
                   DEFAULT -> GHC.Types.I# (GHC.Prim.negateInt# ww9)
                   1# -> GHC.Types.I# ww9 } } } }) -}
f87ffc90a38bdf25b142b08c5e43f32c
  getAmountInQuartile ::
    GHC.Types.Int -> GHC.Types.IO [GHC.Types.Int]
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getAmountInQuartile1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Types.Int]>_R)) -}
c61e0fe09466a4f80ae3107d71c39b6e
  getAmountInQuartile1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case x of ww { GHC.Types.I# ww1 ->
                 case Lab2.$wprobs ww1 s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, Main.calcQuartile ipv1 Main.getAmountInQuartile2 #) } }) -}
a8ab5a6afd23d27eef1dc8226e21731e
  getAmountInQuartile2 :: [GHC.Types.Float]
  {- Unfolding: (GHC.Real.numericEnumFromThenTo
                   @ GHC.Types.Float
                   GHC.Classes.$fOrdFloat
                   GHC.Float.$fFractionalFloat
                   Main.getAmountInQuartile5
                   Main.getAmountInQuartile4
                   Main.getAmountInQuartile3) -}
59df7f0c0f9d10cc353eb3f30924d76a
  getAmountInQuartile3 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
966ee2eaf7fda2f7cc3cc848f560b5d3
  getAmountInQuartile4 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.25#) -}
e26b34f29ce2f7068141f7d6d6850d3e
  getAmountInQuartile5 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
4e5d19095bf308aec56acd0c2a93ec74
  isDerangement ::
    [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: (\ (x :: [GHC.Types.Int]) (y :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int x 0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int y 0# of ww1 { DEFAULT ->
                 case GHC.Prim.==# ww2 ww1 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case Main.isDerangement_$sisPermutation x y of wild {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> Main.isDerangement_go2 x y } } } }) -}
2de2796310b329d72a584142a67175e9
  isDerangement_$sisPermutation ::
    [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: (\ (x :: [GHC.Types.Int]) (y :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int x 0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int y 0# of ww1 { DEFAULT ->
                 case GHC.Prim.==# ww2 ww1 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> letrec {
                        go :: [GHC.Types.Int] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [GHC.Types.Int]) ->
                          case ds of wild {
                            [] -> GHC.Types.True
                            : y1 ys
                            -> letrec {
                                 $wgo :: [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Prim.Int#
                                   {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                                 = \ (w :: [GHC.Types.Int]) (ww :: GHC.Prim.Int#) ->
                                   case w of wild1 {
                                     [] -> ww
                                     : y2 ys1
                                     -> case y2 of wild2 { GHC.Types.I# x1 ->
                                        case y1 of wild3 { GHC.Types.I# y3 ->
                                        case GHC.Prim.==# x1 y3 of lwild1 {
                                          DEFAULT -> $wgo ys1 ww
                                          1# -> $wgo ys1 (GHC.Prim.+# ww 1#) } } } }
                               } in
                               case $wgo x 0# of ww { DEFAULT ->
                               case $wgo y 0# of ww3 { DEFAULT ->
                               case GHC.Prim.==# ww ww3 of lwild1 {
                                 DEFAULT -> GHC.Types.False 1# -> go ys } } } }
                      } in
                      go x } } }) -}
7fa7eb1579303318bc46dbb7a6c315e7
  isDerangement_go2 ::
    [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
785885d193f2e97d68bdef50ffb89bfc
  isPermutation :: GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U><S,U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: [a])
                   (y :: [a]) ->
                 case GHC.List.$wlenAcc @ a x 0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc @ a y 0# of ww1 { DEFAULT ->
                 case GHC.Prim.==# ww2 ww1 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> letrec {
                        go :: [a] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [a]) ->
                          case ds of wild {
                            [] -> GHC.Types.True
                            : y1 ys
                            -> letrec {
                                 $wgo :: [a] -> GHC.Prim.Int# -> GHC.Prim.Int#
                                   {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                                 = \ (w :: [a]) (ww :: GHC.Prim.Int#) ->
                                   case w of wild1 {
                                     [] -> ww
                                     : y2 ys1
                                     -> case GHC.Classes.== @ a $dEq y2 y1 of wild2 {
                                          GHC.Types.False -> $wgo ys1 ww
                                          GHC.Types.True -> $wgo ys1 (GHC.Prim.+# ww 1#) } }
                               } in
                               case $wgo x 0# of ww { DEFAULT ->
                               case $wgo y 0# of ww3 { DEFAULT ->
                               case GHC.Prim.==# ww ww3 of lwild1 {
                                 DEFAULT -> GHC.Types.False 1# -> go ys } } } }
                      } in
                      go x } } }) -}
dc06da07a31c99000d29d580a46a05ff
  isPythagorean ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, Strictness: <S,U><S,U><S,U>,
     Unfolding: (\ (a :: GHC.Integer.Type.Integer)
                   (b :: GHC.Integer.Type.Integer)
                   (c :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger#
                        (GHC.Integer.Type.plusInteger
                           (GHC.Integer.Type.timesInteger a a)
                           (GHC.Integer.Type.timesInteger b b))
                        (GHC.Integer.Type.timesInteger c c) of wild { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild }) -}
0a2b8f51235c4d2a29cb3b69ab493f19
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
172784b3503534ac222bd61493fdb055
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main51
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Main.$wtestQuartilesSafe
                        10000#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           Main.main50
                           (case ipv3 of wild {
                              GHC.Types.False -> Main.checkTestResult3
                              GHC.Types.True -> Main.checkTestResult1 }))
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Test.QuickCheck.Test.$w$squickCheckWithResult
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main49
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main47
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case Main.main37 ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main35
                        GHC.Types.True
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main34
                        GHC.Types.True
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main32
                        GHC.Types.True
                        ipv14 of ds9 { (#,#) ipv16 ipv17 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main31
                        GHC.Types.True
                        ipv16 of ds10 { (#,#) ipv18 ipv19 ->
                 case Main.main8 ipv18 of ds11 { (#,#) ipv20 ipv21 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main6
                        GHC.Types.True
                        ipv20 of ds12 { (#,#) ipv22 ipv23 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main5
                        GHC.Types.True
                        ipv22 of ds13 { (#,#) ipv24 ipv25 ->
                 case Main.main4 ipv24 of ds14 { (#,#) ipv26 ipv27 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv26 } } } } } } } } } } } } } }) -}
42a23a80d553391e4cdef04933bb7fbc
  main10 :: [GHC.Types.Char]
  {- Unfolding: (case Main.propIncreased
                        Main.permutationTestList5
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult1
                   GHC.Types.True -> Main.checkTestResult3 }) -}
14b6caf3341531432d82d76ce3fadcec
  main11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Testing increased list: "#) -}
5a5b82b6c27e06033cbac6b9b34dd596
  main12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main15
                   Main.main13) -}
70d40012772bd1f6118b43b96af209dc
  main13 :: [GHC.Types.Char]
  {- Unfolding: (case Main.isDerangement_$sisPermutation
                        Main.permutationTestList
                        Main.main14 of wild {
                   GHC.Types.False -> Main.checkTestResult1
                   GHC.Types.True -> Main.checkTestResult3 }) -}
7e8e7e24b2cf8edc8531b3fd33b49cb1
  main14 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.derangementProperties13
                   Main.permutationTestList) -}
397ade08152f34fa3f671f38ea5d23bd
  main15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Testing all bigger lists: "#) -}
6979bc619aba959fd3b04b9601c91cae
  main16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main18
                   Main.main17) -}
422566a0374cac8d3b5141c747099140
  main17 :: [GHC.Types.Char]
  {- Unfolding: (case Main.main_$spropAllSmaller
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult1
                   GHC.Types.True -> Main.checkTestResult3 }) -}
39b08cff071a6b2a1d57b0df838c82cf
  main18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Testing all smaller lists: "#) -}
108a7b08b496eec97f6809e5d77b830a
  main19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main21
                   Main.main20) -}
21ee1e9ce3c251c7ad2ca4e7f5b78afc
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main3) -}
27a79dec6203e632a2a884bf18f17c20
  main20 :: [GHC.Types.Char]
  {- Unfolding: (case Main.main_$spropAllSwapped
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
8732d2ac0daa7dd2845dd1ee4d25344f
  main21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Testing all swapped lists: "#) -}
d0f6a154278107a485262bda9909e6e0
  main22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main24
                   Main.main23) -}
d66759869cfb929c460c2bc13f61a58d
  main23 :: [GHC.Types.Char]
  {- Unfolding: (case Main.isDerangement_$sisPermutation
                        Main.permutationTestList
                        (GHC.List.reverse1
                           @ GHC.Types.Int
                           Main.permutationTestList
                           (GHC.Types.[] @ GHC.Types.Int)) of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
10545b74e52b31048cb63e9bcde989bf
  main24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Testing reversed list: "#) -}
6504248d9e4d0f2c38bdff8ebf738cdc
  main25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main27
                   Main.main26) -}
71ced23934eb928cc6963f494312409a
  main26 :: [GHC.Types.Char]
  {- Unfolding: (case Main.main_$spropAllRotations
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
a89feab0b56e67adac53d8c38dec7cb4
  main27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Testing all rotated lists: "#) -}
a1de9b526ca67070bc7a9c72fb548b23
  main28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main30
                   Main.main29) -}
40e02198e0cd17e7d970d209d351a9d7
  main29 :: [GHC.Types.Char]
  {- Unfolding: (case Main.isDerangement_$sisPermutation
                        Main.permutationTestList
                        Main.permutationTestList of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
44ddb9097779558b7596e4d0209f99ed
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Done"#) -}
8df5e3c79142b569a0230844bd943874
  main30 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Testing same list: "#) -}
9881061f1e42ab18b9d0a97bf3c02499
  main31 :: GHC.Base.String
  {- Unfolding: (case Lecture2.quicksort
                        @ (Main.Prop GHC.Types.Any)
                        (Main.$fOrdProp @ GHC.Types.Any)
                        (Main.permutationProperties @ GHC.Types.Any) of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        GHC.Show.showList__4
                        (GHC.Types.[] @ GHC.Types.Char)
                   : x xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.showList__3
                        (case x of wild1 { Main.Prop ds ds1 ->
                         let {
                           z :: [GHC.Types.Char]
                           = let {
                               lvl43 :: [GHC.Types.Char]
                               = GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showList__2
                                   (GHC.Types.[] @ GHC.Types.Char)
                             } in
                             letrec {
                               showl :: [Main.Prop GHC.Types.Any] -> GHC.Base.String
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ (ds2 :: [Main.Prop GHC.Types.Any]) ->
                                 case ds2 of wild2 {
                                   [] -> lvl43
                                   : y ys
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showList__1
                                        (case y of wild3 { Main.Prop ds3 ds4 ->
                                         let {
                                           z1 :: [GHC.Types.Char] = showl ys
                                         } in
                                         letrec {
                                           go :: [GHC.Types.Char] -> [GHC.Types.Char]
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds5 :: [GHC.Types.Char]) ->
                                             case ds5 of wild4 {
                                               [] -> z1
                                               : y1 ys1
                                               -> GHC.Types.: @ GHC.Types.Char y1 (go ys1) }
                                         } in
                                         go ds3 }) }
                             } in
                             showl xs
                         } in
                         letrec {
                           go :: [GHC.Types.Char] -> [GHC.Types.Char]
                             {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds2 :: [GHC.Types.Char]) ->
                             case ds2 of wild2 {
                               [] -> z : y ys -> GHC.Types.: @ GHC.Types.Char y (go ys) }
                         } in
                         go ds }) }) -}
fcd7ed9c4e02e914948754394afd8247
  main32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main33) -}
66c5c84588d06ddad3428a6e4ccaed32
  main33 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \== Assignment 4 (Recognizing Permutations) =="#) -}
89dd361e15459adfd33d9b05cc5325a9
  main34 :: GHC.Base.String
  {- Unfolding: (case Lecture2.quicksort
                        @ (Main.Prop GHC.Types.Any)
                        (Main.$fOrdProp @ GHC.Types.Any)
                        (Main.properties @ GHC.Types.Any) of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        GHC.Show.showList__4
                        (GHC.Types.[] @ GHC.Types.Char)
                   : x xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.showList__3
                        (case x of wild1 { Main.Prop ds ds1 ->
                         let {
                           z :: [GHC.Types.Char]
                           = let {
                               lvl43 :: [GHC.Types.Char]
                               = GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showList__2
                                   (GHC.Types.[] @ GHC.Types.Char)
                             } in
                             letrec {
                               showl :: [Main.Prop GHC.Types.Any] -> GHC.Base.String
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ (ds2 :: [Main.Prop GHC.Types.Any]) ->
                                 case ds2 of wild2 {
                                   [] -> lvl43
                                   : y ys
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showList__1
                                        (case y of wild3 { Main.Prop ds3 ds4 ->
                                         let {
                                           z1 :: [GHC.Types.Char] = showl ys
                                         } in
                                         letrec {
                                           go :: [GHC.Types.Char] -> [GHC.Types.Char]
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds5 :: [GHC.Types.Char]) ->
                                             case ds5 of wild4 {
                                               [] -> z1
                                               : y1 ys1
                                               -> GHC.Types.: @ GHC.Types.Char y1 (go ys1) }
                                         } in
                                         go ds3 }) }
                             } in
                             showl xs
                         } in
                         letrec {
                           go :: [GHC.Types.Char] -> [GHC.Types.Char]
                             {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds2 :: [GHC.Types.Char]) ->
                             case ds2 of wild2 {
                               [] -> z : y ys -> GHC.Types.: @ GHC.Types.Char y (go ys) }
                         } in
                         go ds }) }) -}
461135ba04f3e546225a7a45d952b771
  main35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main36) -}
fa7ee90460450ab58e831f91a97b41d2
  main36 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \== Assignment 3 (Testing properties strength) =="#) -}
cc0d5a78fac14e4cafa805b68df63721
  main37 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Main.checkTriangleFunction
                         Main.main46
                         Main.main45
                         Main.main45
                         Lab2.NoTriangle)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case (Main.checkTriangleFunction
                         Main.main45
                         Main.main45
                         Main.main45
                         Lab2.Equilateral)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case (Main.checkTriangleFunction
                         Main.main44
                         Main.main43
                         Main.main42
                         Lab2.Rectangular)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case (Main.checkTriangleFunction
                         Main.main41
                         Main.main40
                         Main.main40
                         Lab2.Isosceles)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 (Main.checkTriangleFunction
                    Main.main45
                    Main.main39
                    Main.main38
                    Lab2.Other)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   ipv6 } } } }) -}
2a6b421a5e2829006a529762ad74577b
  main38 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (12) -}
6f2c86891d894f2b709a4a44db033561
  main39 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (11) -}
9c64945b12a9dc346f784dcf6d96790c
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
6f730faef8614d6aa998a6ec966f2e69
  main40 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (15) -}
669a35c04e5d175929380d3dc476557e
  main41 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (20) -}
e58898b1c38ce63ba60ba8bb44d84a7a
  main42 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (5) -}
1fdf5518725013b9325820f34f782f96
  main43 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
57fc886aa21c86389239d549a1b6ea34
  main44 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
2ea6a8161e6a114c712ad57d5abc09ba
  main45 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10) -}
06463ff50006ac52aeb68c4107b5afa2
  main46 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (90) -}
94aa584b43c9b9843b7c6e138d3f251c
  main47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main48) -}
52b5f7e4cccbe5d03c08fab58aa2d3bb
  main48 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \== Assignment 2 (Recognizing triangles) =="#) -}
e4797b13914d338c4de8ba3b223ca734
  main49 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Types.Int
                   @ GHC.Types.Bool
                   GHC.Show.$fShowInt
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.genBigNumbers1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   (Test.QuickCheck.Property.forAll2 @ GHC.Types.Int)
                   Main.testQuartiles
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
419619a114ae83ff0f51fc9f8b1f3ec1
  main5 :: GHC.Base.String
  {- Unfolding: (case Lecture2.quicksort
                        @ (Main.Prop GHC.Types.Any)
                        (Main.$fOrdProp @ GHC.Types.Any)
                        (Main.derangementProperties @ GHC.Types.Any) of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        GHC.Show.showList__4
                        (GHC.Types.[] @ GHC.Types.Char)
                   : x xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.showList__3
                        (case x of wild1 { Main.Prop ds ds1 ->
                         let {
                           z :: [GHC.Types.Char]
                           = let {
                               lvl43 :: [GHC.Types.Char]
                               = GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showList__2
                                   (GHC.Types.[] @ GHC.Types.Char)
                             } in
                             letrec {
                               showl :: [Main.Prop GHC.Types.Any] -> GHC.Base.String
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ (ds2 :: [Main.Prop GHC.Types.Any]) ->
                                 case ds2 of wild2 {
                                   [] -> lvl43
                                   : y ys
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showList__1
                                        (case y of wild3 { Main.Prop ds3 ds4 ->
                                         let {
                                           z1 :: [GHC.Types.Char] = showl ys
                                         } in
                                         letrec {
                                           go :: [GHC.Types.Char] -> [GHC.Types.Char]
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds5 :: [GHC.Types.Char]) ->
                                             case ds5 of wild4 {
                                               [] -> z1
                                               : y1 ys1
                                               -> GHC.Types.: @ GHC.Types.Char y1 (go ys1) }
                                         } in
                                         go ds3 }) }
                             } in
                             showl xs
                         } in
                         letrec {
                           go :: [GHC.Types.Char] -> [GHC.Types.Char]
                             {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds2 :: [GHC.Types.Char]) ->
                             case ds2 of wild2 {
                               [] -> z : y ys -> GHC.Types.: @ GHC.Types.Char y (go ys) }
                         } in
                         go ds }) }) -}
d651d853fc7134643a5f484b68702ae9
  main50 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Safe, but without QuickCheck: "#) -}
780672c1a65b84e20d7ce692e8d22ffa
  main51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main52) -}
c055ffec4b9cb5216d86f39da01734c7
  main52 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("== Assignment 1 (Random floating point numbers) =="#) -}
60fba5beb429aa210064abc08141ac38
  main53 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
c418c7038304487c45289671297d534f
  main6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main7) -}
b4de1d5ef00c99201c9901b49f8c8e19
  main7 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \== Assignment 5 (Recognizing and generating derangements) =="#) -}
3b2f06dc64466c9d34b90159fff9abc8
  main8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main28
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main25
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main22
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main19
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main16
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main12
                        GHC.Types.True
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main9
                   GHC.Types.True
                   ipv10 } } } } } }) -}
b64a2845295f81efb38d4ad2bb3d234f
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main11
                   Main.main10) -}
e4a42ad4edcb04950d7aec67c0d4316d
  main_$spropAllRotations :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (origList :: [GHC.Types.Int]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case GHC.List.$wlenAcc
                             @ GHC.Types.Int
                             wild
                             0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                      } in
                      case GHC.Prim.># 1# y of lwild {
                        DEFAULT
                        -> letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <L,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case Main.isDerangement_$sisPermutation
                                      wild
                                      (Main.rotate @ GHC.Types.Int (GHC.Types.I# x) wild) of wild1 {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True
                                 -> case GHC.Prim.==# x y of lwild1 {
                                      DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                           } in
                           go 1#
                        1# -> GHC.Types.True } } }) -}
52c52b03e105f00871e3d75825fccd60
  main_$spropAllSmaller :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (origList :: [GHC.Types.Int]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case GHC.List.$wlenAcc
                             @ GHC.Types.Int
                             wild
                             0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                      } in
                      case GHC.Prim.># 1# y of lwild {
                        DEFAULT
                        -> let {
                             lvl32 :: GHC.Types.Bool
                             = Main.isDerangement_$sisPermutation
                                 wild
                                 (GHC.Types.[] @ GHC.Types.Int)
                           } in
                           letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case GHC.Prim.<# 0# x of lwild1 {
                                 DEFAULT
                                 -> case lvl32 of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild2 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                                 1#
                                 -> case Main.isDerangement_$sisPermutation
                                           wild
                                           (GHC.List.$wunsafeTake @ GHC.Types.Int x wild) of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild2 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#)
                                           1# -> GHC.Types.True } } }
                           } in
                           go 1#
                        1# -> GHC.Types.True } } }) -}
ce4e094c17aed35803ae7fa0260eab4c
  main_$spropAllSwapped :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (origList :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc
                        @ GHC.Types.Int
                        origList
                        0# of ww2 { DEFAULT ->
                 case GHC.Prim.># ww2 1# of lwild {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 2#
                      } in
                      case GHC.Prim.># 0# y of lwild1 {
                        DEFAULT
                        -> letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case Main.isDerangement_$sisPermutation
                                      origList
                                      (Main.$wswapAt @ GHC.Types.Int x origList) of wild {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True
                                 -> case GHC.Prim.==# x y of lwild2 {
                                      DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                           } in
                           go 0#
                        1# -> GHC.Types.True } } }) -}
b54fc46995c11ea29c858432669f8509
  name :: Main.Prop a -> GHC.Base.String
  RecSel Left Main.Prop
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Main.Prop a) ->
                 case ds of wild { Main.Prop ds1 ds2 -> ds1 }) -}
65032c09ddd2c8b1f98a09489dcff781
  oddListSizeReverse :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (list :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int list 0# of ww2 { DEFAULT ->
                 case GHC.Prim.remInt# ww2 2# of wild {
                   DEFAULT
                   -> case Main.allDifferent_$sallDifferent list of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case Main.isDerangement
                                  list
                                  (GHC.List.reverse1
                                     @ GHC.Types.Int
                                     list
                                     (GHC.Types.[] @ GHC.Types.Int)) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } }
                   0# -> GHC.Types.True } }) -}
af257bdf9c61c78b972f402459be4d01
  oddListSizeSwapped :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (list :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int list 0# of ww2 { DEFAULT ->
                 case GHC.Prim.remInt# ww2 2# of wild {
                   DEFAULT
                   -> case Main.allDifferent_$sallDifferent list of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case Main.propDeranSwapped list of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } }
                   0# -> GHC.Types.True } }) -}
b2eb3d6a977e7471f5fcdee2e23cbdb2
  p1 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Int) ->
                 case x of wild2 { GHC.Types.I# x1 ->
                 case GHC.Prim.remInt# x1 2# of wild {
                   DEFAULT -> GHC.Types.False
                   0#
                   -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># x1 3#) } }) -}
4f9773f087d33e44584b721ec0514e1b
  p2 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Int) ->
                 case x of wild2 { GHC.Types.I# x1 ->
                 case GHC.Prim.remInt# x1 2# of wild {
                   DEFAULT -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># x1 3#)
                   0# -> GHC.Types.True } }) -}
cdf918deacfd39faecb9d35ceae5a503
  p3 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wp4 ww1 }) -}
80c913a5e0c249579c515ebbea12b751
  p4 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wp4 ww1 }) -}
fdb4193060385bb29e3549fc27a64206
  permutationProperties :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.permutationProperties16 @ a)
                   (Main.permutationProperties1 @ a)) -}
f0fa489c8b8008528203268df24a1455
  permutationProperties1 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.permutationProperties14 @ a)
                   (Main.permutationProperties2 @ a)) -}
c37fd5d2b3fd780c20b6734409a6b20f
  permutationProperties10 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties18
                   Main.permutationProperties11) -}
4ecdff2710d6d84beb66778a1117f06c
  permutationProperties11 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (size :: GHC.Types.Int) ->
                 case size of wild1 { GHC.Types.I# y ->
                 Main.main_$spropAllSmaller
                   (GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n 1# y)) }) -}
adf5586b49df2373c64c5a342f3dfdc9
  permutationProperties12 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties22
                   Main.permutationProperties13) -}
b113bdc986ab103a6659ccf1b0a04f06
  permutationProperties13 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (size :: GHC.Types.Int) ->
                 case size of wild1 { GHC.Types.I# y ->
                 Main.main_$spropAllSwapped
                   (GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n 1# y)) }) -}
435805da2b9663300df3a45024f14a08
  permutationProperties14 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties26
                   Main.permutationProperties15) -}
c3b15263d49edc5334760c4f5fddb00a
  permutationProperties15 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (size :: GHC.Types.Int) ->
                 case size of wild1 { GHC.Types.I# y ->
                 Main.main_$spropAllRotations
                   (GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n 1# y)) }) -}
a353cfd908f1d61c56bff3e81cc4a241
  permutationProperties16 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties30
                   Main.permutationProperties17) -}
6ad2c1e8e6dede8820306fa9b77e6435
  permutationProperties17 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wpermutationProperties2 ww1 }) -}
dee507cfc29e9c85a5a4c07363c9a763
  permutationProperties2 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.permutationProperties12 @ a)
                   (Main.permutationProperties3 @ a)) -}
d1461391674fa799d8c5533f3683ea09
  permutationProperties3 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.permutationProperties10 @ a)
                   (Main.permutationProperties4 @ a)) -}
1c5bb87f00f75e5893b1b998a1f20acb
  permutationProperties4 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.permutationProperties8 @ a)
                   (Main.permutationProperties5 @ a)) -}
af84d1907292e1eaab6b364af83d8939
  permutationProperties5 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.permutationProperties6 @ a)
                   (GHC.Types.[] @ (Main.Prop a))) -}
a83101577ece145eed062f5dfdfb6b9c
  permutationProperties6 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties9
                   Main.permutationProperties7) -}
cb8a1c20cfe010f399e4a0d8a050d716
  permutationProperties7 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wpermutationProperties ww1 }) -}
4064047bcf05bf40fb9d9a4ae53243e9
  permutationProperties8 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 Main.Prop
                   @ a
                   Main.derangementProperties14
                   Main.permutationProperties9) -}
1dded8e99ed2d08ea35f0d338fb5f396
  permutationProperties9 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wpermutationProperties1 ww1 }) -}
d263853c98a043707b9b8c2d5a0c114c
  permutationTestList :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.permutationTestList5
                   Main.permutationTestList1) -}
4f7d16301a3b1d0f98911e0e70e78060
  permutationTestList1 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.permutationTestList4
                   Main.permutationTestList2) -}
f71fa97651f4d6b0e64e69ca52ac985a
  permutationTestList2 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.permutationTestList3
                   (GHC.Types.[] @ GHC.Types.Int)) -}
17092f6ded996c1ffdcef079befa3360
  permutationTestList3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
5f214ee729614aca0ed296882f49835e
  permutationTestList4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
87cbe41af0f1f1eea8aca8a80952bc3d
  permutationTestList5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
5edc6882111bb0e7c8ef306e05bcbc34
  propAllDeranRotations :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (origList :: [GHC.Types.Int]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case Main.allDifferent_$sallDifferent wild of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case GHC.List.$wlenAcc
                                  @ GHC.Types.Int
                                  wild
                                  0# of ww2 { DEFAULT ->
                           let {
                             y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                           } in
                           case GHC.Prim.># 1# y of lwild {
                             DEFAULT
                             -> letrec {
                                  go :: GHC.Prim.Int# -> GHC.Types.Bool
                                    <join 1> {- Arity: 1, Strictness: <L,U> -}
                                  = \ (x :: GHC.Prim.Int#) ->
                                    case Main.isDerangement
                                           wild
                                           (Main.rotate
                                              @ GHC.Types.Int
                                              (GHC.Types.I# x)
                                              wild) of wild2 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild1 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                                } in
                                go 1#
                             1# -> GHC.Types.True } } } }) -}
f0d89feb896cf2de3f9d6588b5967f88
  propAllDeranSmaller :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (origList :: [GHC.Types.Int]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case GHC.List.$wlenAcc
                             @ GHC.Types.Int
                             wild
                             0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                      } in
                      case GHC.Prim.># 1# y of lwild {
                        DEFAULT
                        -> let {
                             lvl32 :: GHC.Types.Bool
                             = Main.isDerangement wild (GHC.Types.[] @ GHC.Types.Int)
                           } in
                           letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case GHC.Prim.<# 0# x of lwild1 {
                                 DEFAULT
                                 -> case lvl32 of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild2 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                                 1#
                                 -> case Main.isDerangement
                                           wild
                                           (GHC.List.$wunsafeTake @ GHC.Types.Int x wild) of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild2 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#)
                                           1# -> GHC.Types.True } } }
                           } in
                           go 1#
                        1# -> GHC.Types.True } } }) -}
81ed22efd1de7f06053041d2d075199c
  propAllRotations :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case GHC.List.$wlenAcc @ a wild 0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                      } in
                      case GHC.Prim.># 1# y of lwild {
                        DEFAULT
                        -> letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <L,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case Main.isPermutation
                                      @ a
                                      $dEq
                                      wild
                                      (Main.rotate @ a (GHC.Types.I# x) wild) of wild1 {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True
                                 -> case GHC.Prim.==# x y of lwild1 {
                                      DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                           } in
                           go 1#
                        1# -> GHC.Types.True } } }) -}
712eeca539baf93cda6fa7ee41d6f85b
  propAllSmaller :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case GHC.List.$wlenAcc @ a wild 0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                      } in
                      case GHC.Prim.># 1# y of lwild {
                        DEFAULT
                        -> let {
                             lvl32 :: GHC.Types.Bool
                             = Main.isPermutation @ a $dEq wild (GHC.Types.[] @ a)
                           } in
                           letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case GHC.Prim.<# 0# x of lwild1 {
                                 DEFAULT
                                 -> case lvl32 of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild2 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                                 1#
                                 -> case Main.isPermutation
                                           @ a
                                           $dEq
                                           wild
                                           (GHC.List.$wunsafeTake @ a x wild) of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case GHC.Prim.==# x y of lwild2 {
                                           DEFAULT -> go (GHC.Prim.+# x 1#)
                                           1# -> GHC.Types.True } } }
                           } in
                           go 1#
                        1# -> GHC.Types.True } } }) -}
d75f376db3abfa84410b190310dde2f5
  propAllSwapped :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><S,U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 case GHC.List.$wlenAcc @ a origList 0# of ww2 { DEFAULT ->
                 case GHC.Prim.># ww2 1# of lwild {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 2#
                      } in
                      case GHC.Prim.># 0# y of lwild1 {
                        DEFAULT
                        -> letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case Main.isPermutation
                                      @ a
                                      $dEq
                                      origList
                                      (Main.$wswapAt @ a x origList) of wild {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True
                                 -> case GHC.Prim.==# x y of lwild2 {
                                      DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                           } in
                           go 0#
                        1# -> GHC.Types.True } } }) -}
dda0832bf74df6ebdb2a21de84843cfa
  propBigger :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (origList :: [GHC.Types.Int]) ->
                 Main.isDerangement_$sisPermutation
                   origList
                   (GHC.Types.:
                      @ GHC.Types.Int
                      Main.derangementProperties13
                      origList)) -}
73eed2d74bb2a06270260b8e5ee41731
  propDeranBigger :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (origList :: [GHC.Types.Int]) ->
                 Main.isDerangement
                   origList
                   (GHC.Types.:
                      @ GHC.Types.Int
                      Main.derangementProperties13
                      origList)) -}
7d4d536f526d99f42bbe77dd623e2076
  propDeranIncreased ::
    GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: [GHC.Types.Int]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wpropDeranIncreased ww1 w1 }) -}
981d4c6395b5298a3f2b67d65dc2e06c
  propDeranReversed :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (origList :: [GHC.Types.Int]) ->
                 case Main.allDifferent_$sallDifferent origList of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> Main.isDerangement
                        origList
                        (GHC.List.reverse1
                           @ GHC.Types.Int
                           origList
                           (GHC.Types.[] @ GHC.Types.Int)) }) -}
f70d98c2063760a798f42ca9777b583e
  propDeranRotated ::
    GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (rotation :: GHC.Types.Int) (origList :: [GHC.Types.Int]) ->
                 Main.isDerangement
                   origList
                   (Main.rotate @ GHC.Types.Int rotation origList)) -}
c53e250e101d90b7be0b7a20ee008f87
  propDeranSmaller ::
    GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: [GHC.Types.Int]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wpropDeranSmaller ww1 w1 }) -}
187ea8c80988e897b0995fd12e76eb87
  propDeranSwapped :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (origList :: [GHC.Types.Int]) ->
                 case Main.allDifferent_$sallDifferent origList of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.List.$wlenAcc
                             @ GHC.Types.Int
                             origList
                             0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 2#
                      } in
                      case GHC.Prim.<# y 2# of lwild {
                        DEFAULT
                        -> Main.isDerangement
                             origList
                             (Main.$wswapAt
                                @ GHC.Types.Int
                                0#
                                (let {
                                   y' :: GHC.Prim.Int# = GHC.Prim.-# y 2#
                                 } in
                                 letrec {
                                   go_up :: GHC.Prim.Int# -> [GHC.Types.Int]
                                     {- Arity: 1, Strictness: <S,U> -}
                                   = \ (x :: GHC.Prim.Int#) ->
                                     case GHC.Prim.># x y' of lwild1 {
                                       DEFAULT
                                       -> Main.$wswapAt @ GHC.Types.Int x (go_up (GHC.Prim.+# x 2#))
                                       1# -> Main.$wswapAt @ GHC.Types.Int x origList }
                                 } in
                                 go_up 2#))
                        1#
                        -> case GHC.Prim.<# y 0# of lwild1 {
                             DEFAULT
                             -> Main.isDerangement
                                  origList
                                  (Main.$wswapAt @ GHC.Types.Int 0# origList)
                             1# -> Main.isDerangement origList origList } } } }) -}
4c26d7e46aaac1abe1e845f9d2df4e76
  propIncreased :: GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,U>,
     Unfolding: (\ (amount :: GHC.Types.Int)
                   (origList :: [GHC.Types.Int]) ->
                 Main.isDerangement_$sisPermutation
                   origList
                   (GHC.Base.map
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      (\ (ds :: GHC.Types.Int) -> GHC.Num.$fNumInt_$c+ ds amount)
                      origList)) -}
5781ac6ee5a5eeaea20835e0a6f3a2e8
  propListOfSize ::
    ([GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (propFunction :: [GHC.Types.Int] -> GHC.Types.Bool)
                   (size :: GHC.Types.Int) ->
                 propFunction
                   (case size of wild1 { GHC.Types.I# y ->
                    GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n 1# y) })) -}
d2d19710df02f327cd1de024d34fb09d
  propReversed :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 Main.isPermutation
                   @ a
                   $dEq
                   origList
                   (GHC.List.reverse1 @ a origList (GHC.Types.[] @ a))) -}
2f217d741b6b2f31363a30bff00ae2f4
  propRotated ::
    GHC.Classes.Eq a => GHC.Types.Int -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (rotation :: GHC.Types.Int)
                   (origList :: [a]) ->
                 Main.isPermutation
                   @ a
                   $dEq
                   origList
                   (Main.rotate @ a rotation origList)) -}
325d11e473bc86166b5c639cd28fa13e
  propSmaller ::
    GHC.Classes.Eq a => GHC.Types.Int -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S(S),1*U(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Classes.Eq a) (w1 :: GHC.Types.Int) (w2 :: [a]) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$wpropSmaller @ a w ww1 w2 }) -}
bc04f0b15e641b532d4baba3f6337a9b
  propSwapped ::
    GHC.Classes.Eq a => GHC.Types.Int -> [a] -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (index :: GHC.Types.Int)
                   (origList :: [a]) ->
                 Main.isPermutation
                   @ a
                   $dEq
                   origList
                   (Main.swapAt @ a index origList)) -}
0782db639333caacb357b9a5e46529db
  properties :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties17 @ a)
                   (Main.properties1 @ a)) -}
49440fddd6dc637d72d34fbd65ca8bc0
  properties1 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties14 @ a)
                   (Main.properties2 @ a)) -}
0b2064bb66cbba054292b78e39753c93
  properties10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p4"#) -}
e0b99ea16bf6cef8b946f1d7adaed17f
  properties11 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties12 Main.p4) -}
38b648ccf1d5feee920e5eededddf345
  properties12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties13) -}
81a0d671928693e18b0cc495c48b4e8a
  properties13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p3"#) -}
84b74c07ddb34fbbc56f86124f6398c8
  properties14 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties15 Main.p2) -}
d90078e430d1e7a0218ea20e39763ff7
  properties15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties16) -}
cfe7539edc111c27f1ce4a136164816f
  properties16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p2"#) -}
f8deceb661829b57e48017aea87c0489
  properties17 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties18 Main.p1) -}
95c5937877e8aedc7e5380ddbd9efbd1
  properties18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties19) -}
1d4f846fbf607bf97155f3ee62f2cf82
  properties19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p1"#) -}
58f18374f9de8be8955e20f89bf0bc44
  properties2 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties11 @ a)
                   (Main.properties3 @ a)) -}
a8575ff988eabe6481a5a3fabaed908a
  properties3 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties8 @ a)
                   (Main.properties4 @ a)) -}
5959686cf4a42fec72c2b1b3838366b2
  properties4 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties5 @ a)
                   (GHC.Types.[] @ (Main.Prop a))) -}
79c7dc67bb6779f767434ef503b9c323
  properties5 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties6 Main.$seven) -}
608519e9431fd60cf273bb9bfd945d52
  properties6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties7) -}
46a3e61e2ccec3609a264f1163b27d10
  properties7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p5"#) -}
f8ba5c1b3f70d3df6bcd4d3ad9bf2aa0
  properties8 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties9 Main.p4) -}
3925dafaf54ff6c7287aeda8c82a5144
  properties9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties10) -}
b54fc46995c11ea29c858432669f8509
  propertyFunction :: Main.Prop a -> GHC.Types.Int -> GHC.Types.Bool
  RecSel Left Main.Prop
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Main.Prop a) ->
                 case ds of wild { Main.Prop ds1 ds2 -> ds2 }) -}
c600f45d19a1a9afe90d8e559eaa11fb
  rotate :: GHC.Types.Int -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a (ds :: GHC.Types.Int) (ds1 :: [a]) ->
                 case ds1 of wild {
                   [] -> GHC.Types.[] @ a
                   : ipv ipv1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      letrec {
                        xs' :: [a] = GHC.Base.++_$s++ @ a xs' ipv ipv1
                      } in
                      case GHC.Prim.<=# x 0# of lwild {
                        DEFAULT -> Main.rotate1 @ a (Main.$wunsafeDrop @ a x xs') wild
                        1# -> Main.rotate1 @ a xs' wild } } }) -}
480efeb0636ffa66ba7a5a09b9d7b291
  rotate1 :: [a] -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
afa5087ad4582569d3148406ed390bff
  swapAt :: GHC.Types.Int -> [a] -> [a]
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: [a]) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wswapAt @ a ww1 w1 }) -}
16754288e9d2c2e643e7cbf49cd24145
  testDerangements :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main4 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
1406547b5bc657e9eef3fb5a2e7ae6ac
  testPermutations :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main8 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
99b2ef0a7e59870d72c7873e1bddcddf
  testPropAllDeranSmaller :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (list :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int list 0# of ww2 { DEFAULT ->
                 case GHC.Prim.># ww2 1# of lwild {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> case Main.propAllDeranSmaller list of wild {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } }) -}
ac55dc39663767160eb4f9c2109ed25b
  testPropDeranBigger :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (list :: [GHC.Types.Int]) ->
                 case Main.isDerangement
                        list
                        (GHC.Types.:
                           @ GHC.Types.Int
                           Main.derangementProperties13
                           list) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f7ecaa36790e14fdc8b7360edc388e37
  testPropDeranIncreased ::
    GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(1*U)><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: [GHC.Types.Int]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wtestPropDeranIncreased ww1 w1 }) -}
dfb2b07d7b7e1be3fcbdf623f6ebdf4e
  testQuartiles :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wtestQuartiles ww1 }) -}
ba502bb780d9f40dba711ac9e26e9e62
  testQuartilesSafe :: GHC.Types.Int -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.testQuartilesSafe1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
8c129f4f0b33524c614949793f618e63
  testQuartilesSafe1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wtestQuartilesSafe ww1 w1 }) -}
f0e7640ebfd5d541543e40850909b3e0
  testTriangle :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main37 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ee74330f3ede76cb0524cdd7ea2325ef
  triangle ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Lab2.Shape
  {- Arity: 3, Strictness: <S,U><S,U><S,U>,
     Unfolding: (\ (x :: GHC.Integer.Type.Integer)
                   (y :: GHC.Integer.Type.Integer)
                   (z :: GHC.Integer.Type.Integer) ->
                 let {
                   ds :: [GHC.Types.Char] = Main.$wtriangleType x y z
                 } in
                 case GHC.Base.eqString ds Main.triangle7 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString ds Main.triangle5 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString ds Main.triangle3 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString ds Main.triangle1 of wild3 {
                                  GHC.Types.False -> Lab2.Other GHC.Types.True -> Lab2.Rectangular }
                             GHC.Types.True -> Lab2.NoTriangle }
                        GHC.Types.True -> Lab2.Isosceles }
                   GHC.Types.True -> Lab2.Equilateral }) -}
a4ee19d6afe251450ce53248bbccbfbc
  triangle1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle2) -}
388f0dafd543bf503fc5dabaa62a6fa5
  triangle10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Other"#) -}
8ea8754ad4d0b2bea433d428ec59e6fb
  triangle2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rectangular"#) -}
d33c9b85f0558ddf6502ba99e9ed2548
  triangle3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle4) -}
b27dd0ee955cd57b98be145e419903bd
  triangle4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Not a triangle"#) -}
f39059380bffcf8a90d28e325459003a
  triangle5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle6) -}
916b525dd7cc70e72bd08b89c8277efe
  triangle6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Isosceles"#) -}
32059da5ea272c47be4bc783344f20d5
  triangle7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle8) -}
e7ce84b020e42dd1ef5ff7ad0d904b9c
  triangle8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Equilateral"#) -}
7c758a7078c526fda7d09b0dae10232c
  triangle9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle10) -}
be45505db7405e47766fce512bda34c0
  triangleType ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                          GHC.Integer.Type.Integer)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 Main.$wtriangleType ww1 ww2 ww3 }) -}
aee61897f6d6ba40e9ba4c9f64572571
  withinPercentage ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ (number :: GHC.Types.Int)
                   (percentage :: GHC.Types.Int)
                   (ofNumber :: GHC.Types.Int) ->
                 case ofNumber of wild { GHC.Types.I# x ->
                 case GHC.Classes.divInt# x 100# of ww4 { DEFAULT ->
                 case percentage of wild1 { GHC.Types.I# y ->
                 case number of wild2 { GHC.Types.I# x1 ->
                 let {
                   y1 :: GHC.Prim.Int# = GHC.Prim.*# ww4 y
                 } in
                 case GHC.Prim.>=# x1 (GHC.Prim.-# (GHC.Prim.-# x y1) 1#) of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x1 (GHC.Prim.+# (GHC.Prim.+# x y1) 1#)) } } } } }) -}
instance GHC.Classes.Eq [Main.Prop] = Main.$fEqProp
instance GHC.Classes.Ord [Main.Prop] = Main.$fOrdProp
instance GHC.Show.Show [Main.Prop] = Main.$fShowProp
"SPEC allDifferent @ Int" forall ($dEq :: GHC.Classes.Eq
                                            GHC.Types.Int)
  Main.allDifferent @ GHC.Types.Int $dEq
  = Main.allDifferent_$sallDifferent
"SPEC isPermutation @ Int" forall ($dEq :: GHC.Classes.Eq
                                             GHC.Types.Int)
  Main.isPermutation @ GHC.Types.Int $dEq
  = Main.isDerangement_$sisPermutation
"SPEC propAllRotations @ Int" forall ($dEq :: GHC.Classes.Eq
                                                GHC.Types.Int)
  Main.propAllRotations @ GHC.Types.Int $dEq
  = Main.main_$spropAllRotations
"SPEC propAllSmaller @ Int" forall ($dEq :: GHC.Classes.Eq
                                              GHC.Types.Int)
  Main.propAllSmaller @ GHC.Types.Int $dEq
  = Main.main_$spropAllSmaller
"SPEC propAllSwapped @ Int" forall ($dEq :: GHC.Classes.Eq
                                              GHC.Types.Int)
  Main.propAllSwapped @ GHC.Types.Int $dEq
  = Main.main_$spropAllSwapped
"SPEC/Main $fArbitraryZipList2 @ Int" [orphan] [0] forall (w :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                  GHC.Types.Int)
  Test.QuickCheck.Arbitrary.$fArbitraryZipList2 @ GHC.Types.Int w
  = Main.$s$fArbitraryZipList2
"SPEC/Main even @ Int" [orphan] forall ($dIntegral :: GHC.Real.Integral
                                                        GHC.Types.Int)
  GHC.Real.even @ GHC.Types.Int $dIntegral = Main.$seven
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

