
==================== FINAL INTERFACE ====================
2018-09-13 10:35:05.219062078 UTC

interface main:Main 8043
  interface hash: b2bead3a9c232eb6dd47f43ce1b0478a
  ABI hash: b3035940bc0eb225a4b25ae80ca7ba0e
  export-list hash: 127b9aada40ebba1f5795752d5bdcd9f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8e9ed84417c9432185130cd9861fe2b6
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.allTriple
  Main.calcQuartile
  Main.checkTestResult
  Main.getAmountInQuartile
  Main.main
  Main.testQuartiles
  Main.triangleType
  Main.withinPercentage
module dependencies: Lab2
package dependencies: QuickCheck-2.11.3 array-0.5.2.0
                      base-4.11.1.0* containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
                      pretty-1.1.3.6 primitive-0.6.3.0 random-1.1*
                      template-haskell-2.13.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck e00d138ee3234e83a31cc3113c8c8ffb
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  Lab2 58f142ce979bc82be2c0114c7ac77986
  exports: a5316334a3f9b37ecaea00f9011fdb2b
  --> b3887377deb1d7cc8d1a797733886330
  probs 93788a82fb6e0e80b0f083ea2b1d6786
import  -/  random-1.1:System.Random 31994b60c33f032d578c64a928f735f7
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
a1f446ddf5439d4bda40120cb6f0aaf5
  $wallTriple ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><C(S),C(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (w :: GHC.Integer.Type.Integer -> GHC.Types.Bool) ->
                 case w ww of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case w ww1 of wild1 {
                        GHC.Types.False -> GHC.Types.False GHC.Types.True -> w ww2 } }) -}
094cb655a6aab4cbad6900287a8352ba
  $wtestQuartiles ::
    GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lab2.$wprobs ww w of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case GHC.Prim.># ww 0# of lwild {
                      DEFAULT -> GHC.Types.True
                      1#
                      -> let {
                           lvl :: GHC.Prim.Int# = GHC.Prim.uncheckedIShiftRA# ww 2#
                         } in
                         let {
                           lvl1 :: GHC.Types.Int
                           = case GHC.Classes.divInt# lvl 100# of v { DEFAULT ->
                             GHC.Types.I# v }
                         } in
                         letrec {
                           go :: [GHC.Types.Int] -> GHC.Types.Bool
                             <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds :: [GHC.Types.Int]) ->
                             case ds of wild {
                               [] -> GHC.Types.True
                               : y ys
                               -> case lvl1 of v { GHC.Types.I# v1 ->
                                  case y of wild1 { GHC.Types.I# x ->
                                  let {
                                    y1 :: GHC.Prim.Int# = GHC.Prim.*# v1 10#
                                  } in
                                  case GHC.Prim.>=# x (GHC.Prim.-# lvl y1) of lwild1 {
                                    DEFAULT -> GHC.Types.False
                                    1#
                                    -> case GHC.Prim.<=# x (GHC.Prim.+# lvl y1) of lwild2 {
                                         DEFAULT -> GHC.Types.False 1# -> go ys } } } } }
                         } in
                         go (Main.calcQuartile ipv1 Main.getAmountInQuartile2) } #) }) -}
26b2a50807b2ecbb8816d923f9b18501
  $wtriangleType ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.neqInteger#
                        (GHC.Integer.Type.plusInteger
                           (GHC.Integer.Type.plusInteger ww ww1)
                           ww2)
                        Main.main21 of wild {
                   DEFAULT
                   -> case GHC.Integer.Type.eqInteger#
                             ww
                             Main.main20 of wild1 { DEFAULT ->
                      let {
                        $j :: GHC.Base.String <join 0>
                        = let {
                            $j1 :: GHC.Base.String <join 0>
                            = case GHC.Integer.Type.eqInteger# ww ww1 of wild2 {
                                DEFAULT
                                -> case GHC.Integer.Type.eqInteger# ww1 ww2 of wild3 {
                                     DEFAULT
                                     -> case GHC.Integer.Type.eqInteger# ww2 ww of wild4 {
                                          DEFAULT -> Main.main18 1# -> Main.main16 }
                                     1# -> Main.main16 }
                                1# -> Main.main16 }
                          } in
                          let {
                            $j2 :: GHC.Base.String <join 0>
                            = let {
                                $j3 :: GHC.Base.String <join 0>
                                = case GHC.Integer.Type.eqInteger# ww2 Main.main15 of wild2 {
                                    DEFAULT
                                    -> case GHC.Integer.Type.eqInteger# ww2 Main.main14 of wild3 {
                                         DEFAULT -> $j1 1# -> Main.main12 }
                                    1# -> Main.main12 }
                              } in
                              case GHC.Integer.Type.eqInteger# ww1 Main.main15 of wild2 {
                                DEFAULT
                                -> case GHC.Integer.Type.eqInteger# ww1 Main.main14 of wild3 {
                                     DEFAULT -> $j1 1# -> $j3 }
                                1# -> $j3 }
                          } in
                          case GHC.Integer.Type.eqInteger# ww Main.main15 of wild2 {
                            DEFAULT
                            -> case GHC.Integer.Type.eqInteger# ww Main.main14 of wild3 {
                                 DEFAULT -> $j1 1# -> $j2 }
                            1# -> $j2 }
                      } in
                      case wild1 of lwild {
                        DEFAULT -> $j
                        1#
                        -> case GHC.Integer.Type.eqInteger# ww1 Main.main20 of wild2 {
                             DEFAULT -> $j
                             1#
                             -> case GHC.Integer.Type.eqInteger# ww2 Main.main20 of wild3 {
                                  DEFAULT -> $j 1# -> Main.main10 } } } }
                   1# -> Main.main8 }) -}
549a9c1ed82de686591a2e7a5b6c7429
  allTriple ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer)
    -> (GHC.Integer.Type.Integer -> GHC.Types.Bool) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U,U)><C(S),C(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                          GHC.Integer.Type.Integer))
                   (w1 :: GHC.Integer.Type.Integer -> GHC.Types.Bool) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 Main.$wallTriple ww1 ww2 ww3 w1 }) -}
983c1c5ceb5ccc6f7e3e04af5a358742
  calcQuartile ::
    [GHC.Types.Float] -> [GHC.Types.Float] -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
1360b2fe0904050bab925ba79003f352
  checkTestResult :: GHC.Types.Bool -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Bool) ->
                 case ds of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
07e9afa9026195e449fc2901f6e320ce
  checkTestResult1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkTestResult2) -}
fd977f4fe81bf76dcfad9cba3419444e
  checkTestResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test succeeded!"#) -}
4169382264dc63218ac46fc6f81064e7
  checkTestResult3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkTestResult4) -}
50f4966c81758abf29b6b8f80753cc03
  checkTestResult4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test failed!"#) -}
f87ffc90a38bdf25b142b08c5e43f32c
  getAmountInQuartile ::
    GHC.Types.Int -> GHC.Types.IO [GHC.Types.Int]
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getAmountInQuartile1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Types.Int]>_R)) -}
c61e0fe09466a4f80ae3107d71c39b6e
  getAmountInQuartile1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case x of ww { GHC.Types.I# ww1 ->
                 case Lab2.$wprobs ww1 s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, Main.calcQuartile ipv1 Main.getAmountInQuartile2 #) } }) -}
a8ab5a6afd23d27eef1dc8226e21731e
  getAmountInQuartile2 :: [GHC.Types.Float]
  {- Unfolding: (GHC.Real.numericEnumFromThenTo
                   @ GHC.Types.Float
                   GHC.Classes.$fOrdFloat
                   GHC.Float.$fFractionalFloat
                   Main.getAmountInQuartile5
                   Main.getAmountInQuartile4
                   Main.getAmountInQuartile3) -}
59df7f0c0f9d10cc353eb3f30924d76a
  getAmountInQuartile3 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
966ee2eaf7fda2f7cc3cc848f560b5d3
  getAmountInQuartile4 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.25#) -}
e26b34f29ce2f7068141f7d6d6850d3e
  getAmountInQuartile5 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
1f10c973526291ca4c964d076408c7a3
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
47354d894e95198cd628cdc35b0aafd9
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main24
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Main.$wtestQuartiles 10000# ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (case ipv3 of wild {
                           GHC.Types.False -> Main.checkTestResult3
                           GHC.Types.True -> Main.checkTestResult1 })
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main22
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main4
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv8 } } } } }) -}
8652a00f5f10f92bedd6cffca50e00d2
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main11) -}
42d62c429872ba082c0fed04ab126502
  main11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Equilateral"#) -}
c52a58aaddc82cb381e9fca871b03d4e
  main12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main13) -}
a1c18b08d59d7b2dd83502279b60033f
  main13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rectangular"#) -}
5a55d6669224a9db9fd2b4687d4bac6f
  main14 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (45) -}
1dad0909d8b6e6860b5f107e79521e88
  main15 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (90) -}
22e98914460224f7776d9c531f367def
  main16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main17) -}
099e5d530a09e1593f00ffda60027465
  main17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Isosceles"#) -}
7b647fe06ad066a81d428529a789a91a
  main18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main19) -}
081ff1fd36ce63d929c4404023c440a1
  main19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Other"#) -}
21ee1e9ce3c251c7ad2ca4e7f5b78afc
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main3) -}
95507dd2ae8f8f22218fbc0ca95db008
  main20 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (60) -}
01c1c259f91521ff0076c25558672e13
  main21 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (180) -}
cce384b6b2fbeb9485da14b9ef9cff47
  main22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main23) -}
2580da8c0eee1d50d711260f14b35df2
  main23 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \== Assignment 1 =="#) -}
b29e8bde8b63dcd316f56b3b642ee494
  main24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main25) -}
b0fafb09d45f790a37e5a726e0a99e74
  main25 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("== Assignment 1 =="#) -}
d786489430329c2388f0d06705a432b5
  main26 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
44ddb9097779558b7596e4d0209f99ed
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Done"#) -}
2429ede368f0c65d570a6a6fac437be0
  main4 :: GHC.Base.String
  {- Unfolding: (Main.$wtriangleType
                   Main.main7
                   Main.main6
                   Main.main5) -}
f429db77d8b422246b839a92d8978069
  main5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (39) -}
c9496e63cc7b357d7d6f2eacf9824228
  main6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (41) -}
f13cd7a39207399a2e99754339879d6d
  main7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (100) -}
cce4006eb778cff05d020a35001d341c
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main9) -}
258180567a3d4b9a5593733a5b9a6a66
  main9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Not a triangle"#) -}
8d2a5060abe7c06287b2c71cebd29ee1
  testQuartiles :: GHC.Types.Int -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.testQuartiles1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
f53fd903bb1ee44a075fbd3b583e2f2a
  testQuartiles1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wtestQuartiles ww1 w1 }) -}
ff27fc9966dc4fde17771213c86f13b2
  triangleType ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                          GHC.Integer.Type.Integer)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 Main.$wtriangleType ww1 ww2 ww3 }) -}
618be5ece6152176a535236c7d48fc18
  withinPercentage ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ (number :: GHC.Types.Int)
                   (percentage :: GHC.Types.Int)
                   (ofNumber :: GHC.Types.Int) ->
                 case ofNumber of wild { GHC.Types.I# x ->
                 case GHC.Classes.divInt# x 100# of ww4 { DEFAULT ->
                 case percentage of wild1 { GHC.Types.I# y ->
                 case number of wild2 { GHC.Types.I# x1 ->
                 let {
                   y1 :: GHC.Prim.Int# = GHC.Prim.*# ww4 y
                 } in
                 case GHC.Prim.>=# x1 (GHC.Prim.-# x y1) of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x1 (GHC.Prim.+# x y1)) } } } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

