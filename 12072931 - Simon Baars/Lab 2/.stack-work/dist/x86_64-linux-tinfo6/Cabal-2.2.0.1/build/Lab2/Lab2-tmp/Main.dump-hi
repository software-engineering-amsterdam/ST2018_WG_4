
==================== FINAL INTERFACE ====================
2018-09-14 12:29:10.603206215 UTC

interface main:Main 8043
  interface hash: b511f7e2aff5ab715cd9dc0a0a029fbf
  ABI hash: 4ccdc9d2a1d78b55497e4aa284444158
  export-list hash: 81e87ec1ee8ae56f5eb90cd919e7f146
  orphan hash: fa411082c6365fec24248e321ba658ab
  flag hash: 8e9ed84417c9432185130cd9861fe2b6
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.calcQuartile
  Main.checkTestResult
  Main.checkTriangleFunction
  Main.domain
  Main.evenAndMoreThanThree
  Main.evenAndMoreThanThreeOrEvenLeft
  Main.evenAndMoreThanThreeOrEvenRight
  Main.evenOrMoreThanThree
  Main.genBigNumbers
  Main.getAmountInQuartile
  Main.isPermutation
  Main.isPythagorean
  Main.main
  Main.p1
  Main.p2
  Main.p3
  Main.p4
  Main.propAllRotations
  Main.propAllSwapped
  Main.propReversed
  Main.propRotated
  Main.propSwapped
  Main.properties
  Main.rotate
  Main.swapAt
  Main.testQuartiles
  Main.testQuartilesSafe
  Main.testTriangle
  Main.triangle
  Main.triangleType
  Main.withinPercentage
  Main.Prop{Main.Prop name propertyFunction}
module dependencies: Lab2 Lecture2
package dependencies: QuickCheck-2.11.3 array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 pretty-1.1.3.6
                      primitive-0.6.3.0 random-1.1 template-haskell-2.13.0.0
                      tf-random-0.5 time-1.8.0.2 transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck e00d138ee3234e83a31cc3113c8c8ffb
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Arbitrary 749c030890709ce50a65277c8ad56400
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Gen 18d7f741d47ea7234320fe42d69d1321
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Property 2a2442debcbf309292a12478b176466b
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Test 5c80e8a0569651177c75db83b77c7ff4
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.IO.Unsafe c1dfcbb6f65c5fb985b7e5159499b64e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  base-4.11.1.0:System.IO.Unsafe 0a2eb33ad4988fdd87ebf1fb8b419957
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  Lab2 58f142ce979bc82be2c0114c7ac77986
  exports: a5316334a3f9b37ecaea00f9011fdb2b
  --> b3887377deb1d7cc8d1a797733886330
  Equilateral 94296fdd9c3a7b05802aa923c5acc5ae
  Isosceles 8e00bd96027c5cbc0c9b960f3f0d9e4c
  NoTriangle 4bc4364a91974b4106482aeeb9f45dd0
  Other 171209b09813ee871e1c78906bc1342a
  Rectangular ebc803140599615cc2f652994ae189b5
  Shape 4f321edfbfaf3dc5f384e8b53049cebc
  probs 93788a82fb6e0e80b0f083ea2b1d6786
import  -/  Lecture2 217d1f81d64de0e9de04f332a47a0619
  exports: d9f76553a58edbff754f00d8da3dde40
  quicksort f5f5341c1e0adcd33d8eb2c6c2366be5
  stronger 4c551e650a6fdcd24b6d9e1bd56e5b42
  weaker 2278bf5f4b4bd82946015a679a84790a
import  -/  random-1.1:System.Random 31994b60c33f032d578c64a928f735f7
b54fc46995c11ea29c858432669f8509
  $fEqProp :: GHC.Classes.Eq (Main.Prop a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Main.Prop a)
                  (Main.$fEqProp_$c== @ a)
                  (Main.$fEqProp_$c/= @ a) -}
b54fc46995c11ea29c858432669f8509
  $fEqProp_$c/= :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case x of wild { Main.Prop ds ds1 ->
                 case y of wild1 { Main.Prop ds2 ds3 ->
                 case GHC.Base.eqString ds ds2 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
b54fc46995c11ea29c858432669f8509
  $fEqProp_$c== :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (y :: Main.Prop a) (z :: Main.Prop a) ->
                 case y of wild { Main.Prop ds ds1 ->
                 case z of wild1 { Main.Prop ds2 ds3 ->
                 GHC.Base.eqString ds ds2 } }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp :: GHC.Classes.Ord (Main.Prop a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Main.Prop a)
                  (Main.$fEqProp @ a)
                  (Main.$fOrdProp_$ccompare @ a)
                  (Main.$fOrdProp_$c< @ a)
                  (Main.$fOrdProp_$c<= @ a)
                  (Main.$fOrdProp_$c> @ a)
                  (Main.$fOrdProp_$c>= @ a)
                  (Main.$fOrdProp_$cmax @ a)
                  (Main.$fOrdProp_$cmin @ a) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$c< :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$c<= :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$c> :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$c>= :: Main.Prop a -> Main.Prop a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$ccompare ::
    Main.Prop a -> Main.Prop a -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U(A,C(U))><S,1*U(A,C(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Main.Prop a) (w1 :: Main.Prop a) ->
                 case w of ww { Main.Prop ww1 ww2 ->
                 case w1 of ww3 { Main.Prop ww4 ww5 ->
                 Main.$w$ccompare @ a ww2 ww5 } }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$cmax :: Main.Prop a -> Main.Prop a -> Main.Prop a
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
b54fc46995c11ea29c858432669f8509
  $fOrdProp_$cmin :: Main.Prop a -> Main.Prop a -> Main.Prop a
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (y :: Main.Prop a) ->
                 case Main.$fOrdProp_$ccompare @ a x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
b54fc46995c11ea29c858432669f8509
  $fShowProp :: GHC.Show.Show (Main.Prop a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Main.Prop a)
                  (Main.$fShowProp_$cshowsPrec @ a)
                  (Main.name @ a)
                  (Main.$fShowProp_$cshowList @ a) -}
b54fc46995c11ea29c858432669f8509
  $fShowProp1 :: Main.Prop a -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: Main.Prop a) (s :: GHC.Base.String)[OneShot] ->
                 case x of wild { Main.Prop ds ds1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n ds)
                   s }) -}
b54fc46995c11ea29c858432669f8509
  $fShowProp_$cshowList :: [Main.Prop a] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (ls :: [Main.Prop a]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ (Main.Prop a) (Main.$fShowProp1 @ a) ls s) -}
b54fc46995c11ea29c858432669f8509
  $fShowProp_$cshowsPrec ::
    GHC.Types.Int -> Main.Prop a -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(SL),1*U(1*U,A)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (ds :: GHC.Types.Int)
                   (x :: Main.Prop a)
                   (s :: GHC.Base.String) ->
                 case x of wild { Main.Prop ds1 ds2 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n ds1)
                   s }) -}
2337f19ee379498eb4859440d993f4a7
  $seven :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 case n of wild2 { GHC.Types.I# x1 ->
                 case GHC.Prim.remInt# x1 2# of wild {
                   DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } }) -}
22594569ae005c2fcf1ff897057ade25
  $seven2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
5cd74feb3e15f05ef6361c0d02a6265b
  $seven3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
5fea766bb3a4961f440c55ba7beee693
  $tc'Prop :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11664713279280497732##
                   13337821378297450670##
                   Main.$trModule
                   Main.$tc'Prop2
                   1#
                   Main.$tc'Prop1) -}
97bcfedd624d57d950a6ed209b3fa858
  $tc'Prop1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5fc1d23d6c2364a801a6a0efbb01c831
  $tc'Prop2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Prop3) -}
e3af92953143f3ad462661951481250f
  $tc'Prop3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Prop"#) -}
949258bb665bb0e85392c67367c3d15b
  $tcProp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5185905648462801233##
                   3706247735825240864##
                   Main.$trModule
                   Main.$tcProp1
                   0#
                   GHC.Types.krep$*Arr*) -}
46fbfbb647034517711aca03e554f559
  $tcProp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcProp2) -}
8abd6cc7e399189ad139ebe12ef4c8a1
  $tcProp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prop"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
b6204f68714a5784cbcd53962008d007
  $w$ccompare ::
    (GHC.Types.Int -> GHC.Types.Bool)
    -> (GHC.Types.Int -> GHC.Types.Bool) -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <L,C(U)><L,C(U)>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Types.Int -> GHC.Types.Bool)
                   (ww1 :: GHC.Types.Int -> GHC.Types.Bool) ->
                 case (Lecture2.compar9 @ GHC.Types.Int Main.domain ww1 ww)
                        `cast`
                      (Data.Semigroup.Internal.N:All[0]) of wild {
                   GHC.Types.False
                   -> case (Lecture2.compar9 @ GHC.Types.Int Main.domain ww ww1)
                             `cast`
                           (Data.Semigroup.Internal.N:All[0]) of wild1 {
                        GHC.Types.False -> GHC.Types.EQ GHC.Types.True -> GHC.Types.LT }
                   GHC.Types.True -> GHC.Types.GT }) -}
835ebed4606aa92964498d0d376afba1
  $wgenBigNumbers ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 Test.QuickCheck.Gen.$wsuchThat
                   @ GHC.Types.Int
                   Main.genBigNumbers3
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   Main.genBigNumbers2
                   ww
                   ww1
                   ww2
                   ww3
                   ww4) -}
7b4508a1d6c66093374439b08a9fef83
  $wp4 :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.remInt# ww 2# of wild {
                   DEFAULT -> GHC.Types.False 0# -> GHC.Types.True }) -}
9dd4910d2fe75ef70d20d9b3db1edd88
  $wswapAt :: GHC.Prim.Int# -> [a] -> [a]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ @ a (ww :: GHC.Prim.Int#) (w :: [a]) ->
                 let {
                   swapPos :: [a]
                   = case GHC.Prim.<=# ww 0# of lwild {
                       DEFAULT -> Main.$wunsafeDrop @ a ww w 1# -> w }
                 } in
                 let {
                   swapWithPos :: [a] = Main.$wunsafeDrop @ a 1# swapPos
                 } in
                 let {
                   n :: a
                   = case swapWithPos of wild {
                       [] -> GHC.List.badHead @ a : x ds1 -> x }
                 } in
                 let {
                   n1 :: a
                   = case swapPos of wild { [] -> GHC.List.badHead @ a : x ds1 -> x }
                 } in
                 let {
                   n2 :: [a]
                   = case swapWithPos of wild {
                       [] -> GHC.List.scanl2 @ a : ds1 xs -> xs }
                 } in
                 let {
                   n3 :: [a] = GHC.Types.: @ a n1 n2
                 } in
                 let {
                   n4 :: [a] = GHC.Types.: @ a n n3
                 } in
                 case GHC.Prim.<# 0# ww of lwild {
                   DEFAULT -> n4
                   1#
                   -> letrec {
                        $wgo :: [a] -> GHC.Prim.Int# -> [a]
                          {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                        = \ (w1 :: [a]) (ww1 :: GHC.Prim.Int#) ->
                          case w1 of wild {
                            [] -> n4
                            : y ys
                            -> case ww1 of ds1 {
                                 DEFAULT -> GHC.Types.: @ a y ($wgo ys (GHC.Prim.-# ds1 1#))
                                 1# -> GHC.Types.: @ a y n4 } }
                      } in
                      $wgo w ww }) -}
cbf756deeaabd8389e201f54b006623d
  $wtestQuartiles :: GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.># ww 100# of lwild {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
                             (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.noDuplicate#
                                     @ GHC.Prim.RealWorld
                                     s of s' { DEFAULT ->
                              case Lab2.$wprobs ww s' of ds1 { (#,#) ipv ipv1 ->
                              (# ipv,
                                 Main.calcQuartile
                                   ipv1
                                   Main.getAmountInQuartile2 #) } }) of ds { (#,#) ipv ipv1 ->
                      let {
                        lvl5 :: GHC.Prim.Int# = GHC.Prim.uncheckedIShiftRA# ww 2#
                      } in
                      let {
                        lvl6 :: GHC.Types.Int
                        = case GHC.Classes.divInt# lvl5 100# of v { DEFAULT ->
                          GHC.Types.I# v }
                      } in
                      letrec {
                        go :: [GHC.Types.Int] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds1 :: [GHC.Types.Int]) ->
                          case ds1 of wild {
                            [] -> GHC.Types.True
                            : y ys
                            -> case lvl6 of v { GHC.Types.I# v1 ->
                               case y of wild1 { GHC.Types.I# x ->
                               let {
                                 y1 :: GHC.Prim.Int# = GHC.Prim.*# v1 25#
                               } in
                               case GHC.Prim.>=#
                                      x
                                      (GHC.Prim.-# (GHC.Prim.-# lvl5 y1) 1#) of lwild1 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> case GHC.Prim.<=#
                                           x
                                           (GHC.Prim.+# (GHC.Prim.+# lvl5 y1) 1#) of lwild2 {
                                      DEFAULT -> GHC.Types.False 1# -> go ys } } } } }
                      } in
                      go ipv1 } }) -}
6dae98b665c4d2765e1872374062948f
  $wtestQuartilesSafe ::
    GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lab2.$wprobs ww w of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case GHC.Prim.># ww 0# of lwild {
                      DEFAULT -> GHC.Types.True
                      1#
                      -> let {
                           lvl5 :: GHC.Prim.Int# = GHC.Prim.uncheckedIShiftRA# ww 2#
                         } in
                         let {
                           lvl6 :: GHC.Types.Int
                           = case GHC.Classes.divInt# lvl5 100# of v { DEFAULT ->
                             GHC.Types.I# v }
                         } in
                         letrec {
                           go :: [GHC.Types.Int] -> GHC.Types.Bool
                             <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds :: [GHC.Types.Int]) ->
                             case ds of wild {
                               [] -> GHC.Types.True
                               : y ys
                               -> case lvl6 of v { GHC.Types.I# v1 ->
                                  case y of wild1 { GHC.Types.I# x ->
                                  let {
                                    y1 :: GHC.Prim.Int# = GHC.Prim.*# v1 10#
                                  } in
                                  case GHC.Prim.>=#
                                         x
                                         (GHC.Prim.-# (GHC.Prim.-# lvl5 y1) 1#) of lwild1 {
                                    DEFAULT -> GHC.Types.False
                                    1#
                                    -> case GHC.Prim.<=#
                                              x
                                              (GHC.Prim.+# (GHC.Prim.+# lvl5 y1) 1#) of lwild2 {
                                         DEFAULT -> GHC.Types.False 1# -> go ys } } } } }
                         } in
                         go (Main.calcQuartile ipv1 Main.getAmountInQuartile2) } #) }) -}
1eae4f6737fb333a6b4dbefb66f1d832
  $wtriangleType ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger#
                        (GHC.Integer.Type.plusInteger ww ww1)
                        ww2 of wild {
                   DEFAULT
                   -> case GHC.Integer.Type.ltInteger#
                             (GHC.Integer.Type.plusInteger ww1 ww2)
                             ww of wild1 {
                        DEFAULT
                        -> case GHC.Integer.Type.ltInteger#
                                  (GHC.Integer.Type.plusInteger ww2 ww)
                                  ww1 of wild2 {
                             DEFAULT
                             -> case GHC.Integer.Type.eqInteger# ww ww1 of wild3 { DEFAULT ->
                                let {
                                  $j :: GHC.Base.String <join 0>
                                  = case Main.isPythagorean ww ww1 ww2 of wild4 {
                                      GHC.Types.False
                                      -> case Main.isPythagorean ww1 ww2 ww of wild5 {
                                           GHC.Types.False
                                           -> case Main.isPythagorean ww2 ww ww1 of wild6 {
                                                GHC.Types.False
                                                -> case wild3 of wild7 {
                                                     DEFAULT
                                                     -> case GHC.Integer.Type.eqInteger#
                                                               ww1
                                                               ww2 of wild8 {
                                                          DEFAULT
                                                          -> case GHC.Integer.Type.eqInteger#
                                                                    ww2
                                                                    ww of wild9 {
                                                               DEFAULT -> Main.triangle9
                                                               1# -> Main.triangle5 }
                                                          1# -> Main.triangle5 }
                                                     1# -> Main.triangle5 }
                                                GHC.Types.True -> Main.triangle1 }
                                           GHC.Types.True -> Main.triangle1 }
                                      GHC.Types.True -> Main.triangle1 }
                                } in
                                case wild3 of lwild {
                                  DEFAULT -> $j
                                  1#
                                  -> case GHC.Integer.Type.eqInteger# ww1 ww2 of wild4 {
                                       DEFAULT -> $j
                                       1#
                                       -> case GHC.Integer.Type.eqInteger# ww2 ww of wild5 {
                                            DEFAULT -> $j 1# -> Main.triangle7 } } } }
                             1# -> Main.triangle3 }
                        1# -> Main.triangle3 }
                   1# -> Main.triangle3 }) -}
00bb2257859340c278f030fbdf7c8098
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
b54fc46995c11ea29c858432669f8509
  type role Prop phantom
  data Prop a
    = Prop {name :: GHC.Base.String,
            propertyFunction :: GHC.Types.Int -> GHC.Types.Bool}
983c1c5ceb5ccc6f7e3e04af5a358742
  calcQuartile ::
    [GHC.Types.Float] -> [GHC.Types.Float] -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
1360b2fe0904050bab925ba79003f352
  checkTestResult :: GHC.Types.Bool -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Bool) ->
                 case ds of wild {
                   GHC.Types.False -> Main.checkTestResult3
                   GHC.Types.True -> Main.checkTestResult1 }) -}
07e9afa9026195e449fc2901f6e320ce
  checkTestResult1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkTestResult2) -}
fd977f4fe81bf76dcfad9cba3419444e
  checkTestResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test succeeded!"#) -}
4169382264dc63218ac46fc6f81064e7
  checkTestResult3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkTestResult4) -}
50f4966c81758abf29b6b8f80753cc03
  checkTestResult4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test failed!"#) -}
f259455213a5f5374054d0926c228555
  checkTriangleFunction ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Lab2.Shape
    -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <S,U><S,U><S,U><S,U> -}
439f87fde0c0bced6c431bff02576bf5
  domain :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt -10# 10#) -}
ebbedd4cc8c1492314b5ffbfed118b7d
  evenAndMoreThanThree :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.evenAndMoreThanThree1
                  `cast`
                (<GHC.Types.Int>_R ->_R Data.Semigroup.Internal.N:All[0]) -}
d2ff581c65e502e6c5f3bd551fc9b463
  evenAndMoreThanThree1 ::
    GHC.Types.Int -> Data.Semigroup.Internal.All
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (y :: GHC.Types.Int) -> Main.evenAndMoreThanThree2) -}
b53cfae77f09566082386168a5d9bb14
  evenAndMoreThanThree2 :: Data.Semigroup.Internal.All
  {- Unfolding: (Main.evenAndMoreThanThree_go
                   (GHC.Enum.enumDeltaToInteger1
                      Main.evenAndMoreThanThree4
                      Main.evenAndMoreThanThree3)) -}
553ca2e9440969dc38f6e7a43bb69f9c
  evenAndMoreThanThree3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10) -}
30c2f46c58426d9bd932bc10946bf7ee
  evenAndMoreThanThree4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-10) -}
5b207cb86d79ed2798c138ddfe0a3688
  evenAndMoreThanThreeOrEvenLeft :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.evenAndMoreThanThreeOrEvenLeft1
                  `cast`
                (<GHC.Types.Int>_R ->_R Data.Semigroup.Internal.N:All[0]) -}
4cf038e44c36ecb6345964377042fefa
  evenAndMoreThanThreeOrEvenLeft1 ::
    GHC.Types.Int -> Data.Semigroup.Internal.All
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (y :: GHC.Types.Int) -> Main.evenAndMoreThanThreeOrEvenLeft2) -}
b736cf1ed0670dab49f3879c30871f0f
  evenAndMoreThanThreeOrEvenLeft2 :: Data.Semigroup.Internal.All
  {- Unfolding: (Main.evenAndMoreThanThreeOrEvenLeft_go
                   (GHC.Enum.enumDeltaToInteger1
                      Main.evenAndMoreThanThree4
                      Main.evenAndMoreThanThree3)) -}
026d3432ac2cc166b6ceed03f0bfc075
  evenAndMoreThanThreeOrEvenLeft_go ::
    [GHC.Integer.Type.Integer] -> Data.Semigroup.Internal.All
  {- Arity: 1, Strictness: <S,1*U> -}
b0b796882fd6353cf1f76ceb77764d0e
  evenAndMoreThanThreeOrEvenRight :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.evenAndMoreThanThreeOrEvenRight1
                  `cast`
                (<GHC.Types.Int>_R ->_R Data.Semigroup.Internal.N:All[0]) -}
fe8fa86c6ffa0812f86b1c4f7e2c63d9
  evenAndMoreThanThreeOrEvenRight1 ::
    GHC.Types.Int -> Data.Semigroup.Internal.All
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (y :: GHC.Types.Int) ->
                 Main.evenAndMoreThanThreeOrEvenRight2) -}
d4d1fdd5b36d94c097e5977601ae9292
  evenAndMoreThanThreeOrEvenRight2 :: Data.Semigroup.Internal.All
  {- Unfolding: (Main.evenAndMoreThanThreeOrEvenRight_go
                   (GHC.Enum.enumDeltaToInteger1
                      Main.evenAndMoreThanThree4
                      Main.evenAndMoreThanThree3)) -}
6ba2955bfc738862ab7bb4cc2629c6b2
  evenAndMoreThanThreeOrEvenRight_go ::
    [GHC.Integer.Type.Integer] -> Data.Semigroup.Internal.All
  {- Arity: 1, Strictness: <S,1*U> -}
bcf3e4caaaafe946ef53c691050ea3e9
  evenAndMoreThanThree_go ::
    [GHC.Integer.Type.Integer] -> Data.Semigroup.Internal.All
  {- Arity: 1, Strictness: <S,1*U> -}
b9a371b1b365d8e97c6afe84178e5591
  evenOrMoreThanThree :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.evenOrMoreThanThree1
                  `cast`
                (<GHC.Types.Int>_R ->_R Data.Semigroup.Internal.N:All[0]) -}
c931e7c308ad9e89c5ea16fb2e0b3f38
  evenOrMoreThanThree1 ::
    GHC.Types.Int -> Data.Semigroup.Internal.All
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (y :: GHC.Types.Int) -> Main.evenOrMoreThanThree2) -}
f9eae78d13b3b1e5dfce94823ef95b76
  evenOrMoreThanThree2 :: Data.Semigroup.Internal.All
  {- Unfolding: (Main.evenOrMoreThanThree_go
                   (GHC.Enum.enumDeltaToInteger1
                      Main.evenAndMoreThanThree4
                      Main.evenAndMoreThanThree3)) -}
cdfd3bdcda4d46523e34d156d18bfd3d
  evenOrMoreThanThree_go ::
    [GHC.Integer.Type.Integer] -> Data.Semigroup.Internal.All
  {- Arity: 1, Strictness: <S,1*U> -}
1d5ff3a09539d534f7a5c58adc34d09c
  genBigNumbers :: Test.QuickCheck.Gen.Gen GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.genBigNumbers1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R)) -}
f6364b4636c81c661f12e6d2ab8ec4cd
  genBigNumbers1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$wgenBigNumbers ww1 ww2 ww3 ww4 ww8 } }) -}
05b3eb220256edcf295dfd263358c54c
  genBigNumbers2 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# x ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># x 1000#) }) -}
4f31152f4a88b5bf09001ac54bba68fd
  genBigNumbers3 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 case Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral
                        ww1
                        ww2
                        ww3
                        ww4
                        ww8 of ww9 { DEFAULT ->
                 case GHC.Prim.>=# ww9 0# of lwild {
                   DEFAULT -> GHC.Types.I# (GHC.Prim.negateInt# ww9)
                   1# -> GHC.Types.I# ww9 } } } }) -}
f87ffc90a38bdf25b142b08c5e43f32c
  getAmountInQuartile ::
    GHC.Types.Int -> GHC.Types.IO [GHC.Types.Int]
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getAmountInQuartile1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Types.Int]>_R)) -}
c61e0fe09466a4f80ae3107d71c39b6e
  getAmountInQuartile1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case x of ww { GHC.Types.I# ww1 ->
                 case Lab2.$wprobs ww1 s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, Main.calcQuartile ipv1 Main.getAmountInQuartile2 #) } }) -}
a8ab5a6afd23d27eef1dc8226e21731e
  getAmountInQuartile2 :: [GHC.Types.Float]
  {- Unfolding: (GHC.Real.numericEnumFromThenTo
                   @ GHC.Types.Float
                   GHC.Classes.$fOrdFloat
                   GHC.Float.$fFractionalFloat
                   Main.getAmountInQuartile5
                   Main.getAmountInQuartile4
                   Main.getAmountInQuartile3) -}
59df7f0c0f9d10cc353eb3f30924d76a
  getAmountInQuartile3 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
966ee2eaf7fda2f7cc3cc848f560b5d3
  getAmountInQuartile4 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.25#) -}
e26b34f29ce2f7068141f7d6d6850d3e
  getAmountInQuartile5 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
16fc78593e0ed3dd2de77d1ad07ed757
  isPermutation :: GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U><S,U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: [a])
                   (y :: [a]) ->
                 case GHC.List.$wlenAcc @ a x 0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc @ a y 0# of ww1 { DEFAULT ->
                 case GHC.Prim.==# ww2 ww1 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> letrec {
                        go :: [a] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [a]) ->
                          case ds of wild {
                            [] -> GHC.Types.True
                            : y1 ys
                            -> letrec {
                                 $wgo :: [a] -> GHC.Prim.Int# -> GHC.Prim.Int#
                                   {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                                 = \ (w :: [a]) (ww :: GHC.Prim.Int#) ->
                                   case w of wild1 {
                                     [] -> ww
                                     : y2 ys1
                                     -> case GHC.Classes.== @ a $dEq y2 y1 of wild2 {
                                          GHC.Types.False -> $wgo ys1 ww
                                          GHC.Types.True -> $wgo ys1 (GHC.Prim.+# ww 1#) } }
                               } in
                               case $wgo x 0# of ww { DEFAULT ->
                               case $wgo y 0# of ww3 { DEFAULT ->
                               case GHC.Prim.==# ww ww3 of lwild1 {
                                 DEFAULT -> GHC.Types.False 1# -> go ys } } } }
                      } in
                      go x } } }) -}
dc06da07a31c99000d29d580a46a05ff
  isPythagorean ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, Strictness: <S,U><S,U><S,U>,
     Unfolding: (\ (a :: GHC.Integer.Type.Integer)
                   (b :: GHC.Integer.Type.Integer)
                   (c :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger#
                        (GHC.Integer.Type.plusInteger
                           (GHC.Integer.Type.timesInteger a a)
                           (GHC.Integer.Type.timesInteger b b))
                        (GHC.Integer.Type.timesInteger c c) of wild { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild }) -}
9ad959d3dfc305ba4228da8060ffa0d9
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ae7a38c03ac60e86569b8473e63c3f08
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main22
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Main.$wtestQuartilesSafe
                        10000#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           Main.main21
                           (case ipv3 of wild {
                              GHC.Types.False -> Main.checkTestResult3
                              GHC.Types.True -> Main.checkTestResult1 }))
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Test.QuickCheck.Test.$w$squickCheckWithResult
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main20
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main18
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case Main.main9 ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main7
                        GHC.Types.True
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main6
                        GHC.Types.True
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main4
                        GHC.Types.True
                        ipv14 of ds9 { (#,#) ipv16 ipv17 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv16 } } } } } } } } }) -}
5f1c801cdfec28f0242d5f71f1204c43
  main10 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (12) -}
44415e84083dfd685360c1cd274014f5
  main11 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (11) -}
8e117980a86bc2f4d9d839c37a557a0b
  main12 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (15) -}
72c1670906b0a1059bfe1d000f043dc1
  main13 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (20) -}
51e5b1e116f55e67889b2cd0eaf2a397
  main14 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (5) -}
27398857c77389c55803eeffede10fc2
  main15 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
1c744d9b1a3dc95a90dc2d707db37c62
  main16 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
37ba635b34fec9d3a323044638f5e890
  main17 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (90) -}
9ac4f61c822091f91f0b0f3a15ddc408
  main18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main19) -}
f54723bc40498d95affc4875fcb56dd4
  main19 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \== Assignment 2 (Recognizing triangles) =="#) -}
21ee1e9ce3c251c7ad2ca4e7f5b78afc
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main3) -}
b17ff25185b5f5f1b80fe8966e5cc5cd
  main20 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Types.Int
                   @ GHC.Types.Bool
                   GHC.Show.$fShowInt
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.genBigNumbers1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   (Test.QuickCheck.Property.forAll2 @ GHC.Types.Int)
                   Main.testQuartiles
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
ce222a217dfffea24f58ca3425a4d576
  main21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Safe, but without QuickCheck: "#) -}
45d294d861198dec8e22c72c73006cad
  main22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main23) -}
d47536520fb60f04a9044f16bd54bd97
  main23 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("== Assignment 1 (Random floating point numbers) =="#) -}
a02d1b310de51e4d9427a34b34dcd8a4
  main24 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
44ddb9097779558b7596e4d0209f99ed
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Done"#) -}
f11b6aa839e33b9ef9738b0c3c4f2852
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main5) -}
b625364077e26d56af9216f930459cf6
  main5 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \== Assignment 4 (Recognizing Permutations) =="#) -}
f37808ea1cbbf8e51962c336183c873a
  main6 :: GHC.Base.String
  {- Unfolding: (case Lecture2.quicksort
                        @ (Main.Prop GHC.Types.Any)
                        (Main.$fOrdProp @ GHC.Types.Any)
                        (Main.properties @ GHC.Types.Any) of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        GHC.Show.showList__4
                        (GHC.Types.[] @ GHC.Types.Char)
                   : x xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.showList__3
                        (case x of wild1 { Main.Prop ds ds1 ->
                         let {
                           z :: [GHC.Types.Char]
                           = let {
                               lvl43 :: [GHC.Types.Char]
                               = GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showList__2
                                   (GHC.Types.[] @ GHC.Types.Char)
                             } in
                             letrec {
                               showl :: [Main.Prop GHC.Types.Any] -> GHC.Base.String
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ (ds2 :: [Main.Prop GHC.Types.Any]) ->
                                 case ds2 of wild2 {
                                   [] -> lvl43
                                   : y ys
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showList__1
                                        (case y of wild3 { Main.Prop ds3 ds4 ->
                                         let {
                                           z1 :: [GHC.Types.Char] = showl ys
                                         } in
                                         letrec {
                                           go :: [GHC.Types.Char] -> [GHC.Types.Char]
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds5 :: [GHC.Types.Char]) ->
                                             case ds5 of wild4 {
                                               [] -> z1
                                               : y1 ys1
                                               -> GHC.Types.: @ GHC.Types.Char y1 (go ys1) }
                                         } in
                                         go ds3 }) }
                             } in
                             showl xs
                         } in
                         letrec {
                           go :: [GHC.Types.Char] -> [GHC.Types.Char]
                             {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds2 :: [GHC.Types.Char]) ->
                             case ds2 of wild2 {
                               [] -> z : y ys -> GHC.Types.: @ GHC.Types.Char y (go ys) }
                         } in
                         go ds }) }) -}
2dcd791b1b4971f884f204ca1e00848a
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main8) -}
5ae17a5f3a29221cc9b2a739b94adfd7
  main8 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \== Assignment 3 (Testing properties strength) =="#) -}
35fd6c7750c8acf3e5272bf3bd8fa7b5
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Main.checkTriangleFunction
                         Main.main17
                         Main.evenAndMoreThanThree3
                         Main.evenAndMoreThanThree3
                         Lab2.NoTriangle)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case (Main.checkTriangleFunction
                         Main.evenAndMoreThanThree3
                         Main.evenAndMoreThanThree3
                         Main.evenAndMoreThanThree3
                         Lab2.Equilateral)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case (Main.checkTriangleFunction
                         Main.main16
                         Main.main15
                         Main.main14
                         Lab2.Rectangular)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case (Main.checkTriangleFunction
                         Main.main13
                         Main.main12
                         Main.main12
                         Lab2.Isosceles)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 (Main.checkTriangleFunction
                    Main.evenAndMoreThanThree3
                    Main.main11
                    Main.main10
                    Lab2.Other)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   ipv6 } } } }) -}
b54fc46995c11ea29c858432669f8509
  name :: Main.Prop a -> GHC.Base.String
  RecSel Left Main.Prop
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Main.Prop a) ->
                 case ds of wild { Main.Prop ds1 ds2 -> ds1 }) -}
b2eb3d6a977e7471f5fcdee2e23cbdb2
  p1 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Int) ->
                 case x of wild2 { GHC.Types.I# x1 ->
                 case GHC.Prim.remInt# x1 2# of wild {
                   DEFAULT -> GHC.Types.False
                   0#
                   -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># x1 3#) } }) -}
4f9773f087d33e44584b721ec0514e1b
  p2 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Int) ->
                 case x of wild2 { GHC.Types.I# x1 ->
                 case GHC.Prim.remInt# x1 2# of wild {
                   DEFAULT -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># x1 3#)
                   0# -> GHC.Types.True } }) -}
cdf918deacfd39faecb9d35ceae5a503
  p3 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wp4 ww1 }) -}
80c913a5e0c249579c515ebbea12b751
  p4 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wp4 ww1 }) -}
c706f735d4e138134799c7632bb69fb0
  propAllRotations :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 case origList of wild {
                   [] -> GHC.Types.True
                   : ds1 ds2
                   -> case GHC.List.$wlenAcc @ a wild 0# of ww2 { DEFAULT ->
                      let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                      } in
                      case GHC.Prim.># 1# y of lwild {
                        DEFAULT
                        -> letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <L,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case Main.isPermutation
                                      @ a
                                      $dEq
                                      wild
                                      (Main.rotate @ a (GHC.Types.I# x) wild) of wild1 {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True
                                 -> case GHC.Prim.==# x y of lwild1 {
                                      DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                           } in
                           go 1#
                        1# -> GHC.Types.True } } }) -}
67e6bb2abd5cdf0d97466f9a728a2f96
  propAllSwapped :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><S,U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 case GHC.List.$wlenAcc @ a origList 0# of ww2 { DEFAULT ->
                 case GHC.Prim.># ww2 1# of lwild {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> let {
                        y :: GHC.Prim.Int# = GHC.Prim.-# ww2 2#
                      } in
                      case GHC.Prim.># 0# y of lwild1 {
                        DEFAULT
                        -> letrec {
                             go :: GHC.Prim.Int# -> GHC.Types.Bool
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (x :: GHC.Prim.Int#) ->
                               case Main.isPermutation
                                      @ a
                                      $dEq
                                      origList
                                      (Main.$wswapAt @ a x origList) of wild {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True
                                 -> case GHC.Prim.==# x y of lwild2 {
                                      DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> GHC.Types.True } }
                           } in
                           go 0#
                        1# -> GHC.Types.True } } }) -}
dcaf35c0b959ab800c22eb2005c72876
  propReversed :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (origList :: [a]) ->
                 Main.isPermutation
                   @ a
                   $dEq
                   origList
                   (GHC.List.reverse1 @ a origList (GHC.Types.[] @ a))) -}
02b2e0e7c98eff1a3730220781a46ef3
  propRotated ::
    GHC.Classes.Eq a => GHC.Types.Int -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (rotation :: GHC.Types.Int)
                   (origList :: [a]) ->
                 Main.isPermutation
                   @ a
                   $dEq
                   origList
                   (Main.rotate @ a rotation origList)) -}
cdb6f32863c9b417a82b705dd9f06afe
  propSwapped ::
    GHC.Classes.Eq a => GHC.Types.Int -> [a] -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (index :: GHC.Types.Int)
                   (origList :: [a]) ->
                 Main.isPermutation
                   @ a
                   $dEq
                   origList
                   (Main.swapAt @ a index origList)) -}
0782db639333caacb357b9a5e46529db
  properties :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties17 @ a)
                   (Main.properties1 @ a)) -}
49440fddd6dc637d72d34fbd65ca8bc0
  properties1 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties14 @ a)
                   (Main.properties2 @ a)) -}
0b2064bb66cbba054292b78e39753c93
  properties10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p4"#) -}
e0b99ea16bf6cef8b946f1d7adaed17f
  properties11 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties12 Main.p4) -}
38b648ccf1d5feee920e5eededddf345
  properties12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties13) -}
81a0d671928693e18b0cc495c48b4e8a
  properties13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p3"#) -}
84b74c07ddb34fbbc56f86124f6398c8
  properties14 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties15 Main.p2) -}
d90078e430d1e7a0218ea20e39763ff7
  properties15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties16) -}
cfe7539edc111c27f1ce4a136164816f
  properties16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p2"#) -}
f8deceb661829b57e48017aea87c0489
  properties17 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties18 Main.p1) -}
95c5937877e8aedc7e5380ddbd9efbd1
  properties18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties19) -}
1d4f846fbf607bf97155f3ee62f2cf82
  properties19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p1"#) -}
58f18374f9de8be8955e20f89bf0bc44
  properties2 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties11 @ a)
                   (Main.properties3 @ a)) -}
a8575ff988eabe6481a5a3fabaed908a
  properties3 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties8 @ a)
                   (Main.properties4 @ a)) -}
5959686cf4a42fec72c2b1b3838366b2
  properties4 :: [Main.Prop a]
  {- Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.:
                   @ (Main.Prop a)
                   (Main.properties5 @ a)
                   (GHC.Types.[] @ (Main.Prop a))) -}
79c7dc67bb6779f767434ef503b9c323
  properties5 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties6 Main.$seven) -}
608519e9431fd60cf273bb9bfd945d52
  properties6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties7) -}
46a3e61e2ccec3609a264f1163b27d10
  properties7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p5"#) -}
f8ba5c1b3f70d3df6bcd4d3ad9bf2aa0
  properties8 :: Main.Prop a
  {- Strictness: m,
     Unfolding: (\ @ a -> Main.Prop @ a Main.properties9 Main.p4) -}
3925dafaf54ff6c7287aeda8c82a5144
  properties9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.properties10) -}
b54fc46995c11ea29c858432669f8509
  propertyFunction :: Main.Prop a -> GHC.Types.Int -> GHC.Types.Bool
  RecSel Left Main.Prop
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Main.Prop a) ->
                 case ds of wild { Main.Prop ds1 ds2 -> ds2 }) -}
c600f45d19a1a9afe90d8e559eaa11fb
  rotate :: GHC.Types.Int -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a (ds :: GHC.Types.Int) (ds1 :: [a]) ->
                 case ds1 of wild {
                   [] -> GHC.Types.[] @ a
                   : ipv ipv1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      letrec {
                        xs' :: [a] = GHC.Base.++_$s++ @ a xs' ipv ipv1
                      } in
                      case GHC.Prim.<=# x 0# of lwild {
                        DEFAULT -> Main.rotate1 @ a (Main.$wunsafeDrop @ a x xs') wild
                        1# -> Main.rotate1 @ a xs' wild } } }) -}
480efeb0636ffa66ba7a5a09b9d7b291
  rotate1 :: [a] -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
afa5087ad4582569d3148406ed390bff
  swapAt :: GHC.Types.Int -> [a] -> [a]
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: [a]) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wswapAt @ a ww1 w1 }) -}
203516a2ae7bb85a5ed330ef20ff16d0
  testQuartiles :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wtestQuartiles ww1 }) -}
28248f790b2c55f84c51e5442ba65ba1
  testQuartilesSafe :: GHC.Types.Int -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.testQuartilesSafe1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
49fe9b066c775df80d8767a7b0ffc4ea
  testQuartilesSafe1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wtestQuartilesSafe ww1 w1 }) -}
3113efd5464ae515ed42a4096f016d0a
  testTriangle :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main9 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ee74330f3ede76cb0524cdd7ea2325ef
  triangle ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Lab2.Shape
  {- Arity: 3, Strictness: <S,U><S,U><S,U>,
     Unfolding: (\ (x :: GHC.Integer.Type.Integer)
                   (y :: GHC.Integer.Type.Integer)
                   (z :: GHC.Integer.Type.Integer) ->
                 let {
                   ds :: [GHC.Types.Char] = Main.$wtriangleType x y z
                 } in
                 case GHC.Base.eqString ds Main.triangle7 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString ds Main.triangle5 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString ds Main.triangle3 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString ds Main.triangle1 of wild3 {
                                  GHC.Types.False -> Lab2.Other GHC.Types.True -> Lab2.Rectangular }
                             GHC.Types.True -> Lab2.NoTriangle }
                        GHC.Types.True -> Lab2.Isosceles }
                   GHC.Types.True -> Lab2.Equilateral }) -}
a4ee19d6afe251450ce53248bbccbfbc
  triangle1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle2) -}
388f0dafd543bf503fc5dabaa62a6fa5
  triangle10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Other"#) -}
8ea8754ad4d0b2bea433d428ec59e6fb
  triangle2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rectangular"#) -}
d33c9b85f0558ddf6502ba99e9ed2548
  triangle3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle4) -}
b27dd0ee955cd57b98be145e419903bd
  triangle4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Not a triangle"#) -}
f39059380bffcf8a90d28e325459003a
  triangle5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle6) -}
916b525dd7cc70e72bd08b89c8277efe
  triangle6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Isosceles"#) -}
32059da5ea272c47be4bc783344f20d5
  triangle7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle8) -}
e7ce84b020e42dd1ef5ff7ad0d904b9c
  triangle8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Equilateral"#) -}
7c758a7078c526fda7d09b0dae10232c
  triangle9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.triangle10) -}
be45505db7405e47766fce512bda34c0
  triangleType ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                          GHC.Integer.Type.Integer)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 Main.$wtriangleType ww1 ww2 ww3 }) -}
aee61897f6d6ba40e9ba4c9f64572571
  withinPercentage ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ (number :: GHC.Types.Int)
                   (percentage :: GHC.Types.Int)
                   (ofNumber :: GHC.Types.Int) ->
                 case ofNumber of wild { GHC.Types.I# x ->
                 case GHC.Classes.divInt# x 100# of ww4 { DEFAULT ->
                 case percentage of wild1 { GHC.Types.I# y ->
                 case number of wild2 { GHC.Types.I# x1 ->
                 let {
                   y1 :: GHC.Prim.Int# = GHC.Prim.*# ww4 y
                 } in
                 case GHC.Prim.>=# x1 (GHC.Prim.-# (GHC.Prim.-# x y1) 1#) of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x1 (GHC.Prim.+# (GHC.Prim.+# x y1) 1#)) } } } } }) -}
instance GHC.Classes.Eq [Main.Prop] = Main.$fEqProp
instance GHC.Classes.Ord [Main.Prop] = Main.$fOrdProp
instance GHC.Show.Show [Main.Prop] = Main.$fShowProp
"SPEC/Main even @ Int" [orphan] forall ($dIntegral :: GHC.Real.Integral
                                                        GHC.Types.Int)
  GHC.Real.even @ GHC.Types.Int $dIntegral = Main.$seven
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

