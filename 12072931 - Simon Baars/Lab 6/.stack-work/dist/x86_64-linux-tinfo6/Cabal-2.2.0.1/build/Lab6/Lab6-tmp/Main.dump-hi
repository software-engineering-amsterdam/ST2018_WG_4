
==================== FINAL INTERFACE ====================
2018-10-12 14:59:15.933479333 UTC

interface main:Main 8043
  interface hash: 6a69814eea1b0baad99262c78ccc1daa
  ABI hash: 2c9e74f720f1c7a3f2b450b6cc8feda1
  export-list hash: 77253061e16082be438c52fd05179c6d
  orphan hash: 7e6385a5814f642358f6f47adb288527
  flag hash: f3fa5c76493036586b6cf05d250b0635
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.composites
  Main.findTestFool
  Main.genListOfPos
  Main.genPos
  Main.main
  Main.printRan
  Main.testExM
  Main.testPerformance
module dependencies: Lecture6
package dependencies: QuickCheck-2.11.3 array-0.5.2.0 base-4.11.1.0
                      clock-0.7.2 containers-0.5.11.0 deepseq-1.4.3.0 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 monad-loops-0.4.3
                      pretty-1.1.3.6 primitive-0.6.3.0 random-1.1
                      template-haskell-2.13.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck e00d138ee3234e83a31cc3113c8c8ffb
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Arbitrary 749c030890709ce50a65277c8ad56400
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Gen 18d7f741d47ea7234320fe42d69d1321
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Monadic f6cd7cfce1092016c7dfa531145838b9
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Property 2a2442debcbf309292a12478b176466b
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Test 5c80e8a0569651177c75db83b77c7ff4
import  -/  base-4.11.1.0:Control.Exception 3d8e6cda20877f889f07bc7c0f5cac36
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Debug.Trace 7d99b5cfd8ae9f4b50938e4fedeaadef
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  clock-0.7.2:System.Clock 5b90623d639f0022027ae71489653515
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  Lecture6 a570f07aa5c462d63f2021998dcb1f7c
  exports: 230a2add7196ce1aa1e8d3a57acdc6b5
  exM cd52082f5094d8396087ae57094b10a0
  expM cdd48cb0a2068f9d1142514e188c031e
  factors ca9126cdd16089d0de2bb4e8909f5ec5
  prime 97846132a8330dd6b9a76564e2b3c905
  primeTestsF 87884f48f283c11160e2f8bf640310a6
import  -/  monad-loops-0.4.3:Control.Monad.Loops e76938e3a155629c9760ce247778d85e
import  -/  random-1.1:System.Random 31994b60c33f032d578c64a928f735f7
d603030a8e969d88cab3661afbbb8f2f
  $s$fShow(,,) ::
    GHC.Show.Show
      (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
       GHC.Integer.Type.Integer)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                     GHC.Integer.Type.Integer)
                  (GHC.Show.$fShow(,,)_$cshowsPrec
                     @ GHC.Integer.Type.Integer
                     @ GHC.Integer.Type.Integer
                     @ GHC.Integer.Type.Integer
                     GHC.Show.$fShowInteger
                     GHC.Show.$fShowInteger
                     GHC.Show.$fShowInteger)
                  (\ (x :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                            GHC.Integer.Type.Integer)) ->
                   GHC.Show.$fShow(,,)_$cshowsPrec
                     @ GHC.Integer.Type.Integer
                     @ GHC.Integer.Type.Integer
                     @ GHC.Integer.Type.Integer
                     GHC.Show.$fShowInteger
                     GHC.Show.$fShowInteger
                     GHC.Show.$fShowInteger
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                              GHC.Integer.Type.Integer)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                        GHC.Integer.Type.Integer)
                     (GHC.Show.$fShow(,,)_$cshowsPrec
                        @ GHC.Integer.Type.Integer
                        @ GHC.Integer.Type.Integer
                        @ GHC.Integer.Type.Integer
                        GHC.Show.$fShowInteger
                        GHC.Show.$fShowInteger
                        GHC.Show.$fShowInteger
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
94edf63ee6ceb64c75a79f73567336cb
  $wgenPos ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
        GHC.Integer.Type.Integer)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 Test.QuickCheck.Gen.$wsuchThat
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                      GHC.Integer.Type.Integer)
                   Main.genListOfPos4
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                               GHC.Integer.Type.Integer)>_R))
                   Main.genListOfPos3
                   ww
                   ww1
                   ww2
                   ww3
                   ww4) -}
a45f11dadb1951ef2faf3acbc0bbf6cb
  $wgenPos1 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.gtInteger# ww Main.composites1 of wild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case GHC.Integer.Type.gtInteger# ww1 Main.composites1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> case GHC.Integer.Type.gtInteger#
                                  ww2
                                  Main.composites1 of wild2 { DEFAULT ->
                           GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 } } }) -}
1b0a60e399875aa384a497236463b664
  $wgenPos2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
          GHC.Integer.Type.Integer #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 case ww16 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww18
                        ww19
                        ww20
                        ww21 of ww24 { (#,#) ww25 ww26 ->
                 (# Test.QuickCheck.Arbitrary.$fArbitraryInteger_$sarbitrarySizedIntegral
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w,
                    Test.QuickCheck.Arbitrary.$fArbitraryInteger_$sarbitrarySizedIntegral
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w,
                    Test.QuickCheck.Arbitrary.$fArbitraryInteger_$sarbitrarySizedIntegral
                      ww25 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w #) } } } } }) -}
192a773e254716ef66a5d90cff177e7e
  $wgo ::
    GHC.Integer.Type.Integer
    -> (# GHC.Integer.Type.Integer, [GHC.Integer.Type.Integer] #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
6171167340d557b98dad8060044ffaea
  $wtestExM ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger# ww2 Main.composites1 of wild {
                   DEFAULT
                   -> case GHC.Integer.Type.eqInteger#
                             (Lecture6.exM ww ww1 ww2)
                             (GHC.Integer.Type.remInteger
                                (GHC.Real.^_$s^ ww ww1)
                                ww2) of wild1 { DEFAULT ->
                      GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 }
                   1# -> case GHC.Real.divZeroError ret_ty GHC.Types.Bool of {} }) -}
e00e9a834a4579d6bcdf4df7c04ec168
  $wtestPerformance ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Test.QuickCheck.Property.Property
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
0ea4a0ca7e204af2a982ab8e3f481af7
  composites :: [GHC.Integer.Type.Integer]
  {- Unfolding: (case Main.$wgo
                        Main.composites1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Integer.Type.Integer ww1 ww2 }) -}
0d676dfd86b93b9c13b805282f291480
  composites1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
c1fecf47a30167814c07dad59359763f
  findTestFool ::
    GHC.Types.Int -> GHC.Types.IO GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.findTestFool1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)) -}
8a2a87ccf7a7ab8e33966e1aa793c14c
  findTestFool1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Integer.Type.Integer #)
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: (\ (k :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Control.Monad.Loops.firstM
                         @ GHC.Types.IO
                         @ GHC.Integer.Type.Integer
                         GHC.Base.$fMonadIO
                         (\ (x :: GHC.Integer.Type.Integer)
                            (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                          case k of ww { GHC.Types.I# ww1 ->
                          case Lecture6.$wprimeTestsF ww1 x s1 of ds1 { (#,#) ipv ipv1 ->
                          (# ipv,
                             case GHC.Classes.$fEq[]_$c==
                                    @ GHC.Integer.Type.Integer
                                    GHC.Integer.Type.$fEqInteger
                                    (Lecture6.factors x)
                                    (GHC.Types.:
                                       @ GHC.Integer.Type.Integer
                                       x
                                       (GHC.Types.[] @ GHC.Integer.Type.Integer)) of wild {
                               GHC.Types.False -> ipv1
                               GHC.Types.True
                               -> case ipv1 of wild1 {
                                    GHC.Types.False -> GHC.Types.True
                                    GHC.Types.True -> GHC.Types.False } } #) } })
                           `cast`
                         (<GHC.Integer.Type.Integer>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R))
                         Main.composites)
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.Base.Maybe GHC.Integer.Type.Integer>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Maybe.fromJust @ GHC.Integer.Type.Integer ipv1 #) }) -}
c18b42ec61f1e0fcd2cfe359a9c56ec1
  genListOfPos ::
    Test.QuickCheck.Gen.Gen
      [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
        GHC.Integer.Type.Integer)]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.genListOfPos1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                          <[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                             GHC.Integer.Type.Integer)]>_R)) -}
220e53c2f72846ec958cd4a26a8ab031
  genListOfPos1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
         GHC.Integer.Type.Integer)]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Test.QuickCheck.Random.QCGen) (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w2 of ww7 { GHC.Types.I# ww8 ->
                 Test.QuickCheck.Gen.$wlistOf
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                      GHC.Integer.Type.Integer)
                   Main.genListOfPos2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                               GHC.Integer.Type.Integer)>_R))
                   ww1
                   ww2
                   ww3
                   ww4
                   ww8 } }) -}
878bd3cdc674423fc435814cf400ec20
  genListOfPos2 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
        GHC.Integer.Type.Integer)
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$wgenPos ww1 ww2 ww3 ww4 ww8 } }) -}
8913fca4aa46715b082bfe1af084354d
  genListOfPos3 ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer)
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                          GHC.Integer.Type.Integer)) ->
                 case w of ww { (,,) ww1 ww2 ww3 -> Main.$wgenPos1 ww1 ww2 ww3 }) -}
ab037b7e6ea174b755da07aabc204028
  genListOfPos4 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
        GHC.Integer.Type.Integer)
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$wgenPos2
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,,#) ww8 ww9 ww10 ->
                 (ww8, ww9, ww10) } }) -}
582ab79db4fd9ccb84477b6f59797bfc
  genPos ::
    Test.QuickCheck.Gen.Gen
      (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
       GHC.Integer.Type.Integer)
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.genListOfPos2
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                          <(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                            GHC.Integer.Type.Integer)>_R)) -}
8b9c60cba7abb6fe6774bac6c5fbbfe3
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
fe6c2a78ba766c6461bad5288e4a9f30
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main16
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Test.QuickCheck.Test.$w$squickCheckWithResult
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main15
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main13
                        GHC.Types.True
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case Test.QuickCheck.Test.$w$squickCheckWithResult
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main12
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main10
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main5
                        GHC.Types.True
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main3
                        GHC.Types.True
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case Main.findTestFool1
                        Main.main2
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.Show.$fShowInteger_$cshow ipv15)
                   GHC.Types.True
                   ipv14 } } } } } } } }) -}
75c003918fe2fb3e10672eb30fa7ce28
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main11) -}
567c345a670d9fefec04bc26bd5e5868
  main11 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\ESC[36m== Assignment 3 (Composite natural numbers) ==\ESC[0m"#) -}
e34bbc807b4ff07843712bc8cf039544
  main12 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                      GHC.Integer.Type.Integer)
                   @ Test.QuickCheck.Property.Property
                   Main.$s$fShow(,,)
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   Main.genListOfPos2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                               GHC.Integer.Type.Integer)>_R))
                   (Test.QuickCheck.Property.forAll2
                      @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                         GHC.Integer.Type.Integer))
                   Main.testPerformance
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
b19c329bd9d44e4c873d12b878009bb9
  main13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main14) -}
1d7636c46c5effd16cfedc39fff73285
  main14 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\ESC[36m== Assignment 2 (Performance Testing) ==\ESC[0m"#) -}
689817ea1625584aa1206cbbaeb74908
  main15 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                      GHC.Integer.Type.Integer)
                   @ GHC.Types.Bool
                   Main.$s$fShow(,,)
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.genListOfPos2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                               GHC.Integer.Type.Integer)>_R))
                   (Test.QuickCheck.Property.forAll2
                      @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                         GHC.Integer.Type.Integer))
                   Main.testExM
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
8b55ec384a80d13a92d5ec5de22625ed
  main16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main17) -}
7683821cbfa93b44d8ccbb78c96bb594
  main17 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\ESC[36m== Assignment 1 (Modular Exponentiation) ==\ESC[0m"#) -}
7c3839c2a9fe20f6c3a029e646255a99
  main18 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
5864f39b45f94a29bbecc14f3cc7e47e
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
50a3bb5b78364dc40266757a7f15fce6
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main4) -}
2877d288161a5cf1b8071dad3079570b
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\ESC[36m== Assignment 4 (Fermat primality check) ==\ESC[0m"#) -}
e69c78c5aa0d41e7e3757c4846168033
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main9
                   Main.main6) -}
87301a6500c6a648224962873a47b70c
  main6 :: GHC.Base.String
  {- Unfolding: (GHC.Show.$fShowInteger_$cshowList
                   (GHC.List.takeWhile
                      @ GHC.Integer.Type.Integer
                      Main.main7
                      Main.composites)
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c05716c30933e201cebcbce0f9211b6
  main7 :: GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (ds :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger# ds Main.main8 of wild { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild }) -}
cb66e5ccd1ff966017148d56425d41ff
  main8 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (100) -}
8bc0e12ee887b5a7a5706437bbff577e
  main9 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("These are the composite natural numbers between 1 and 100: "#) -}
7537e313b2ab5404102625f083877171
  printRan ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ (x :: GHC.Integer.Type.Integer)
                   (y :: GHC.Integer.Type.Integer)
                   (z :: GHC.Integer.Type.Integer) ->
                 Debug.Trace.trace
                   @ GHC.Types.Bool
                   (GHC.CString.unpackAppendCString#
                      Main.printRan3
                      (case GHC.Show.$w$cshowsPrec4
                              0#
                              x
                              (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                       GHC.Base.++_$s++
                         @ GHC.Types.Char
                         (GHC.CString.unpackAppendCString#
                            Main.printRan2
                            (case GHC.Show.$w$cshowsPrec4
                                    0#
                                    y
                                    (GHC.Types.[] @ GHC.Types.Char) of ww1 { (#,#) ww5 ww6 ->
                             GHC.Base.++_$s++
                               @ GHC.Types.Char
                               (GHC.CString.unpackAppendCString#
                                  Main.printRan1
                                  (case GHC.Show.$w$cshowsPrec4
                                          0#
                                          z
                                          (GHC.Types.[] @ GHC.Types.Char) of ww7 { (#,#) ww8 ww9 ->
                                   GHC.Types.: @ GHC.Types.Char ww8 ww9 }))
                               ww5
                               ww6 }))
                         ww3
                         ww4 }))
                   GHC.Types.True) -}
ef38ad1d9fc8090f0f0cd28a2c38dc39
  printRan1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", z = "#) -}
aeea79f56d109b7150eb7b535f3ee94b
  printRan2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", y = "#) -}
2bdb6d58caa076b9f962226a5b1bcdd3
  printRan3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("x = "#) -}
bd880f095340e4cd37e0198a0c32dce0
  testExM ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(LSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                          GHC.Integer.Type.Integer)) ->
                 case w of ww { (,,) ww1 ww2 ww3 -> Main.$wtestExM ww1 ww2 ww3 }) -}
8906cf4ff6b682ded4795c333b602993
  testPerformance ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer)
    -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                          GHC.Integer.Type.Integer)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 Main.$wtestPerformance ww1 ww2 ww3 }) -}
"SPEC/Main $fShow(,,) @ Integer @ Integer @ Integer" [orphan] forall (v2 :: GHC.Show.Show
                                                                              GHC.Integer.Type.Integer)
                                                                     (v1 :: GHC.Show.Show
                                                                              GHC.Integer.Type.Integer)
                                                                     (v :: GHC.Show.Show
                                                                             GHC.Integer.Type.Integer)
  GHC.Show.$fShow(,,) @ GHC.Integer.Type.Integer
                      @ GHC.Integer.Type.Integer
                      @ GHC.Integer.Type.Integer
                      v
                      v1
                      v2
  = Main.$s$fShow(,,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

