
==================== FINAL INTERFACE ====================
2018-10-03 13:03:13.666865077 UTC

interface main:Main 8043
  interface hash: bba5b012981a6fe51ceb867366fe9379
  ABI hash: 954a11efe4f24287510142cfd5220640
  export-list hash: 13a73f7861b55d3cdd94dcfad8a18fbb
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e02561aff3fbba899313e779d62898af
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: Lecture5
package dependencies: array-0.5.2.0 base-4.11.1.0* deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 random-1.1 time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  Lecture5 1f7ea7a03f96215db1ed3503787c223d
  exports: 753ed28271f4f7038548e09baaaf905e
  blocks 4c9f08eaeb0baeed6fba1f91bcfb0fc1
  emptyN 9d81689720732ae242c84ae98953bc5b
  example1 98ac08e159824a1fee086e0c92756d33
  genProblem c62b5a801610c25580d00fc1d071fab1
  rsolveNs a430ef39cf9296626ec1c03064899a6f
  showNode 0d0ba752189818df6b98cfdc69c793fc
  solveAndShow 2e3c88e7cc4a3e5348e17942a8163d14
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
b91230b14f14984198f6c454fe574ea7
  $wfail ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    Main.main5)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
f0b5ea3cdd5d14a076a4b74c099b0116
  $wshowl ::
    [[GHC.Types.Int]] -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
75d5b6a3a73e186d79a97b0b32fa6e25
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
21597d7557ef217db363ef3d62870477
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lecture5.genRandomSudoku10
                        @ Lecture5.Node
                        Lecture5.genRandomSudoku6
                          `cast`
                        (<(Lecture5.Sudoku, [Lecture5.Constraint])>_R
                         ->_R Sym (GHC.Types.N:IO[0] <[Lecture5.Node]>_R))
                        Lecture5.solved
                        Main.main7 `cast` (Sym (GHC.Types.N:IO[0] <[Lecture5.Node]>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   [] -> Main.$wfail ipv
                   : r ds
                   -> case ds of wild1 {
                        []
                        -> case Lecture5.randomS3
                                  (Lecture5.sud2grid (case r of wild2 { (,) x1 ds2 -> x1 }))
                                  ipv of ds2 { (#,#) ipv2 ipv3 ->
                           case Lecture5.genProblem_$srandomize
                                  (Lecture5.filledPositions (case r of wild2 { (,) x ds3 -> x }))
                                  ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                           case Lecture5.randomS3
                                  (Lecture5.sud2grid
                                     (case Lecture5.minimalize r ipv5 of wild2 { (,) x1 ds4 ->
                                      x1 }))
                                  ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                           case Lecture5.solveAndShow1
                                  Lecture5.example1
                                  ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                           GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main2
                             GHC.Types.True
                             ipv8 } } } }
                        : ipv2 ipv3 -> Main.$wfail ipv } } }) -}
2e88dc9faed4f77574fab6dd3b49ba2d
  main2 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.showList__3
                   Main.main3) -}
00541fc208febcba395b62406b5dc851
  main3 :: GHC.Base.String
  {- Unfolding: (case Lecture5.blocks13 of wild {
                   []
                   -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 Main.main4
                   : x xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.showList__3
                        (case x of ww { GHC.Types.I# ww1 ->
                         case GHC.Show.$wshowSignedInt
                                0#
                                ww1
                                (let {
                                   lvl43 :: [GHC.Types.Char]
                                   = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 Main.main4
                                 } in
                                 letrec {
                                   showl1 :: [GHC.Types.Int] -> GHC.Base.String
                                     {- Arity: 1, Strictness: <S,1*U> -}
                                   = \ (ds2 :: [GHC.Types.Int]) ->
                                     case ds2 of wild1 {
                                       [] -> lvl43
                                       : y ys
                                       -> GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showList__1
                                            (case y of ww2 { GHC.Types.I# ww3 ->
                                             case GHC.Show.$wshowSignedInt
                                                    0#
                                                    ww3
                                                    (showl1 ys) of ww4 { (#,#) ww5 ww6 ->
                                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) }
                                 } in
                                 showl1 xs) of ww2 { (#,#) ww3 ww4 ->
                         GHC.Types.: @ GHC.Types.Char ww3 ww4 } }) }) -}
921c750f4779f9d9e97eb49314a106f6
  main4 :: GHC.Base.String
  {- Unfolding: (case Main.$wshowl
                        Lecture5.blocks1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
cce089ce07837a7c03ca5b3b4beccbf5
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main6) -}
d954f87ae8774b8aba92741acdf7d4fc
  main6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at Main.hs:6:11-13"#) -}
1a902c974fa0c953f82b9ece013f552e
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Lecture5.Node] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.main8 #)) -}
dde68dee317d89379a5720db29ef3615
  main8 :: [Lecture5.Node]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lecture5.Node
                   Lecture5.emptyN
                   (GHC.Types.[] @ Lecture5.Node)) -}
0c176f1eb9b638585dd87f35bc00f7a7
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

